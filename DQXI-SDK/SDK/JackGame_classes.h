#pragma once

// Name: DQXIS, Version: 1.0.0

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class JackGame.Jack3StepAnimActor
// 0x00C0 (0x0458 - 0x0398)
class AJack3StepAnimActor : public AActor
{
public:
	class UAnimMontage*                                FinishAnim;                                               // 0x0398(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       FinishAnimWithName;                                       // 0x03A0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              FinishAnimActionSec;                                      // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              FinishInputOffSec;                                        // 0x03AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              FinishInputAllSec;                                        // 0x03B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	struct FName                                       GmmickDropItemId;                                         // 0x03B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       RespawnSaveFlagName;                                      // 0x03C0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03C8(0x0028) MISSED OFFSET
	struct FName                                       UsePropGadgetId;                                          // 0x03F0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       UsePropOugonTuruhasiGadgetId;                             // 0x03F8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bAllwaysDrop;                                             // 0x0400(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x57];                                      // 0x0401(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.Jack3StepAnimActor");
		return ptr;
	}


	void UpdateDropIdEnd();
	void UpdateDropId();
	void SyncSaveData();
	void SpawnDropMoveParabolaEffect(class UParticleSystemComponent* Particle, const struct FVector& Start, const struct FVector& End, float AddZ, float GravZ);
	void STATIC_ShakeCamera(class AJackCharacter* InAnimCharacter, const struct FName& ShakeName, float Scale);
	void SetInput(class AJackCharacter* InAnimCharacter);
	void OnInteractionEnable();
	void OnDebugRespawn();
	void OnActionEnd(class AJackCharacter* InAnimCharacter, bool bFinish);
	void OnAction(class AJackCharacter* InAnimCharacter, bool bFinish);
	bool IsUseOugonNoTuruhasi();
	bool IsDropOk();
	bool IsActionEnd();
	void InitDropParams(float InGmmickDropItemSec, const struct FName& SaveFlag, TArray<struct FName> InDropItemIdArray, TArray<int> InDropItemNumArray);
	struct FName GetUsePropGadgetId();
	TArray<float> GetDropMoveParabolaParam(const struct FVector& Start, const struct FVector& End, float AddZ, float GravZ);
	int GetDropItemNum();
	struct FName GetDropItemId();
	void GetDropItemData(TArray<struct FName>* OutId, TArray<int>* OutNum);
	void ForceSetReplacementSec(float Sec);
	void DetachGadgetObject();
	void CallOnActionEnd(class AJackCharacter* InAnimCharacter);
	void CallOnAction(class AJackCharacter* InAnimCharacter);
	void AttachGadgetObject();
	void AddSpawnedKira(class AJackItemGettableObjectBase* Item);
};


// Class JackGame.JackAchievementManager
// 0x06E8 (0x0720 - 0x0038)
class UJackAchievementManager : public UObject
{
public:
	class UDataTable*                                  AchievementDataTable;                                     // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  AchievementPhoneticDataTable;                             // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackGameFlagCategory>                 SuppressFlagCategory_PossessionItemCount;                 // 0x0048(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       SuppressFlag_PossessionItemCount;                         // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6C8];                                     // 0x0058(0x06C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAchievementManager");
		return ptr;
	}


	void ReacquiredJackUE4Achievement(TEnumAsByte<EJackAchievementCategory> InCategory, TEnumAsByte<EJackAchievementCondition> InCondition);
	void NotUnlockUE4Achievements(bool bIsNotUnlock);
	void LockAllAchievements();
	void Latent_UnlockUE4Achievement(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& AchievementID);
	bool IsQueueingAchievement(TEnumAsByte<EJackAchievementTiming> Timing);
	bool IsAcquiredAchievement(const struct FJackLDT_Achievement& LDT_Achievement);
	bool IsAchievementSyinpaisyou();
	void GetTripleAchievementNoForUnacquiredTrophy(int InCategory, TArray<int>* OutTripleAchievementNoList);
	struct FString GetStringParameter(const struct FJackLDT_Achievement& LDT_Achievement);
	TArray<struct FName> GetSenrekiAchievementList();
	int GetNumericalParameter(const struct FJackLDT_Achievement& LDT_Achievement);
	struct FString GetDescription(const struct FJackLDT_Achievement& LDT_Achievement);
	struct FName GetAchievementQueue(TEnumAsByte<EJackAchievementTiming> Timing);
	struct FString GetAchievementName(const struct FJackLDT_Achievement& LDT_Achievement);
	void EnableAcquisitionsTrophy();
	void DisableAchievementAcquisition(bool bDisable);
	void CheckAcquiredAchievementTrophyList();
	void AcquireAchievementDirect(const struct FJackLDT_Achievement& LDT_Achievement);
};


// Class JackGame.JackActionAIEvaluateScoreCheck
// 0x0178 (0x0510 - 0x0398)
class AJackActionAIEvaluateScoreCheck : public AActor
{
public:
	struct FName                                       RenkeiID;                                                 // 0x0398(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TEnumAsByte<EJackPlayerAIActionControl>            ActionContrlType;                                         // 0x03A0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A1(0x0007) MISSED OFFSET
	struct FJackActionData                             ActionData;                                               // 0x03A8(0x00B0) (Edit, BlueprintVisi, BlueprintReadOnly, Transient, EditConst)
	struct FJackActionScoreResult                      ActionScoreResult;                                        // 0x0458(0x0068) (Edit, BlueprintVisi, BlueprintReadOnly, Transient, EditConst)
	struct FJackDataTableActionAIEvaluateScoreCheck    ScoreCheckRow;                                            // 0x04C0(0x0030) (Edit, BlueprintVisi, BlueprintReadOnly, Transient, EditConst)
	TWeakObjectPtr<class UJackGameCharacter>           CasterGameCharacter;                                      // 0x04F0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TArray<struct FName>                               CasterActionHistory;                                      // 0x04F8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	TWeakObjectPtr<class UJackGameCharacter>           TargetGameCharacter;                                      // 0x0508(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionAIEvaluateScoreCheck");
		return ptr;
	}


	float SC_EvalScoreRevival();
	float SC_EvalScoreMetalUncertainAttack();
	float SC_EvalScoreMetalAttack();
	float SC_EvalScoreIceWave();
	float SC_EvalScoreHealMp();
	float SC_EvalScoreHealHp();
	float SC_EvalScoreGiveAttribute();
	float SC_EvalScoreDefenseUp();
	float SC_EvalScoreDefenseDown();
	float SC_EvalScoreDefense();
	float SC_EvalScoreDead();
	float SC_EvalScoreCureVenom();
	float SC_EvalScoreCurePoison();
	float SC_EvalScoreCureNoact();
	float SC_EvalScoreCureDazzle();
	float SC_EvalScoreCure();
	float SC_EvalScoreContinuedDamageBig();
	float SC_EvalScoreContinuedDamage();
	float SC_EvalScoreAttackUp();
	float SC_EvalScoreAttackDown();
	float SC_EvalScoreAttackBig();
	float SC_EvalScoreAttack2();
	float SC_EvalScoreAttack();
	float SC_EvalScoreAddAbnormal();
	int IsTargetZone(class UJackGameCharacter* TargetCharacter);
	int IsTargetSyubiryokuSlideUp(class UJackGameCharacter* TargetCharacter);
	int IsTargetOddEffect(class UJackGameCharacter* TargetCharacter, EJackOddEffectCategoryType InCategoryType);
	int IsTargetMetal(class UJackGameCharacter* TargetCharacter);
	int IsTargetKougekiryokuSlideUp(class UJackGameCharacter* TargetCharacter);
	int IsTargetJumonMukou(class UJackGameCharacter* TargetCharacter);
	int IsTargetJumonHansya(class UJackGameCharacter* TargetCharacter);
	int IsTargetGiveAttribute();
	int IsTargetDazzleCureEnable(bool InSlide, struct FJackActionCalcValue* CalcValue);
	int IsTargetButuriKanzenGuard(class UJackGameCharacter* TargetCharacter);
	int IsTargetAttackUpEnable(bool InSlide, struct FJackActionCalcValue* CalcValue);
	int IsTargetActionHeal(TArray<struct FName> InActionList);
	int IsResultMaxHpKill();
	int IsResultKill(TArray<struct FJackActionKill>* KillList);
	int IsResultHit(TArray<struct FJackActionOddEffectCollect>* CollectList);
	int IsResultDeath();
	int IsResultActionNormal();
	int IsRenkeiAction();
	int IsMetalEnableAction();
	int IsCriticalCertaintyAction();
	int IsCasterZone();
	int IsActionClearPoison();
	int IsActionClearNoact();
	int IsActionClearDazzle();
	int IsActionClearConditionAbnormality();
	float GetTargetZoneCoefficient(TArray<struct FJackActionValue>* ValueList);
	float GetTargetSyubiryoku(bool InSlide, TArray<struct FJackActionValue>* ValueList);
	float GetTargetNemuriCorrectCoefficient(TArray<struct FJackActionValue>* ValueList);
	float GetTargetNemuriCoefficient(TArray<struct FJackActionValue>* ValueList);
	float GetTargetMpRate(int* OutMp, int* OutMaxMp, TArray<struct FJackActionCalcRate>* CalcList);
	float GetTargetMetalExpCoefficient(TArray<struct FJackActionValue>* ValueList);
	float GetTargetMetalCoefficient(TArray<struct FJackActionValue>* ValueList);
	float GetTargetKougekiryoku(bool InSlide, TArray<struct FJackActionValue>* ValueList);
	float GetTargetHpRate(int* OutHp, int* OutMaxHp, TArray<struct FJackActionCalcRate>* CalcList);
	float GetTargetAttackRankCoefficient(TArray<struct FJackActionValue>* CalcValueList);
	float GetTargetActionRevive(TArray<struct FName> InActionList);
	void GetTargetActionList(bool InAliveOnly, TArray<struct FName>* OutActionList);
	float GetScoreCorrectionFactor();
	int GetResultUseMp();
	float GetResultTargetMpHealRate(TArray<struct FJackActionCalcRate>* CalcList);
	TArray<class UJackGameCharacter*> GetResultTargetList();
	float GetResultTargetHpHealRate(TArray<struct FJackActionCalcRate>* CalcList);
	float GetResultSyubiryokuSlideChangeValue(TArray<struct FJackSlideActionCalc>* CalcList);
	float GetResultSyubiryokuSlideAddCoefficient(TArray<struct FJackSlideAction>* CalcList);
	float GetResultRevive();
	float GetResultOddEffectSuccessPer(TArray<struct FJackActionOddEffectCollect>* CollectList);
	float GetResultKougekiryokuSlideChangeValue(TArray<struct FJackSlideActionCalc>* CalcList);
	int GetResultKillMetal(TArray<struct FJackActionKill>* KillList);
	int GetResultKill(TArray<struct FJackActionKill>* KillList);
	float GetResultDamageSuccessPer(TArray<struct FJackActionOddEffectCollect>* CollectList);
	float GetResultDamageRateMetal(TArray<struct FJackActionCalcRate>* CalcList);
	float GetResultDamageRate2(TArray<struct FJackActionKill>* KillList, TArray<struct FJackActionCalcRate>* CalcList);
	float GetResultDamageRate(TArray<struct FJackActionCalcRate>* CalcList);
	float GetResultDamageHitRateMetal(TArray<struct FJackActionValue>* ValueList);
	int GetResultDamage();
	float GetResultAutoHpHeal();
	float GetRandom();
	float GetEnemyGroupGiveAttributeParam();
	float GetContinuedDamageCoefficient();
	float GetCasterUseMpImpactCoefficient();
	float GetCasterDazzleCorrectCoefficient();
	float GetCasterActionHistory();
	float GetActionHitPerCorrection();
};


// Class JackGame.JackActionCalcDamage
// 0x0000 (0x0038 - 0x0038)
class UJackActionCalcDamage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionCalcDamage");
		return ptr;
	}


	struct FJackActionCalcDamageResult STATIC_CalcDamageBP(class UJackGameCharacter* InAttacker, class UJackGameCharacter* InDamager, struct FJackActionData* ActionData);
};


// Class JackGame.JackActionCameraDatabase
// 0x0000 (0x0038 - 0x0038)
class UJackActionCameraDatabase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionCameraDatabase");
		return ptr;
	}

};


// Class JackGame.JackActionCursorControllerComponent
// 0x0088 (0x01B0 - 0x0128)
class UJackActionCursorControllerComponent : public UActorComponent
{
public:
	struct FJackInteractorRange                        FieldAttackShortRange;                                    // 0x0128(0x0014) (Edit, DisableEditOnInstance)
	struct FJackInteractorRange                        FieldAttackLongRange;                                     // 0x013C(0x0014) (Edit, DisableEditOnInstance)
	struct FJackInteractorRange                        FieldAttackBowgunRange;                                   // 0x0150(0x0014) (Edit, DisableEditOnInstance)
	struct FJackInteractorRange                        FieldAttackSearchRange;                                   // 0x0164(0x0014) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0178(0x0030) MISSED OFFSET
	float                                              DisplayActionGuideRadius;                                 // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionCursorControllerComponent");
		return ptr;
	}


	void OnFocusedInteractiveActorComponentPropertyChanged();
	void OnCompletedInteraction(class UJackInteractorComponent* InInteractorComponent, class UJackInteractiveActorComponent* InInteractiveActorComponent);
};


// Class JackGame.JackActionDatabase
// 0x0000 (0x0038 - 0x0038)
class UJackActionDatabase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionDatabase");
		return ptr;
	}


	struct FJackDataTableActionSecondCheck STATIC_GetDTActionSecondCheckRow(EJackBattleIntelligenceType IntelligenceType, struct FJackActionData* ActionData);
	struct FName STATIC_GetDTActionSecondCheckID(EJackBattleIntelligenceType IntelligenceType, struct FJackActionData* ActionData);
	struct FJackDataTableAction STATIC_GetDTActionRow(struct FJackActionData* ActionData);
	struct FJackDataTableActionOddEffect STATIC_GetDTActionOddEffectRow(struct FJackActionData* ActionData);
	struct FJackDataTableActionMultiAttack STATIC_GetDTActionMultiAttackRow(struct FJackActionData* ActionData);
	struct FJackDataTableActionHitOrder STATIC_GetDTActionHitOrderRow(struct FJackActionData* ActionData);
	struct FJackDataTableActionDamage STATIC_GetDTActionDamageRow(struct FJackActionData* ActionData);
	struct FJackActionData GetActionData(const struct FName& ActionID, bool bWarnIfMissing);
};


// Class JackGame.JackActionEffect
// 0x03D8 (0x0770 - 0x0398)
class AJackActionEffect : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnMovementAttachProgressCompleteDelegate;                 // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMovementCompleteDelegate;                               // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpawnHitEffectDelegate;                                 // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRequestDestroyDelegate;                                 // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMovementAttachProgressStartDelegate;                    // 0x03D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	EJackActionEffectSpawnHitEffectTiming              SpawnHitEffectTiming;                                     // 0x03E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	float                                              HitEffectDelayTime;                                       // 0x03EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EJackActionEffectNotifyActionHitTiming             NotifyActionHitTiming;                                    // 0x03F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03F1(0x0003) MISSED OFFSET
	float                                              NotifyActionHitDelayTime;                                 // 0x03F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	EJackActionEffectDeactivateDefaultEffectTiming     DeactivateDefaultEffectsTiming;                           // 0x03F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoDestroy;                                             // 0x03F9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03FA(0x0002) MISSED OFFSET
	float                                              LifeTime;                                                 // 0x03FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DestroyDelayTime;                                         // 0x0400(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	TArray<struct FJackActionEffectTimelineEventEntry> TimelineEventEntries;                                     // 0x0408(0x0010) (Edit, ZeroConstructor)
	struct FJackActionEffectMovementPosition           StartMovementPosition;                                    // 0x0418(0x0030) (Edit)
	struct FJackActionEffectMovementPosition           EndMovementPosition;                                      // 0x0448(0x0030) (Edit)
	TArray<struct FJackActionEffectEffect>             MuzzleEffects;                                            // 0x0478(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackActionEffectEffect>             DefaultEffects;                                           // 0x0488(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackActionEffectEffect>             HitEffects;                                               // 0x0498(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackActionEffectEffect>             DamageEffects;                                            // 0x04A8(0x0010) (Edit, ZeroConstructor)
	float                                              PlayDelayTime;                                            // 0x04B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04BC(0x0004) MISSED OFFSET
	struct FJackActionEffectDecal                      TrailEffect;                                              // 0x04C0(0x0018) (Edit)
	class USphereComponent*                            SphereComp;                                               // 0x04D8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          ActionEffectMovementComp;                                 // 0x04E0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        StaticMeshComp;                                           // 0x04E8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> MuzzleParticleComps;                                      // 0x04F0(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> DefaultParticleComps;                                     // 0x0500(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> HitParticleComps;                                         // 0x0510(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> DamageParticleComps;                                      // 0x0520(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst)
	TArray<TWeakObjectPtr<class UAudioComponent>>      DefaultLoopAudioComps;                                    // 0x0530(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst)
	class USphereComponent*                            WorkSphereComp1;                                          // 0x0540(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp2;                                          // 0x0548(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp3;                                          // 0x0550(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp4;                                          // 0x0558(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp5;                                          // 0x0560(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp6;                                          // 0x0568(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp7;                                          // 0x0570(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            WorkSphereComp8;                                          // 0x0578(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp1;                                        // 0x0580(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp2;                                        // 0x0588(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp3;                                        // 0x0590(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp4;                                        // 0x0598(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp5;                                        // 0x05A0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp6;                                        // 0x05A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp7;                                        // 0x05B0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionEffectMovementComponent*          WorkMovementComp8;                                        // 0x05B8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bSpawnHitEffectComplete;                                  // 0x05C0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bTimelineEventComplete;                                   // 0x05C1(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bMovementCompAttachProgressComplete;                      // 0x05C2(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bMovementCompComplete;                                    // 0x05C3(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bDeactivateDefaultEffectsComplete;                        // 0x05C4(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bRequestDestroyComplete;                                  // 0x05C5(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x05C6(0x0002) MISSED OFFSET
	TWeakObjectPtr<class AActor>                       CasterActor;                                              // 0x05C8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       TargetActor;                                              // 0x05D0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class AActor*                                      ExposeCasterActor;                                        // 0x05D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	class AActor*                                      ExposeTargetActor;                                        // 0x05E0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x05E8(0x0008) MISSED OFFSET
	struct FTimeline                                   TimelineEvent;                                            // 0x05F0(0x00E0) (Edit, DisableEditOnTemplate)
	int                                                CurrentTimelineEventIndex;                                // 0x06D0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x06D4(0x0004) MISSED OFFSET
	TArray<struct FTimerHandle>                        TimerHandles;                                             // 0x06D8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	bool                                               bIsPlayStart;                                             // 0x06E8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsFireReservedEffect2;                                   // 0x06E9(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x06EA(0x0002) MISSED OFFSET
	float                                              TotalDecalAddSize;                                        // 0x06EC(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<float>                                      WorkTotalDecalAddSizes;                                   // 0x06F0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	struct FVector                                     DecalCacheLocation;                                       // 0x0700(0x000C) (Edit, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x070C(0x0004) MISSED OFFSET
	TArray<struct FVector>                             WorkMoveDecalCacheLocations;                              // 0x0710(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	struct FVector                                     PACheckCacheLocation;                                     // 0x0720(0x000C) (Edit, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x072C(0x0004) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               AttachActors;                                             // 0x0730(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class AActor>>               JumonhansyaTargets;                                       // 0x0740(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	bool                                               bAbort;                                                   // 0x0750(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0751(0x0007) MISSED OFFSET
	TArray<struct FJackBlendablePostProcessSettingsData> PostBlendableData;                                        // 0x0758(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0768(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionEffect");
		return ptr;
	}


	void SetTargetActor(class AActor* InTargetActor);
	void SetFireReservedEfect2(bool bInFireReservedEffect2);
	void SetCasterActor(class AActor* InCasterActor);
	void OnTimelineEvent();
	class AActor* GetTargetActor();
	class AActor* GetCasterActor();
	bool GetBlurScreenV2(EJackActionEffectCategory EffectCategory, struct FVector2D* OutV2);
	TArray<class AActor*> GetAttachActors();
	class UJackActionEffectMovementComponent* GetActionEffectMovementComponent();
	void Delegate__DelegateSignature();
	void AttachToOtherActionEffect(class AActor* ParentActor, const struct FName& SocketName, EAttachmentRule AttachRule, bool bWeldSimulatedBodies, bool bCallTeleport);
	void AddJumonhansyaTarget(class AActor* JumonhansyaTarget);
	void AddAttachActor(class AActor* AttachActor);
};


// Class JackGame.JackActionEffectData
// 0x00A8 (0x00E0 - 0x0038)
class UJackActionEffectData : public UObject
{
public:
	TArray<struct FJackActionAttachedParticle>         CastParticles;                                            // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionAttachedParticle>         CastParticles_H;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionAttachedParticle>         CastParticles_S;                                          // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionAttachedParticle>         CastParticles_M;                                          // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionAttachedParticle>         CastParticles_L;                                          // 0x0078(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionAttachedParticle>         CastParticles_LL;                                         // 0x0088(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ShotActionEffectClasses;                                  // 0x0098(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	EJackActionEffectBehaviorType                      ShotBehavior;                                             // 0x00A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bBurstEffectSnapToGround;                                 // 0x00A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET
	TArray<struct FJackActionSpawnedProjectile>        ShotProjectiles;                                          // 0x00B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionSpawnedBurstEffect>       ShotBurstEffects;                                         // 0x00C0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackActionAttachedParticle>         ShotParticles;                                            // 0x00D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionEffectData");
		return ptr;
	}

};


// Class JackGame.JackActionEffectMovementComponent
// 0x01C8 (0x0340 - 0x0178)
class UJackActionEffectMovementComponent : public UMovementComponent
{
public:
	bool                                               bRotationFollowsVelocity;                                 // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPlanarMovementFrontRotation;                             // 0x0179(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x017A(0x0006) MISSED OFFSET
	class UCurveFloat*                                 AttachProgressCurve;                                      // 0x0180(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttachProgressCurveTimeScale;                             // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 MissileProgressCurve;                                     // 0x0190(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                LocationCurve;                                            // 0x0198(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationCurveScale;                                       // 0x01A0(0x000C) (Edit, IsPlainOldData)
	EJackRandomCalcType                                LocationRandomCalcTypeX;                                  // 0x01AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EJackRandomCalcType                                LocationRandomCalcTypeY;                                  // 0x01AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EJackRandomCalcType                                LocationRandomCalcTypeZ;                                  // 0x01AE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x01AF(0x0001) MISSED OFFSET
	class UCurveVector*                                LocationRandomCurve;                                      // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationRandomCurveScale;                                 // 0x01B8(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	class UCurveVector*                                RotationCurve;                                            // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                RotationPivotCurve;                                       // 0x01D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                OrbitSpeedCurve;                                          // 0x01D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveVector*                                OrbitRadiusCurve;                                         // 0x01E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     OrbitRadiusCurveScale;                                    // 0x01E8(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    OrbitInitialRotation;                                     // 0x01F4(0x000C) (Edit, IsPlainOldData)
	class UCurveVector*                                ScaleCurve;                                               // 0x0200(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ScaleCurveScale;                                          // 0x0208(0x000C) (Edit, IsPlainOldData)
	float                                              BaseDistance;                                             // 0x0214(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAttachWorld;                                             // 0x0218(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEndAttachGround;                                         // 0x0219(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOffRollByRotationFollowsVelocity;                        // 0x021A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x021B(0x0001) MISSED OFFSET
	float                                              bPlaying;                                                 // 0x021C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FJackAttachInfo                             StartAttachInfo;                                          // 0x0220(0x0038) (Edit, DisableEditOnTemplate)
	struct FJackAttachInfo                             EndAttachInfo;                                            // 0x0258(0x0038) (Edit, DisableEditOnTemplate)
	float                                              ProgressTime;                                             // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0294(0x000C) MISSED OFFSET
	struct FTransform                                  StartAttachTransform;                                     // 0x02A0(0x0030) (Edit, DisableEditOnTemplate, IsPlainOldData)
	struct FTransform                                  StartUpdatedComponentTransform;                           // 0x02D0(0x0030) (Edit, DisableEditOnTemplate, IsPlainOldData)
	struct FVector                                     LocationRandomValue;                                      // 0x0300(0x000C) (Edit, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	struct FQuat                                       CurrentFrontQuat;                                         // 0x0310(0x0010) (Edit, DisableEditOnTemplate, IsPlainOldData)
	struct FRotator                                    CurrentMovementFrontRotation;                             // 0x0320(0x000C) (Edit, DisableEditOnTemplate, IsPlainOldData)
	struct FRotator                                    CurrentOrbitRotation;                                     // 0x032C(0x000C) (Edit, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0338(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionEffectMovementComponent");
		return ptr;
	}


	void Stop();
	void Play(const struct FJackAttachInfo& StartAttachInfo, const struct FJackAttachInfo& EndAttachInfo);
};


// Class JackGame.JackActionExec
// 0x0548 (0x08E0 - 0x0398)
class AJackActionExec : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayDelegate;                                           // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayCameraDelegate;                                     // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCastEnterDelegate;                                      // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShotEnterDelegate;                                      // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHitDelegate;                                            // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHitCompleteDelegate;                                    // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBPStateDelegate;                                        // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayCompleteDelegate;                                   // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0xE0];                                      // 0x0420(0x00E0) MISSED OFFSET
	TWeakObjectPtr<class UJackGameCharacter>           Caster;                                                   // 0x0500(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	struct FName                                       ActionID;                                                 // 0x0508(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	struct FJackActionData                             ActionData;                                               // 0x0510(0x00B0) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FJackActionPlayParam                        ActionPlayParam;                                          // 0x05C0(0x0290) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnTemplate, Transient)
	struct FVector                                     CasterOriginLocation;                                     // 0x0850(0x000C) (Edit, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bConsumeDouguDisable;                                     // 0x085C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPlayCameraFrame;                                         // 0x085D(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bShotStarted;                                             // 0x085E(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bHitComplete;                                             // 0x085F(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bPlayJumonHansyaEffect;                                   // 0x0860(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bPlayedCamera;                                            // 0x0861(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bBackJumpPlaying;                                         // 0x0862(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bFreeMoveOriginLocationCanceled;                          // 0x0863(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0864(0x0004) MISSED OFFSET
	TArray<EJackActionExecStateType>                   StateTransitions;                                         // 0x0868(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient)
	bool                                               bBPStateComplete;                                         // 0x0878(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0879(0x0007) MISSED OFFSET
	struct FJackActionMessageArg                       MessageArg;                                               // 0x0880(0x0020) (Edit, DisableEditOnTemplate, Transient)
	TWeakObjectPtr<class UJackActionMessageInfo>       MessageInfo_Koudou;                                       // 0x08A0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	class UJackActionWaitChecker*                      ActionWaitChecker;                                        // 0x08A8(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	class UJackStreamObjectsHolder*                    ResourceHolder;                                           // 0x08B0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	class UAnimMontage*                                AnimMontageCast;                                          // 0x08B8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	class UAnimMontage*                                AnimMontageShot;                                          // 0x08C0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x18];                                      // 0x08C8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec");
		return ptr;
	}


	void SubtractItemInActionPlayParam();
	class AJackMonsterCharacter* SpawnZouenMonster(const struct FName& MonsterID, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void SetupFieldModeStateTransition(bool bOnlyInField);
	void SetNifuramuCharacterArray(TArray<class UJackGameCharacter*> GameCharacterArray);
	void SetNifuramuCharacter(class UJackGameCharacter* GameCharacter, bool bToubatsuEnable);
	void SetNifuramuCasterCharacter();
	void SetBPStateComplete();
	void SerifuWindowMessageDelegate(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, TEnumAsByte<EJackTextDelegateType> DelegateType, int Page, int Line, int Index);
	void SerifuScriptDelegate(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, TEnumAsByte<EJackMessageScriptEventType> DelegateType, const struct FString& StringParam);
	void SendCommandNakamayobi(class AJackCharacter* Actor);
	void ResetStateTransition();
	void RemoveStateTransition(EJackActionExecStateType StateType);
	void RemoveBattleCharacterCompletely(class UJackGameCharacter* GameCharacter, bool bToubatsuEnable);
	void RegisterTextDelegate(class UJackUMGSerifuWindowController* InController, class AJackCharacter* InTarget);
	void RegisterReservedEffect(bool bCastOrShot, bool bActionEffect2Only);
	void PushStateTransition(EJackActionExecStateType StateType, bool bHead);
	void PlayBattleVoice(class AJackCharacter* InTarget, const struct FName& InVoiceID);
	void PlayActionMessageWithTextId(const struct FName& TextID);
	void PlayActionMessage(EJackActionTextType TextType);
	void NotifyFireReservedEffect(bool bInActionEffect, bool bInProjectile, bool bInBurstEffect, bool bInParticleSystem);
	void NotifyActionHit();
	EJackActionExecStateType NextStateTransition(bool bBack);
	bool IsConsumeAction();
	void InsertStateTransition(EJackActionExecStateType StateType, EJackActionExecStateType InsertPositionStateType);
	TArray<class UJackGameCharacter*> GetTargetGameCharacters();
	class UJackGameCharacter* GetTargetGameCharacter();
	TArray<class AJackCharacter*> GetTargetCharacters();
	class AJackCharacter* GetTargetCharacter();
	TArray<class AJackCharacter*> GetSynchronizeCharacters();
	int GetStateTransitionNum();
	TArray<EJackActionExecStateType> GetStateTransitionBP();
	struct FName GetShotAnimMontageKey();
	TArray<struct FJackMessageArgumentData> GetMessageArgs();
	class UJackGameCharacter* GetCasterGameCharacter();
	class AJackCharacter* GetCasterCharacter();
	bool GetCasterChangeVariantForm();
	float GetBattleParameterInoriNoYubiwaProb();
	struct FJackActionPlayParam GetActionPlayParamBP();
	void Delegate__DelegateSignature();
	void ConsumeMP();
	void ChangeState(EJackActionExecStateType StateType);
	void BattleActionCameraPlayStart(const struct FName& ActionCameraID);
};


// Class JackGame.JackActionExec_ActionHit
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_ActionHit : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_ActionHit");
		return ptr;
	}

};


// Class JackGame.JackActionExec_NoShot
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_NoShot : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_NoShot");
		return ptr;
	}

};


// Class JackGame.JackActionExec_BunnyNoMamori
// 0x0010 (0x08F0 - 0x08E0)
class AJackActionExec_BunnyNoMamori : public AJackActionExec_NoShot
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x08E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_BunnyNoMamori");
		return ptr;
	}


	void OnTenNoKoeMessageEnd();
	void OnPlay();
	void OnHitComplete();
};


// Class JackGame.JackActionExec_Bunsin
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_Bunsin : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_Bunsin");
		return ptr;
	}


	void OnPlay();
};


// Class JackGame.JackActionExec_Destruction
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_Destruction : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_Destruction");
		return ptr;
	}

};


// Class JackGame.JackActionExec_DevilMode
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_DevilMode : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_DevilMode");
		return ptr;
	}

};


// Class JackGame.JackActionExec_FieldMode
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_FieldMode : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_FieldMode");
		return ptr;
	}

};


// Class JackGame.JackActionExec_M_Nigeru
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_M_Nigeru : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_M_Nigeru");
		return ptr;
	}

};


// Class JackGame.JackActionExec_Nusumu
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_Nusumu : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_Nusumu");
		return ptr;
	}

};


// Class JackGame.JackActionExec_Nusumu_Bunsin
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_Nusumu_Bunsin : public AJackActionExec_Bunsin
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_Nusumu_Bunsin");
		return ptr;
	}

};


// Class JackGame.JackActionExec_RemoveTurnQueue
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_RemoveTurnQueue : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_RemoveTurnQueue");
		return ptr;
	}


	void OnPlay();
};


// Class JackGame.JackActionExec_RensouDan
// 0x0040 (0x0920 - 0x08E0)
class AJackActionExec_RensouDan : public AJackActionExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x08E0(0x0008) MISSED OFFSET
	struct FName                                       CallLocatorTagName;                                       // 0x08E8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NeedToSpawnCount;                                         // 0x08F0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x08F4(0x0004) MISSED OFFSET
	TArray<class AJackLocator*>                        ZouenLocators;                                            // 0x08F8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0908(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_RensouDan");
		return ptr;
	}


	void SpawnZouen();
	void OnPlay_CheckFirst();
};


// Class JackGame.JackActionExec_SwitchStance
// 0x0010 (0x08F0 - 0x08E0)
class AJackActionExec_SwitchStance : public AJackActionExec
{
public:
	TArray<class AActor*>                              SwitchStanceLocators;                                     // 0x08E0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_SwitchStance");
		return ptr;
	}


	void OnPlayActionExec();
	class AActor* GetSwitchLocator(const struct FName& InTagName);
	void ApplyTroopLocations(const struct FVector& InMonsterTroop, const struct FVector& InPlayerTroop);
};


// Class JackGame.JackActionExec_TenkiYohou
// 0x0000 (0x08E0 - 0x08E0)
class AJackActionExec_TenkiYohou : public AJackActionExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionExec_TenkiYohou");
		return ptr;
	}

};


// Class JackGame.JackTask
// 0x0008 (0x0040 - 0x0038)
class UJackTask : public UObject
{
public:
	int                                                Scene;                                                    // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              SceneTime;                                                // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTask");
		return ptr;
	}

};


// Class JackGame.JackTaskActionHitExec
// 0x0030 (0x0070 - 0x0040)
class UJackTaskActionHitExec : public UJackTask
{
public:
	TWeakObjectPtr<class UJackGameCharacter>           CasterGameCharacter;                                      // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TWeakObjectPtr<class AJackActionEffect>            ActionEffect;                                             // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                HitGroupCount;                                            // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bInitialized;                                             // 0x0054(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	TArray<struct FJackActionHitCharacterInfo>         HitCharacterInfos;                                        // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	int                                                CurrentHitCount;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              HitInterval;                                              // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTaskActionHitExec");
		return ptr;
	}

};


// Class JackGame.JackActionHitManager
// 0x0028 (0x0060 - 0x0038)
class UJackActionHitManager : public UObject
{
public:
	class UJackTaskHolder*                             ActionHitExecTaskHolder;                                  // 0x0038(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionHitManager");
		return ptr;
	}

};


// Class JackGame.JackActionManager
// 0x00B0 (0x0448 - 0x0398)
class AJackActionManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	class UJackActionMessageManager*                   ActionMessageManager;                                     // 0x03A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionHitManager*                       ActionHitManager;                                         // 0x03A8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackActionNakamaYobiManager*                ActionNakamaYobiManager;                                  // 0x03B0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class AJackActionExec*>                     ActionExecs;                                              // 0x03B8(0x0010) (Edit, ExportObject, ZeroConstructor, EditConst)
	class AJackActionSecondCheck*                      SecondCheck;                                              // 0x03C8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class UClass*                                      SecondCheckClass;                                         // 0x03D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AJackActionAIEvaluateScoreCheck*             ScoreCheck;                                               // 0x03D8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class UClass*                                      ScoreCheckClass;                                          // 0x03E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, class UJackStreamObjectsHolder*> ActionResourceCache;                                      // 0x03E8(0x0050) (Edit, ZeroConstructor, Transient, EditConst)
	TArray<class UJackActionPreviewExec*>              ActionPreviewExecs;                                       // 0x0438(0x0010) (Edit, ExportObject, ZeroConstructor, Transient, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionManager");
		return ptr;
	}


	bool STATIC_CalcSecondCheckBP(class UJackGameCharacter* CasterGameCharacter, class UJackGameCharacter* TargetGameCharacter, EJackBattleIntelligenceType IntelligenceType, struct FJackActionData* ActionData);
	float STATIC_CalcScoreCheckBP(const struct FName& RenkeiID, TEnumAsByte<EJackPlayerAIActionControl> ActionContrlType, const struct FJackActionScoreResult& ActionScoreResult, const struct FName& ScoreCheckID, class UJackGameCharacter* CasterGameCharacter, TArray<struct FName> CasterActionHistory, class UJackGameCharacter* TargetGameCharacter, struct FJackActionData* ActionData);
	bool STATIC_CalcFirstCheckBP(class UJackGameCharacter* Caster, EJackBattleIntelligenceType IntelligenceType, struct FJackActionData* ActionData);
};


// Class JackGame.JackActionMessageManager
// 0x0060 (0x0098 - 0x0038)
class UJackActionMessageManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	TWeakObjectPtr<class AJackBattlePlayerController>  BattlePlayerController;                                   // 0x0040(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class UJackActionMessageInfo*>              MessageInfoQueue;                                         // 0x0048(0x0010) (Edit, ZeroConstructor, EditConst)
	class UJackActionMessageInfo*                      CurrentMessageInfo;                                       // 0x0058(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              CurrentMessagePlayRemainTime;                             // 0x0060(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MessagePlayTime;                                          // 0x0064(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bCloseRequest;                                            // 0x0068(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	int                                                Scene;                                                    // 0x006C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              SceneTime;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bMessageSkip;                                             // 0x0074(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	float                                              TextKeepTime;                                             // 0x0078(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              TextMinTime;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FString                                     ConsumeMP0Message;                                        // 0x0080(0x0010) (Edit, ZeroConstructor, EditConst)
	bool                                               bIsBattleTurnStart;                                       // 0x0090(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionMessageManager");
		return ptr;
	}

};


// Class JackGame.JackActionNakamaYobiManager
// 0x0050 (0x0088 - 0x0038)
class UJackActionNakamaYobiManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionNakamaYobiManager");
		return ptr;
	}

};


// Class JackGame.JackTickableGameObject
// 0x0018 (0x0050 - 0x0038)
class UJackTickableGameObject : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	bool                                               bAutoDestroyWhenFinished;                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceDestoryUObject;                                     // 0x0041(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	float                                              LifeSpan;                                                 // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTickableGameObject");
		return ptr;
	}

};


// Class JackGame.JackActionPreviewExec
// 0x0340 (0x0390 - 0x0050)
class UJackActionPreviewExec : public UJackTickableGameObject
{
public:
	int                                                PreviewSceneID;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	TWeakObjectPtr<class UJackGameCharacter>           PreviewCasterGameCharacter;                               // 0x0054(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FJackActionSlot                             PreviewActionSlot;                                        // 0x0060(0x0040) (Edit, DisableEditOnTemplate, Transient)
	struct FName                                       PreviewActionID;                                          // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET
	struct FJackActionPlayParam                        PreviewActionPlayParam;                                   // 0x00B0(0x0290) (Edit, DisableEditOnTemplate, Transient)
	class UJackStreamObjectsHolder*                    PreviewActionResourceHolder;                              // 0x0340(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bPreviewActionMotionLoadComplete;                         // 0x0348(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x47];                                      // 0x0349(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionPreviewExec");
		return ptr;
	}

};


// Class JackGame.JackActionSecondCheck
// 0x00C8 (0x0460 - 0x0398)
class AJackActionSecondCheck : public AActor
{
public:
	struct FJackActionData                             ActionData;                                               // 0x0398(0x00B0) (Edit, BlueprintVisi, BlueprintReadOnly, Transient, EditConst)
	TWeakObjectPtr<class UJackGameCharacter>           CasterGameCharacter;                                      // 0x0448(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TWeakObjectPtr<class UJackGameCharacter>           TargetGameCharacter;                                      // 0x0450(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionSecondCheck");
		return ptr;
	}


	bool SC_T_HPRate_101();
	bool SC_T_Function();
	bool SC_T_Failed();
	bool SC_M_Nigeru();
	bool SC_Hoimi();
	bool IsTargetSoseiCostIn();
	bool IsTargetOnaziMonsterId();
	bool IsTargetOddEffectT();
	bool IsTargetOddEffectSlideMaxF();
	bool IsTargetOddEffectSlide(EJackOddEffectCategoryType InCategoryType, int InSlideRank);
	bool IsTargetOddEffectOverwriteByStatus(const struct FName& InStatusId, EJackOddEffectOverwriteType InOverwriteType);
	bool IsTargetOddEffectOverwrite(EJackOddEffectCategoryType InCategoryType, EJackOddEffectOverwriteType InOverwriteType);
	bool IsTargetOddEffectF();
	bool IsTargetOddEffectByStatus(const struct FName& InStatusId);
	bool IsTargetOddEffectAttributeF();
	bool IsTargetOddEffect(EJackOddEffectCategoryType InCategoryType);
	bool IsTargetMpRate(float InMpRate, EJackEvaluateType InMpEval);
	bool IsTargetMp(int InMP, EJackEvaluateType InMpEval);
	bool IsTargetMonsterIdName(const struct FString& InCheckName);
	bool IsTargetMetal();
	bool IsTargetKougekiDamageF(float InTime, EJackEvaluateType InTimeEval);
	bool IsTargetKougekiDamage(int InTime, EJackEvaluateType InTimeEval);
	bool IsTargetHpRate(float InHpRate, EJackEvaluateType InHpEval);
	bool IsTargetHp(int InHp, EJackEvaluateType InHpEval);
	bool IsTargetGroupeSoseiCostIn(int InCount, EJackEvaluateType InCountEval);
	bool IsTargetGroupeOddEffectSlideRate(EJackOddEffectCategoryType InCategoryType, int InSlideRank, float InRate, EJackEvaluateType InRateEval);
	bool IsTargetGroupeOddEffectRateByStatus(const struct FName& InStatusId, float InRate, EJackEvaluateType InRateEval);
	bool IsTargetGroupeOddEffectRate(EJackOddEffectCategoryType InCategoryType, float InRate, EJackEvaluateType InRateEval);
	bool IsTargetGroupeOddEffectCondition(int InCount, EJackEvaluateType InCountEval);
	bool IsTargetGroupeOddEffectByStatus(const struct FName& InStatusId, int InCount, EJackEvaluateType InCountEval);
	bool IsTargetGroupeOddEffect(EJackOddEffectCategoryType InCategoryType, int InCount, EJackEvaluateType InCountEval);
	bool IsTargetGroupeMpRate(float InMpRate, EJackEvaluateType InMpEval, float InRate, EJackEvaluateType InRateEval);
	bool IsTargetGroupeMetal(int InCount, EJackEvaluateType InCountEval);
	bool IsTargetGroupeHpRate(float InHpRate, EJackEvaluateType InHpEval, float InRate, EJackEvaluateType InRateEval);
	bool IsTargetGroupeAllOddEffectSlide(EJackOddEffectCategoryType InCategoryType, int InSlideRank);
	bool IsTargetGroupeAllOddEffectByStatus(const struct FName& InStatusId);
	bool IsTargetGroupeAllOddEffect(EJackOddEffectCategoryType InCategoryType);
	bool IsTargetGroupeAllMpRate(float InMpRate, EJackEvaluateType InMpEval);
	bool IsTargetGroupeAllHpRate(float InHpRate, EJackEvaluateType InHpEval);
	bool IsTargetGroupeAllAttributeParamRate(EJackAttributeParam InAttributeParam, float InRate, EJackEvaluateType InRateEval);
	bool IsTargetGender(TEnumAsByte<EJackGender> InGenderType);
	bool IsTargetCharacter(TEnumAsByte<EJackCharacter> InCharacterType);
	bool IsTargetAttributeParamRate(EJackAttributeParam InAttributeParam, float InRate, EJackEvaluateType InRateEval);
	bool IsNakamaYobiCostOverF();
	bool IsMonsterNumber(int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InIsOperational, bool InIsMovementEnabled);
	bool IsFriendNumberMonsterId(const struct FName& InMonsterId, int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy, bool InGuest);
	bool IsFriendNumber(int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy, bool InGuest);
	bool IsFriendGroupeOddEffectRateByStatus(const struct FName& InStatusId, float InRate, EJackEvaluateType InRateEval, bool InAliveOnly, bool InStandBy);
	bool IsFriendGroupeOddEffectRate(EJackOddEffectCategoryType InCategoryType, float InRate, EJackEvaluateType InRateEval, bool InAliveOnly, bool InStandBy);
	bool IsFriendGroupeOddEffectByStatus(const struct FName& InStatusId, int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy);
	bool IsFriendGroupeOddEffect(EJackOddEffectCategoryType InCategoryType, int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy);
	bool IsFriendGroupeMpRate(float InHpRate, EJackEvaluateType InHpEval, float InRate, EJackEvaluateType InRateEval, bool InStandBy, bool InGuest);
	bool IsFriendGroupeHpRate(float InHpRate, EJackEvaluateType InHpEval, float InRate, EJackEvaluateType InRateEval, bool InStandBy, bool InGuest);
	bool IsEnemyNumberMonsterId(const struct FName& InMonsterId, int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy, bool InGuest);
	bool IsEnemyNumber(int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy, bool InGuest);
	bool IsEnemyGroupeOddEffectByStatus(const struct FName& InStatusId, int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy);
	bool IsEnemyGroupeOddEffect(EJackOddEffectCategoryType InCategoryType, int InCount, EJackEvaluateType InCountEval, bool InAliveOnly, bool InStandBy);
	bool IsEnemyGroupeHpRate(float InHpRate, EJackEvaluateType InHpEval, float InRate, EJackEvaluateType InRateEval, bool InStandBy, bool InGuest);
	bool IsEnemyGroupeAllOddEffectByStatus(const struct FName& InStatusId, bool InAliveOnly, bool InStandBy);
	bool IsEnemyGroupeAllOddEffect(EJackOddEffectCategoryType InCategoryType, bool InAliveOnly, bool InStandBy);
	bool IsEnemyGroupeAllMpRate(float InMpRate, EJackEvaluateType InMpEval, bool InStandBy);
	bool IsEnemyGroupeAllHpRate(float InHpRate, EJackEvaluateType InHpEval, bool InStandBy);
	bool IsCasterOddEffectByStatus(const struct FName& InStatusId);
	bool IsCasterOddEffect(EJackOddEffectCategoryType InCategoryType);
	bool IsCasterMpRate(float InMpRate, EJackEvaluateType InMpEval);
	bool IsCasterMp(int InMP, EJackEvaluateType InMpEval);
	bool IsCasterLevelCheckOfEnemyGroup(int InValue, EJackEvaluateType InValueEval, bool InAliveOnly, bool InStandBy);
	bool IsCasterHpRate(float InHpRate, EJackEvaluateType InHpEval);
	bool IsCasterHp(int InHp, EJackEvaluateType InHpEval);
	TArray<class UJackGameCharacter*> STATIC_GetTargetCharacters(class UJackGameCharacter* InCasterGameCharacter, class UJackGameCharacter* InTargetGameCharacter, struct FJackActionData* InActionData);
	TArray<class UJackGameCharacter*> STATIC_GetFriendCharactersByBattleAI(class UJackGameCharacter* CasterGameCharacter, bool bAliveOnly);
	TArray<class UJackGameCharacter*> STATIC_GetFriendCharacters(class UJackGameCharacter* InCasterGameCharacter, bool InAliveOnly, bool InStandBy, bool InGuest, bool InMiryou, bool InAsutoron, bool InFuzai);
	TArray<class UJackGameCharacter*> STATIC_GetEnemyCharacters(class UJackGameCharacter* InCasterGameCharacter, bool InAliveOnly, bool InStandBy, bool InGuest, bool InMiryou);
	EJackActionExtentType GetActionExtent();
};


// Class JackGame.JackActionMessageInfo
// 0x0070 (0x00A8 - 0x0038)
class UJackActionMessageInfo : public UObject
{
public:
	struct FJackActionBattleTextInfo                   BattleTextInfo;                                           // 0x0038(0x0010) (Edit, EditConst)
	struct FName                                       TextID;                                                   // 0x0048(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FString                                     Message;                                                  // 0x0050(0x0010) (Edit, ZeroConstructor, EditConst)
	struct FJackActionMessageArg                       MessageArg;                                               // 0x0060(0x0020) (Edit, EditConst)
	bool                                               bWait;                                                    // 0x0080(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FJackActionMessageCompactInfo               CompactInfo;                                              // 0x0088(0x0020) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionMessageInfo");
		return ptr;
	}

};


// Class JackGame.JackActionWaitChecker
// 0x0010 (0x0060 - 0x0050)
class UJackActionWaitChecker : public UJackTickableGameObject
{
public:
	bool                                               bInitialized;                                             // 0x0050(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	EJackActionWaitType                                ActionWaitType;                                           // 0x0051(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	float                                              ActionWaitTime;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              CurrentActionWaitTime;                                    // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bNotifyReceived;                                          // 0x005C(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionWaitChecker");
		return ptr;
	}

};


// Class JackGame.JackActionTypes
// 0x0000 (0x0038 - 0x0038)
class UJackActionTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionTypes");
		return ptr;
	}

};


// Class JackGame.JackActorComponentUserData
// 0x0000 (0x0038 - 0x0038)
class UJackActorComponentUserData : public UActorComponentUserData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorComponentUserData");
		return ptr;
	}

};


// Class JackGame.JackToggleBaseTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackToggleBaseTrack : public UInterpTrack
{
public:
	TArray<struct FJackToggleBaseTrackKey>             ToggleBaseTrack;                                          // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bAvailableWhenForwards : 1;                               // 0x00A0(0x0001) (Edit)
	unsigned char                                      bAvailableWhenBackwards : 1;                              // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackToggleBaseTrack");
		return ptr;
	}

};


// Class JackGame.JackActorInRoomTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackActorInRoomTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorInRoomTrack");
		return ptr;
	}

};


// Class JackGame.JackToggleBaseTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackToggleBaseTrackInst : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackToggleBaseTrackInst");
		return ptr;
	}

};


// Class JackGame.JackActorInRoomTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackActorInRoomTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorInRoomTrackInst");
		return ptr;
	}

};


// Class JackGame.JackActorPauseTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackActorPauseTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorPauseTrack");
		return ptr;
	}

};


// Class JackGame.JackActorPauseTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackActorPauseTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorPauseTrackInst");
		return ptr;
	}

};


// Class JackGame.JackActorPhysicsSuppressionTrack
// 0x0010 (0x00C0 - 0x00B0)
class UJackActorPhysicsSuppressionTrack : public UInterpTrackFloatBase
{
public:
	float                                              SuppressionMultiplyFactor;                                // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SuppressionSec;                                           // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttenuationSec;                                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorPhysicsSuppressionTrack");
		return ptr;
	}

};


// Class JackGame.JackActorPhysicsSuppressionTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackActorPhysicsSuppressionTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActorPhysicsSuppressionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAdditiveAnimPlayTrack
// 0x0000 (0x00D0 - 0x00D0)
class UJackAdditiveAnimPlayTrack : public UInterpTrackAnimControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAdditiveAnimPlayTrack");
		return ptr;
	}

};


// Class JackGame.JackAdditiveAnimPlayTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackAdditiveAnimPlayTrackInst : public UInterpTrackInstAnimControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAdditiveAnimPlayTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAdditivePlayRateTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackAdditivePlayRateTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAdditivePlayRateTrack");
		return ptr;
	}

};


// Class JackGame.JackAdjustRotateByMoveTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackAdjustRotateByMoveTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAdjustRotateByMoveTrack");
		return ptr;
	}

};


// Class JackGame.JackAIController
// 0x00F0 (0x0580 - 0x0490)
class AJackAIController : public AAIController
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0490(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAIController");
		return ptr;
	}


	class AJackCharacter* GetJackCharacter();
};


// Class JackGame.JackCharacterComponent
// 0x0078 (0x01A0 - 0x0128)
class UJackCharacterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0128(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterComponent");
		return ptr;
	}

};


// Class JackGame.JackAirBubbleComponent
// 0x0120 (0x02C0 - 0x01A0)
class UJackAirBubbleComponent : public UJackCharacterComponent
{
public:
	struct FJackAirBubbleAsset                         AirBubbleAssets[0x3];                                     // 0x01A0(0x0010) (Edit, IsPlainOldData)
	struct FName                                       SpawnTargetSocketName;                                    // 0x01D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAttachAirBubbleToSocket;                                 // 0x01D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoActivateAirBubble;                                   // 0x01D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE6];                                      // 0x01DA(0x00E6) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAirBubbleComponent");
		return ptr;
	}


	void SpawnAirBubble(TEnumAsByte<EJackAirBubble> Size);
	void SetAirBubbleHiddenInGame(TEnumAsByte<EJackAirBubbleControlPurpose> Purpose, bool bHidden);
	void SetAirBubbleActivity(TEnumAsByte<EJackAirBubbleControlPurpose> Purpose, TEnumAsByte<EJackAirBubbleActivity> Activity);
};


// Class JackGame.JackAmbientOcclusionRadiusSkinTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackAmbientOcclusionRadiusSkinTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAmbientOcclusionRadiusSkinTrack");
		return ptr;
	}

};


// Class JackGame.JackAmbientOcclusionRadiusSkinTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackAmbientOcclusionRadiusSkinTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAmbientOcclusionRadiusSkinTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCharacter
// 0x0940 (0x10F0 - 0x07B0)
class AJackCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x07B0(0x0020) MISSED OFFSET
	bool                                               bPenetrationAdjustmentConstrainPrevWalkableFloor;         // 0x07D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x07D1(0x0007) MISSED OFFSET
	struct FName                                       AutoNavigationAnimMontageName;                            // 0x07D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x90];                                      // 0x07E0(0x0090) MISSED OFFSET
	TArray<class UObject*>                             CoordinateDependencyObjects;                              // 0x0870(0x0010) (ZeroConstructor, Transient)
	float                                              NavAgentLocationOffsetHeight;                             // 0x0880(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCompleteAnimNodeBlendOnStabilizePose;                    // 0x0884(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSkipSnapToGroundOnTeleport;                              // 0x0885(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0886(0x0002) MISSED OFFSET
	float                                              PathArrivalRadius;                                        // 0x0888(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x088C(0x0004) MISSED OFFSET
	class UAnimMontage*                                AnimMontageTurnLeft;                                      // 0x0890(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                AnimMontageTurnBackLeft;                                  // 0x0898(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                AnimMontageTurnRight;                                     // 0x08A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                AnimMontageTurnBackRight;                                 // 0x08A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsNpcEscape;                                             // 0x08B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x08B1(0x0003) MISSED OFFSET
	float                                              SpeedOfNpcEscapeStart;                                    // 0x08B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceOfNpcEscapeStart;                                 // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDontApplyCoordinate;                                     // 0x08BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x08BD(0x0003) MISSED OFFSET
	struct FJackLDT_Coordinate                         CoordinateID;                                             // 0x08C0(0x0010) (Edit)
	float                                              CoordinateMeshesCachedMaxDrawDistance;                    // 0x08D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x114];                                     // 0x08D4(0x0114) MISSED OFFSET
	class UJackTimeComponent*                          TimeComponent;                                            // 0x09E8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackMatineeControlComponent*                MatineeControlComponent;                                  // 0x09F0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackReservedEffectComponent*                ReservedEffectComponent;                                  // 0x09F8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackVehicleRiderComponent*                  VehicleRiderComponent;                                    // 0x0A00(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackTalkComponent*                          TalkComponent;                                            // 0x0A08(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackAnimNotifyComponent*                    AnimNotifyComponent;                                      // 0x0A10(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackMaterialCoordinatorComponent*           MaterialCoordinatorComponent;                             // 0x0A18(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackInteractiveActorComponent*              CachedInteractiveActorComponent;                          // 0x0A20(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackInteractorComponent*                    CachedInteractorComponent;                                // 0x0A28(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackRigidBodyComponent*                     CachedRigidBodyComponent;                                 // 0x0A30(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackLookAtComponent*                        CachedLookAtComponent;                                    // 0x0A38(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackEyeLookAtComponent*                     CachedEyeLookAtComponent;                                 // 0x0A40(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackFootIKComponent*                        CachedFootIKComponent;                                    // 0x0A48(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackFacialControlComponent*                 CachedFacialControlComponent;                             // 0x0A50(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackLoadReductionComponent*                 CachedLoadReductionComponent;                             // 0x0A58(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackPropsComponent*                         CachedPropsComponent;                                     // 0x0A60(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackArmIKComponent*                         CachedArmIKComponent;                                     // 0x0A68(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackGroundAffectComponent*                  CachedGroundAffectComponent;                              // 0x0A70(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UJackBattleAIComponent*                      CachedBattleAIComponent;                                  // 0x0A78(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0x10];                                      // 0x0A80(0x0010) MISSED OFFSET
	TWeakObjectPtr<class UJackGameCharacter>           GameCharacter;                                            // 0x0A90(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1A];                                      // 0x0A98(0x001A) MISSED OFFSET
	bool                                               bInRoom;                                                  // 0x0AB2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x7D];                                      // 0x0AB3(0x007D) MISSED OFFSET
	bool                                               bIsInBattle;                                              // 0x0B30(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRotateToDamagedDirection;                                // 0x0B31(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0xE];                                       // 0x0B32(0x000E) MISSED OFFSET
	TWeakObjectPtr<class AJackCharacter>               LockOnTargetCharacter;                                    // 0x0B40(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bLockOnTroop;                                             // 0x0B48(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0B49(0x0003) MISSED OFFSET
	struct FVector                                     LockOnLocation;                                           // 0x0B4C(0x000C) (Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x10];                                      // 0x0B58(0x0010) MISSED OFFSET
	struct FName                                       AimAttackSocketName;                                      // 0x0B68(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0B70(0x0008) MISSED OFFSET
	class UJackRotationControl*                        RotationControl;                                          // 0x0B78(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData15[0x88];                                      // 0x0B80(0x0088) MISSED OFFSET
	TArray<struct FJackParticleDict>                   Particles;                                                // 0x0C08(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackSoundDict>                      Sounds;                                                   // 0x0C18(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackProjectileClassDict>            ProjectileClasses;                                        // 0x0C28(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackWeaponClassDict>                WeaponClasses;                                            // 0x0C38(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackPropClassDict>                  PropClasses;                                              // 0x0C48(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackCameraAnimDict>                 CameraAnims;                                              // 0x0C58(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackCameraShakeDict>                CameraShakes;                                             // 0x0C68(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackForceFeedbackDict>              ForceFeedbacks;                                           // 0x0C78(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackCurveDict>                      Curves;                                                   // 0x0C88(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackMaterialParameterCollectionDict> MaterialParameterCollections;                             // 0x0C98(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackCollideEffectDict>              CollideEffects;                                           // 0x0CA8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackStaticMeshDict>                 StaticMeshes;                                             // 0x0CB8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackSkeletalMeshDict>               SkeletalMeshes;                                           // 0x0CC8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackMaterialDict>                   Materials;                                                // 0x0CD8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackTextureDict>                    Textures;                                                 // 0x0CE8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	struct FJackCharacterFootstepEffectContainer       FootstepEffectsContainer;                                 // 0x0CF8(0x0010) (Transient)
	struct FJackCharacterDamageEffectContainer         DamageEffectsContainer;                                   // 0x0D08(0x0010) (Transient)
	struct FJackCharacterCoordEffectContainer          CoordSoundsContainer;                                     // 0x0D18(0x0010) (Transient)
	unsigned char                                      UnknownData16[0x38];                                      // 0x0D28(0x0038) MISSED OFFSET
	class UJackStreamObjectsHolder*                    DeferredLoadAssetsHolder;                                 // 0x0D60(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UTexture*>                            DeferredStreamingTextures;                                // 0x0D68(0x0010) (ZeroConstructor, Transient)
	bool                                               bWaitForFixupLooksUntilBecomeHighResolutionTextures;      // 0x0D78(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x37];                                      // 0x0D79(0x0037) MISSED OFFSET
	float                                              InjuryMinRate;                                            // 0x0DB0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InjuryMaxRate;                                            // 0x0DB4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UClass*>                              IgnoredAnimNotifyClasses;                                 // 0x0DB8(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	bool                                               bMeshReceivesDecals;                                      // 0x0DC8(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMeshPostProcessEdge;                                     // 0x0DC9(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x12E];                                     // 0x0DCA(0x012E) MISSED OFFSET
	bool                                               bTeleportResetClothAndPhysics;                            // 0x0EF8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0EF9(0x0003) MISSED OFFSET
	float                                              DelayEnabledTeleportClothAndPhysics;                      // 0x0EFC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0F00(0x0008) MISSED OFFSET
	TArray<struct FName>                               SimulatePhysicsBoneNames;                                 // 0x0F08(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       DefaultLookedAtSocketName;                                // 0x0F18(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x68];                                      // 0x0F20(0x0068) MISSED OFFSET
	TMap<class UAnimSequenceBase*, struct FJackAnimCancelFrameInfo> CancelFrameInfos;                                         // 0x0F88(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData22[0x4];                                       // 0x0FD8(0x0004) MISSED OFFSET
	TEnumAsByte<ERootMotionMode>                       BattleRootMotionMode;                                     // 0x0FDC(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0xD3];                                      // 0x0FDD(0x00D3) MISSED OFFSET
	bool                                               bMustBeAbleToCloseupWithCamera;                           // 0x10B0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bDontCloseupWithCamera;                                   // 0x10B1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisplayDebugInfoEnabled;                                 // 0x10B2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bShowAttackCollision;                                     // 0x10B3(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bShowClothCollisions;                                     // 0x10B4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x2B];                                      // 0x10B5(0x002B) MISSED OFFSET
	class USQEXSEADAutoSeComponent*                    AutoSeComponent;                                          // 0x10E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData25[0x8];                                       // 0x10E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacter");
		return ptr;
	}


	bool TeleportNoCollisionCheck(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	void StopAllMontageImmediately();
	void StartBPControl();
	void StabilizePose(bool bRequireResetDynamics);
	bool SnapToGroundLocationWithRotation(const struct FVector& Location, const struct FRotator& Rotation, float SearchDistance);
	bool SnapToGround(TEnumAsByte<EJackCharacterCollisionResponse> CollisionResponseType);
	void SkipUpdateAnimation(float DeltaSeconds, bool bCallNotify);
	void SimpleAutoNavigationToWithSpeed(const struct FVector& InLocation, const struct FRotator& InRotation, float InSpeed);
	void SimpleAutoNavigationTo(const struct FVector& InLocation, const struct FRotator& InRotation, float InSeconds, float InRotationSeconds);
	void SetRootMotionMode(TEnumAsByte<ERootMotionMode> Mode, bool bConsumeRootMotion);
	void SetPause(TEnumAsByte<EJackCharacterPausePurpose> Purpose, bool bPause);
	void SetOverrideLODInfo(TEnumAsByte<EJackCharacterCoordinateLODInfo> Type);
	void SetMovementEnabled(bool bEnabled, TEnumAsByte<EJackCharacterControlChannel> InChannel);
	void SetMeshReceivesDecals(bool bInReceivesDecals);
	void SetMeshPostProcessEdge(bool bInPostProcessEdge);
	void SetLookAtTargetUpdateMoveOnly(bool bFlag);
	void SetLookAtSingleNode(bool bFlag, bool bRateToZeroIfNotLookAt);
	void SetLookAtMobileRegion(float PitchUp, float PitchDown, float YawLeft, float YawRight);
	void SetJumpDisabled(bool bDisabled, TEnumAsByte<EJackCharacterControlChannel> InChannel);
	void SetInRoom(bool bNewInRoom);
	void SetInBattleForBunsin();
	void SetIgnoreLookAt(TEnumAsByte<EJackCharacterLookAtPurpose> Purpose, bool bIgnore);
	void SetHiddenControl(TEnumAsByte<EJackCharacterHiddenPurpose> Purpose, bool bNewHidden, bool bPreventCapsuleControl);
	void SetDitherHiddenActor(TEnumAsByte<EJackCharacterHiddenPurpose> InPurpose, bool bNewHidden, class UCurveBase* Curve, float InRequiredSeconds, bool bIsParticleActiveChangeDisable);
	void SetCollisionEnabledToBattlePawn(bool bEnabled);
	void SetCharacterCoordinate(const struct FName& InCoordinateID, TEnumAsByte<EJackCharacterCoordinateLayer> InCoordinateLayer, TEnumAsByte<EJackCharacterCoordinateLoader> LoaderType);
	void SetAutonomicMovementDisabled(bool bDisabled, TEnumAsByte<EJackCharacterControlChannel> InChannel);
	void SetAutoLookAtEnbaled(bool bEnabled);
	void SetAnimDynamicsIdlingCount(int IdlingCount, bool bRequireResetDynamics);
	void SetActorIgnoreCollision(TEnumAsByte<EJackCharacterIgnoreCollisionPurpose> Purpose, bool bNewActorIgnoreCollision);
	void SetActorBlockCollisonToOverlap(TEnumAsByte<EJackCharacterIgnoreCollisionPurpose> Purpose, bool bNewActorForceOverlapCollision);
	void ResetCancelFrameControlCount();
	float PlayAnimMontageByKeyBP(const struct FName& AnimMontageKey, float InPlayRate, const struct FName& StartSectionName);
	void OnTeleported(bool bSucceeded);
	void OnPlayAnimMontageByKeyDelegate__DelegateSignature(const struct FName& AnimMontageKey, class UAnimMontage* AnimMontage);
	void OnFixupLooks();
	void OnCharacterCoordinateChanged();
	void OnBattleStartDelegate__DelegateSignature();
	void OnBattleEndDelegate__DelegateSignature();
	void LookAtLocation(const struct FVector& Location);
	void LookAtEnd();
	void LookAtCharacter(class AJackCharacter* Character, const struct FName& Socket);
	void Latent_TurnToLocation(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FVector& Gaze, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void Latent_TurnToAngle(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float Angle, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void Latent_TurnToActor(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class AActor* Gaze, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void Latent_SimpleNavigationTo(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FVector& GoalLocation, const struct FRotator& GoalRotation, float Speed, float RotationSpeed, class UAnimMontage* AnimMontage);
	void Latent_MoveToLocation(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FVector& Goal, float Speed, class UAnimMontage* AnimMontage);
	void Latent_MoveToActor(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class AActor* Goal, float Speed, class UAnimMontage* AnimMontage);
	void Latent_Animation(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class UAnimMontage* AnimMontage, int Minute, bool bWait);
	bool IsRecentlyRendered();
	bool IsOpenWeapon();
	bool IsInTheAir();
	bool IsInRoom();
	bool IsHiddenControl(TEnumAsByte<EJackCharacterHiddenPurpose> Purpose);
	bool IsFloating();
	bool IsEquippedBothHands();
	bool IsDitherRunning();
	bool IsDitherHiddenAllPurpose();
	bool IsDitherHidden(TEnumAsByte<EJackCharacterHiddenPurpose> InPurpose);
	bool IsDefending();
	bool IsDeclarationToUseMatinee();
	bool IsDead();
	bool IsBPControl();
	float GetTurningAnimationPlayRate();
	class AJackBattleSnowman* GetSnowmanActor();
	struct FRotator GetRotationToDesired();
	TArray<class USkeletalMeshComponent*> GetOutlineSkeletalMeshComponents();
	float GetMovementSpeedRate();
	float GetMovementAnimationPlayRate();
	struct FVector GetLookAtInterpLocation();
	class UJackLookAtComponent* GetLookAtComponent();
	float GetLookAtApplySecondNodeRate();
	float GetLookAtApplyRate();
	class UJackWeatherAffectComponent* GetJackWeatherAffectComponent();
	class UJackPropsComponent* GetJackPropsComponent();
	class UJackInteractorComponent* GetJackInteractorComponent();
	class UJackInteractiveActorComponent* GetJackInteractiveActorComponent();
	class UJackFootIKComponent* GetJackFootIKComponent();
	class UJackEquipmentControlComponent* GetJackEquipmentControlComponent();
	class UJackArmIKComponent* GetJackArmIKComponent();
	TEnumAsByte<EJackEquippedWeaponStyle> GetEquippedWeaponStyle();
	struct FVector GetDesiredMovementLocalDirection();
	class USkinnedMeshComponent* GetCoordinatePartsMeshComponent(TEnumAsByte<EJackCharacterCoordinateParts> PartsType);
	class AJackCharacter* GetCoffinActor();
	struct FName GetCharacterCoordinate();
	class AJackBattleCommandAI* GetBattleCommandAI();
	class UJackBattleAIComponent* GetBattleAIComponent();
	void GetBattleABPInfo(float InMovementRate, float* OutMovementRate, float* OutMovementRootMotionTranslationRate, TEnumAsByte<EJackEquippedWeaponStyle>* OutWeaponStyle, bool* OutWeaponEquipChange, bool* OutWeaponEquipChangeFlip, float* OutInjuryRate, bool* OutIsInBattle, bool* OutIsDefending, bool* OutIsEquippedBothHands);
	struct FName GetAutoNavigationAnimMontageName();
	float GetAdditiveAnimationRate();
	void GetActorBoundsWithoutMesh(struct FVector* OutOrigin, struct FVector* OutBoxExtent);
	void ForceFullRecover();
	void FixupLooks();
	class UClass* FindWeaponClassChecked(const struct FName& InName);
	class UClass* FindWeaponClass(const struct FName& InName, bool bWarnIfMissing);
	class UTexture* FindTextureChecked(const struct FName& InName);
	class UTexture* FindTexture(const struct FName& InName, bool bWarnIfMissing);
	class UStaticMesh* FindStaticMeshChecked(const struct FName& InName);
	class UStaticMesh* FindStaticMesh(const struct FName& InName, bool bWarnIfMissing);
	class USoundBase* FindSoundChecked(const struct FName& InName);
	class USoundBase* FindSound(const struct FName& InName, bool bWarnIfMissing);
	class USkeletalMesh* FindSkeletalMeshChecked(const struct FName& InName);
	class USkeletalMesh* FindSkeletalMesh(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindProjectileClassChecked(const struct FName& InName);
	class UClass* FindProjectileClass(const struct FName& InName, bool bWarnIfMissing);
	class UParticleSystem* FindParticleChecked(const struct FName& InName);
	class UParticleSystem* FindParticle(const struct FName& InName, bool bWarnIfMissing);
	class UActorComponent* FindOrAddComponentByClass(class UClass* ComponentClass);
	class UMaterialParameterCollection* FindMaterialParameterCollectionChecked(const struct FName& InName);
	class UMaterialParameterCollection* FindMaterialParameterCollection(const struct FName& InName, bool bWarnIfMissing);
	class UMaterialInterface* FindMaterialChecked(const struct FName& InName);
	class UMaterialInterface* FindMaterial(const struct FName& InName, bool bWarnIfMissing);
	class UForceFeedbackEffect* FindForceFeedbackChecked(const struct FName& InName);
	class UForceFeedbackEffect* FindForceFeedback(const struct FName& InName, bool bWarnIfMissing);
	class UCurveBase* FindCurveChecked(const struct FName& InName);
	class UCurveBase* FindCurve(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindCollideEffectChecked(const struct FName& InName);
	class UClass* FindCollideEffect(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindCameraShakeChecked(const struct FName& InName);
	class UClass* FindCameraShake(const struct FName& InName, bool bWarnIfMissing);
	class UCameraAnim* FindCameraAnimChecked(const struct FName& InName);
	class UCameraAnim* FindCameraAnim(const struct FName& InName, bool bWarnIfMissing);
	class AJackBattleCommandAI* FindBattleCommandAI(class UClass* TargetClass);
	struct FName FindAnimMontageWeaponStyleName(const struct FName& InName);
	class UAnimMontage* FindAnimMontageWeaponStyleChecked(const struct FName& InName);
	class UAnimMontage* FindAnimMontageWeaponStyle(const struct FName& InName, bool bWarnIfMissing);
	class UAnimMontage* FindAnimMontageChecked(const struct FName& InName);
	class UAnimMontage* FindAnimMontage(const struct FName& InName, bool bWarnIfMissing);
	void EndBPControl();
	void EnableClothAndPhysics();
	void DisableClothAndPhysics();
	void CompleteLookAtInterp();
	void AsyncFixupLooks();
	void AbortLatentAction();
};


// Class JackGame.JackAnimalCharacter
// 0x0010 (0x1100 - 0x10F0)
class AJackAnimalCharacter : public AJackCharacter
{
public:
	TEnumAsByte<EJackAnimal>                           AnimalType;                                               // 0x10F0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x10F1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimalCharacter");
		return ptr;
	}

};


// Class JackGame.JackAnimControlTrack
// 0x0018 (0x00E8 - 0x00D0)
class UJackAnimControlTrack : public UInterpTrackAnimControl
{
public:
	TArray<struct FJackAnimControlTrackKey>            AnimExtraKey;                                             // 0x00D0(0x0010) (ZeroConstructor)
	float                                              DefaultInterpSec;                                         // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimControlTrack");
		return ptr;
	}

};


// Class JackGame.JackAnimControlTrackInst
// 0x0010 (0x0050 - 0x0040)
class UJackAnimControlTrackInst : public UInterpTrackInstAnimControl
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimControlTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAnimDynamicsCharacter
// 0x0000 (0x10F0 - 0x10F0)
class AJackAnimDynamicsCharacter : public AJackCharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimDynamicsCharacter");
		return ptr;
	}

};


// Class JackGame.JackAnimDynamicsMoveForceTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackAnimDynamicsMoveForceTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimDynamicsMoveForceTrack");
		return ptr;
	}

};


// Class JackGame.JackAnimDynamicsMoveForceTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackAnimDynamicsMoveForceTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimDynamicsMoveForceTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAnimExpressionBlendRateTrack
// 0x0018 (0x00C8 - 0x00B0)
class UJackAnimExpressionBlendRateTrack : public UInterpTrackFloatBase
{
public:
	TArray<struct FJackLDT_Coordinate>                 ApplyCoordinates;                                         // 0x00B0(0x0010) (Edit, ZeroConstructor)
	bool                                               bUpperBody;                                               // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerBody;                                               // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBodyExtra;                                               // 0x00C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHair;                                                    // 0x00C3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHairExtra;                                               // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bMantle;                                                  // 0x00C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOther;                                                   // 0x00C6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00C7(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimExpressionBlendRateTrack");
		return ptr;
	}

};


// Class JackGame.JackAnimExpressionBlendRateTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackAnimExpressionBlendRateTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimExpressionBlendRateTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAnimInstance
// 0x07A0 (0x0BE0 - 0x0440)
class UJackAnimInstance : public UAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0440(0x0038) MISSED OFFSET
	class UDataTable*                                  AnimMontagesTable;                                        // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  DynamicAnimMontagesTable;                                 // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  AdditiveAnimMontagesTable;                                // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackAnimMontageDict>                AnimMontages;                                             // 0x0490(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x50];                                      // 0x04A0(0x0050) UNKNOWN PROPERTY: SetProperty JackGame.JackAnimInstance.WeaponStyleAnimMontageTables
	TMap<struct FName, struct FJackDataTableAnimMontage> DynamicAnimMontagesCache;                                 // 0x04F0(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0540(0x0001) MISSED OFFSET
	bool                                               bCacheTurningState;                                       // 0x0541(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x56];                                      // 0x0542(0x0056) MISSED OFFSET
	TArray<class UClass*>                              IgnoredAnimNotifyClasses;                                 // 0x0598(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x1A0];                                     // 0x05A8(0x01A0) MISSED OFFSET
	class UAnimSequence*                               FacePoseAnimation;                                        // 0x0748(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               AdditionalFacePoseAnimation;                              // 0x0750(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               CutSceneFacePoseAnimation;                                // 0x0758(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               CutSceneAdditionalFacePoseAnimation;                      // 0x0760(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJackUpdatingDynamicsCondition              DynamicsUpdateFlags;                                      // 0x0768(0x000A) (Edit, DisableEditOnInstance)
	bool                                               bHasAnimDynamics;                                         // 0x0772(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0773(0x0001) MISSED OFFSET
	TWeakObjectPtr<class UJackArmIKComponent>          CachedArmIKComponent;                                     // 0x0774(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData06[0xAC];                                      // 0x077C(0x00AC) MISSED OFFSET
	struct FJackAnimExp_DynamicBoneCacheState          DynamicsCalcCache;                                        // 0x0828(0x00B8) (Edit, BlueprintVisi, BlueprintReadOnly, EditConst)
	unsigned char                                      UnknownData07[0xAC];                                      // 0x08E0(0x00AC) MISSED OFFSET
	float                                              Frame_FA_Up_Blink;                                        // 0x098C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Mouth_Adjust_Up;                             // 0x0990(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Mouth_Adjust_Down;                           // 0x0994(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Mouth_Shout;                                 // 0x0998(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Up_Default;                                      // 0x099C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Default;                                     // 0x09A0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Mouth_A;                                     // 0x09A4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Mouth_I;                                     // 0x09A8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Low_Mouth_U;                                     // 0x09AC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Up_Eye_Horizontal_Right;                         // 0x09B0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Up_Eye_Horizontal_Left;                          // 0x09B4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Up_Eye_Vertical_Up;                              // 0x09B8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Frame_FA_Up_Eye_Vertical_Down;                            // 0x09BC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUpperFacialAnimStateNone;                              // 0x09C0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x09C1(0x0003) MISSED OFFSET
	float                                              LeftEyeBlinkPoseWeight;                                   // 0x09C4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RightEyeBlinkPoseWeight;                                  // 0x09C8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BlinkPoseEyeOffset;                                       // 0x09CC(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              EyeCloseRate;                                             // 0x09D8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLowerFacialAnimStateNone;                              // 0x09DC(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x09DD(0x0003) MISSED OFFSET
	float                                              Emotion;                                                  // 0x09E0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AbsEmotion;                                               // 0x09E4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPositiveEmotion;                                         // 0x09E8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x09E9(0x0003) MISSED OFFSET
	float                                              Tone;                                                     // 0x09EC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LipSyncBlendWeight;                                       // 0x09F0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomLipSyncRunning;                                    // 0x09F4(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackVowel                                         LastPhraseVowel;                                          // 0x09F5(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x09F6(0x0002) MISSED OFFSET
	float                                              LipSyncBlendTime;                                         // 0x09F8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VowelSecondNoteBlendWeight;                               // 0x09FC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ManualLipSyncModeBlendWeight;                             // 0x0A00(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFacialControlEnabled;                                    // 0x0A04(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHumanFace;                                               // 0x0A05(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanLipSync;                                              // 0x0A06(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x0A07(0x0001) MISSED OFFSET
	float                                              LeftArmFabrikAlpha;                                       // 0x0A08(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0A0C(0x0004) MISSED OFFSET
	struct FTransform                                  LeftArmFabrikEffectorTransform;                           // 0x0A10(0x0030) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              RightArmFabrikAlpha;                                      // 0x0A40(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0xC];                                       // 0x0A44(0x000C) MISSED OFFSET
	struct FTransform                                  RightArmFabrikEffectorTransform;                          // 0x0A50(0x0030) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	bool                                               bArmIKEnabled;                                            // 0x0A80(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHumanArm;                                                // 0x0A81(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bFootIKEnabled;                                           // 0x0A82(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLookAtEnabled;                                           // 0x0A83(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LookAtInterpLocation;                                     // 0x0A84(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FJackLookAtNodeParam                        LookAtNodeParam_Spine1;                                   // 0x0A90(0x0028) (BlueprintVisi, BlueprintReadOnly)
	struct FJackLookAtNodeParam                        LookAtNodeParam_Spine2;                                   // 0x0AB8(0x0028) (BlueprintVisi, BlueprintReadOnly)
	struct FJackLookAtNodeParam                        LookAtNodeParam_Neck;                                     // 0x0AE0(0x0028) (BlueprintVisi, BlueprintReadOnly)
	struct FJackLookAtNodeParam                        LookAtNodeParam_Head;                                     // 0x0B08(0x0028) (BlueprintVisi, BlueprintReadOnly)
	bool                                               bHumanLookAtBones;                                        // 0x0B30(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x0B31(0x0003) MISSED OFFSET
	float                                              EyeLookAtWeight;                                          // 0x0B34(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EyeHorizontalAnimationFrame;                              // 0x0B38(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AbsEyeHorizontalWeight;                                   // 0x0B3C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EyeVerticalAnimationFrame;                                // 0x0B40(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AbsEyeVerticalWeight;                                     // 0x0B44(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FA_Up_Eye_Vertical_Value;                                 // 0x0B48(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FA_Up_Eye_Vertical_AbsValue;                              // 0x0B4C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPositive_FA_Up_Eye_Vertical;                             // 0x0B50(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0B51(0x0003) MISSED OFFSET
	float                                              FA_Up_Eye_Horizontal_Value;                               // 0x0B54(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FA_Up_Eye_Horizontal_AbsValue;                            // 0x0B58(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPositive_FA_Up_Eye_Horizontal;                           // 0x0B5C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHumanEyeLookAtBones;                                     // 0x0B5D(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x2];                                       // 0x0B5E(0x0002) MISSED OFFSET
	float                                              EyeLookAtWeightBlendTime;                                 // 0x0B60(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EyeLookAtWeightBlendInterpExp;                            // 0x0B64(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x78];                                      // 0x0B68(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimInstance");
		return ptr;
	}


	void UpdateDynamicBoneBlendWeight();
	class UJackVehicleAnimInstance* TryGetJackVehicleAnimInstance();
	class AJackPlayableCharacter* TryGetJackPlayableCharacter();
	class AJackCharacter* TryGetJackCharacter();
	bool TriggerEventInABP(const struct FName& EventName);
	void SyncVehicleABPParameter();
	void SetUseSotredComponentSpacePoses(bool bUseSoredPose);
	void SetSkipWindEffectProcedure(bool bSkip);
	void SetIgnoreUseControllerDesiredRotation(bool bIgnoreUseControllerDesiredRotation);
	void SetForceNextAnimMontageBlendTime(float InForceBlendTime);
	void SetDebugDrawWind(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawFakeInertia(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawDynamicsSphericalLimits(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawDynamicsPlanarLimits(const struct FName& TargetSettingBoneName, int PlanarIndex, bool bEnable);
	void SetDebugDrawDynamicsEnable(bool bEnable);
	void SetDebugDrawDynamicsBoxExtents(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawDynamicsBonesSRT(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawDynamicsBonesName(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawDynamicsBonesAxis(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawDynamicsAngularConstraint(const struct FName& TargetSettingBoneName, bool bEnable);
	void SetDebugDrawBlendSpaceEvaluator(bool bEnable);
	void SetCollisionIgnoreInPhysicsAsset(const struct FName& BoneName, bool bIgnore);
	void SetActorIgnoreCollision(TEnumAsByte<EJackCharacterIgnoreCollisionPurpose> Purpose, bool bNewActorIgnoreCollision);
	void OnSetExtraNPCCapsule(bool bEnable);
	void OnReplaceNPCTalkEndAnimation(class UAnimMontage* AnimMontage, bool bForceSkipAnimation);
	void OnNPCInterruptControl(class UAnimSequenceBase* AnimBase, const struct FName& RowName);
	void OnMeshVisibility(const struct FName& ComponentName, bool bVisibility);
	void OnLookAtModeSwitch(bool bSingle);
	void OnFootIKControl(bool bEnable);
	void OnFootIKAdvancedControl(bool bEnable, bool bAdjustMeshHeightEnable, bool bAdjustMeshHeightZero);
	void OnDetachObject();
	void OnCollisionSwitch(bool bEnable);
	void OnAttachObject();
	void OnAnimationRewind(class UAnimSequence* Sequence);
	void OnAnimationEnd(class UAnimSequence* Sequence);
	bool IsValidAnimExpressionBone(const struct FName& TargetSettingBoneName);
	bool IsValidAnimDynamicsBone(const struct FName& TargetSettingBoneName);
	bool IsTurningRight();
	bool IsTurningLeft();
	bool IsTurning();
	bool IsSkipAnimDynamics();
	bool IsMatineeControlled();
	bool IsLookAtEnabled();
	bool IsInTheAir();
	bool IsFootIKEnabled();
	bool IsFacialControlEnabled();
	bool IsCompatibleAnimSequence(class UAnimSequence* InAnimSequence);
	bool IsCompatibleAnimMontage(class UAnimMontage* InAnimMontage);
	bool IsClosedEyesByBlink();
	bool IsCancelFrameControl();
	void InitializeAnimDynamicsState();
	void HideBone(const struct FName& BoneName, bool bHide, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	float GetVehicleParameterFloat(TEnumAsByte<EJackVehicleParameterFloat> ID);
	bool GetVehicleParameterFlags(TEnumAsByte<EJackVehicleParameterStateMachineFlags> ID);
	bool GetVehicleParameterBool(TEnumAsByte<EJackVehicleParameterBool> ID);
	bool GetUseSotredComponentSpacePoses();
	void GetScheduledNPCParameterSpeedOnly(float* OutBlendSpaceSpeed);
	void GetScheduledNPCParameter(float* OutBlendSpaceRate1, float* OutBlendSpaceRate2, float* OutBlendSpaceRate3, float* OutBlendSpaceSpeed, float* OutAdditiveAnimationRate);
	class UJackRigidBodyComponent* GetRigidBodyComponent();
	TEnumAsByte<EJackVehicle> GetRideVehicleId();
	float GetMatineeNodAnimationApplyRate();
	float GetMatineeMovementBlendSpeedRate();
	class UBlendSpaceBase* GetMatineeMovementBlendSpace();
	float GetMatineeMovementBlendApplyRate();
	float GetMatineeCaptionBlendAnimationApplyRate();
	float GetMatineeBlendAnimationApplyRate();
	float GetMatineeAnimationApplyRate();
	float GetMatineeAdditiveAnimationApplyRate();
	struct FVector GetLookAtInterpLocationNoLimit();
	struct FVector GetLookAtInterpLocation();
	class UJackLookAtComponent* GetLookAtComponent();
	float GetLookAtApplySecondNodeRate();
	float GetLookAtApplyRate();
	struct FJackFootIKResult GetFootIKResult(const struct FName& SocketName);
	class UJackFacialControlComponent* GetFacialControlComponent();
	class UAnimSequence* GetFacePoseAnimation();
	class UJackEyeLookAtComponent* GetEyeLookAtComponent();
	bool GetEnsureEvalAnimPerFrame();
	bool GetDebugDrawWind(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawFakeInertia(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawDynamicsSphericalLimits(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawDynamicsPlanarLimits(const struct FName& TargetSettingBoneName, int PlanarIndex);
	bool GetDebugDrawDynamicsEnable();
	bool GetDebugDrawDynamicsBoxExtents(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawDynamicsBonesSRT(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawDynamicsBonesName(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawDynamicsBonesAxis(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawDynamicsAngularConstraint(const struct FName& TargetSettingBoneName);
	bool GetDebugDrawBlendSpaceEvaluator();
	float GetDamageAnimationApplyRate();
	class UAnimSequence* GetCutSceneFacePoseAnimation();
	class UAnimSequence* GetCutSceneAdditionalFacePoseAnimation();
	bool GetBattleABPFlag(EJackBattleABPFlag ABPFlag);
	void GetArmIKParameter(struct FTransform* OutLeftArmFabrikEffector, struct FTransform* OutRightArmFabrikEffector, float* OutLeftArmFabrikAlpha, float* OutRightArmFabrikAlpha);
	class UAnimSequence* GetAdditionalFacePoseAnimation();
	void DebugInitializeAnimation();
	bool CanChangeFromRemainingMotionCheckVehicle(float Remaining, float Left);
	void CallEvents(const struct FName& FunctionName);
};


// Class JackGame.JackAnimMontageWaiterComponent
// 0x00C8 (0x01F0 - 0x0128)
class UJackAnimMontageWaiterComponent : public UActorComponent
{
public:
	bool                                               bPlayerMode;                                              // 0x0128(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC7];                                      // 0x0129(0x00C7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimMontageWaiterComponent");
		return ptr;
	}


	void Stop();
	void Start(bool bInOnlyNoMove);
	void SetWaitSec(float WaitMinSec, float WaitMaxSec);
	void SetWaitAnim(TArray<struct FName> ArrayOfAnimMontage);
	void SetSequencialMode(bool bOn, TArray<float> InSequenceSec);
	void SetIdle(bool bInIdle);
	void SetDisableWaiter(TEnumAsByte<EJackWaiterDisablePurpose> InType, bool bOn);
	void Resume();
	void ResetWaitAnim();
	void Pause();
	bool IsTriggerPlayAnimMontageStart();
	bool IsTriggerPlayAnimMontageEnd();
	bool IsPlayAnimMontage();
	bool IsOnlyNoMove();
	bool IsNoWait();
	bool HasAnim();
	void AddWaitAnim(class AJackCharacter* Character, TArray<struct FName> ArrayOfAnimMontage);
};


// Class JackGame.JackAnimNotify
// 0x0000 (0x0048 - 0x0048)
class UJackAnimNotify : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_ActionHit
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotify_ActionHit : public UJackAnimNotify
{
public:
	bool                                               bUseMonsterDefaultHitSub;                                 // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_ActionHit");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_AttachComponent
// 0x0018 (0x0060 - 0x0048)
class UJackAnimNotify_AttachComponent : public UJackAnimNotify
{
public:
	struct FName                                       ComponentName;                                            // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AttachLocationType;                                       // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_AttachComponent");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_CancelLatentAction
// 0x0000 (0x0048 - 0x0048)
class UJackAnimNotify_CancelLatentAction : public UJackAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_CancelLatentAction");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_Command
// 0x0018 (0x0060 - 0x0048)
class UJackAnimNotify_Command : public UJackAnimNotify
{
public:
	struct FName                                       CommandName;                                              // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             Parameters;                                               // 0x0050(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_Command");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_CoordSoundType
// 0x0020 (0x0068 - 0x0048)
class UJackAnimNotify_CoordSoundType : public UJackAnimNotify
{
public:
	TEnumAsByte<EJackCoordSound>                       CoordSoundType;                                           // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundPitch;                                               // 0x005C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableInGame;                                       // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableCutScene;                                     // 0x0061(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAttached;                                              // 0x0062(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0063(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_CoordSoundType");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_EquipAttachChange
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotify_EquipAttachChange : public UJackAnimNotify
{
public:
	TEnumAsByte<EJackEquippedHand>                     EquippedHand;                                             // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseEquippedStatus;                                       // 0x0049(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackSheatheStatus>                    EquippedStatus;                                           // 0x004A(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHiddenChangeOnlyUnsheathe;                               // 0x004B(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHidden;                                                  // 0x004C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              DitherTime;                                               // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRestartDither;                                           // 0x0054(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_EquipAttachChange");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FallOnGround
// 0x0000 (0x0048 - 0x0048)
class UJackAnimNotify_FallOnGround : public UJackAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FallOnGround");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FireReservedEffect
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotify_FireReservedEffect : public UJackAnimNotify
{
public:
	bool                                               bActionEffect;                                            // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bProjectile;                                              // 0x0049(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBurstEffect;                                             // 0x004A(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bParticleSystem;                                          // 0x004B(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FireReservedEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FireReservedEffect2
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotify_FireReservedEffect2 : public UJackAnimNotify
{
public:
	bool                                               bActionEffect;                                            // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FireReservedEffect2");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FireWeaponPropActor
// 0x0000 (0x0048 - 0x0048)
class UJackAnimNotify_FireWeaponPropActor : public UJackAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FireWeaponPropActor");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepBase
// 0x0020 (0x0068 - 0x0048)
class UJackAnimNotify_FootstepBase : public UJackAnimNotify
{
public:
	struct FName                                       SocketName;                                               // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EffectScale;                                              // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BumpNormalSize;                                           // 0x0054(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepMargin;                                      // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepRadius;                                      // 0x005C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceSocketName;                                          // 0x0060(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundBase
// 0x0030 (0x0078 - 0x0048)
class UJackAnimNotify_FootstepSoundBase : public UJackAnimNotify
{
public:
	struct FName                                       SocketName;                                               // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BumpNormalSize;                                           // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepMargin;                                      // 0x0054(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepRadius;                                      // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FName                                       TraceSocketName;                                          // 0x0060(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0068(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundPitch;                                               // 0x006C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableInGame;                                       // 0x0070(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableCutScene;                                     // 0x0071(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0072(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundTable
// 0x0008 (0x0080 - 0x0078)
class UJackAnimNotify_FootstepSoundTable : public UJackAnimNotify_FootstepSoundBase
{
public:
	class UClass*                                      FootstepSound;                                            // 0x0078(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundTableLeft
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotify_FootstepSoundTableLeft : public UJackAnimNotify_FootstepSoundTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundTableLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundTableRight
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotify_FootstepSoundTableRight : public UJackAnimNotify_FootstepSoundTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundTableRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundType
// 0x0008 (0x0080 - 0x0078)
class UJackAnimNotify_FootstepSoundType : public UJackAnimNotify_FootstepSoundBase
{
public:
	EJackCharacterFootstepType                         FootstepType;                                             // 0x0078(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundType");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundTypeLeft
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotify_FootstepSoundTypeLeft : public UJackAnimNotify_FootstepSoundType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundTypeLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepSoundTypeRight
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotify_FootstepSoundTypeRight : public UJackAnimNotify_FootstepSoundType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepSoundTypeRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepTable
// 0x0008 (0x0070 - 0x0068)
class UJackAnimNotify_FootstepTable : public UJackAnimNotify_FootstepBase
{
public:
	class UClass*                                      FootstepEffect;                                           // 0x0068(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepTableLeft
// 0x0000 (0x0070 - 0x0070)
class UJackAnimNotify_FootstepTableLeft : public UJackAnimNotify_FootstepTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepTableLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepTableRight
// 0x0000 (0x0070 - 0x0070)
class UJackAnimNotify_FootstepTableRight : public UJackAnimNotify_FootstepTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepTableRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepType
// 0x0008 (0x0070 - 0x0068)
class UJackAnimNotify_FootstepType : public UJackAnimNotify_FootstepBase
{
public:
	EJackCharacterFootstepType                         FootstepType;                                             // 0x0068(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepType");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepTypeLeft
// 0x0000 (0x0070 - 0x0070)
class UJackAnimNotify_FootstepTypeLeft : public UJackAnimNotify_FootstepType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepTypeLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_FootstepTypeRight
// 0x0000 (0x0070 - 0x0070)
class UJackAnimNotify_FootstepTypeRight : public UJackAnimNotify_FootstepType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_FootstepTypeRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_HitByChannelsBase
// 0x0028 (0x0070 - 0x0048)
class UJackAnimNotify_HitByChannelsBase : public UJackAnimNotify
{
public:
	TArray<TEnumAsByte<ECollisionChannel>>             CheckChannels;                                            // 0x0048(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       Socket;                                                   // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CheckOffsetUpper;                                         // 0x0060(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CheckOffsetUnder;                                         // 0x0064(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SweepSphereRadius;                                        // 0x0068(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_HitByChannelsBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_HidePropActor
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotify_HidePropActor : public UJackAnimNotify
{
public:
	struct FName                                       PropName;                                                 // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHidden;                                                  // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_HidePropActor");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayBattleFukidasi
// 0x0000 (0x0048 - 0x0048)
class UJackAnimNotify_PlayBattleFukidasi : public UJackAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayBattleFukidasi");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayCameraAnim
// 0x0038 (0x0080 - 0x0048)
class UJackAnimNotify_PlayCameraAnim : public UJackAnimNotify
{
public:
	TEnumAsByte<EJackPlayerController>                 PlayerController;                                         // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UCameraAnim*                                 Anim;                                                     // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Rate;                                                     // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x005C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlendInTime;                                              // 0x0060(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x0064(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLoop;                                                    // 0x0068(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomStartTime;                                         // 0x0069(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x006A(0x0002) MISSED OFFSET
	float                                              Duration;                                                 // 0x006C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0070(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FRotator                                    UserPlaySpaceRot;                                         // 0x0074(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayCameraAnim");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayCameraLensEffect
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotify_PlayCameraLensEffect : public UJackAnimNotify
{
public:
	class UClass*                                      LensEffectEmitterClass;                                   // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LifeSpan;                                                 // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayCameraLensEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayCameraParticleEffect
// 0x0038 (0x0080 - 0x0048)
class UJackAnimNotify_PlayCameraParticleEffect : public UJackAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0050(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x005C(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bAbsoluteLocation;                                        // 0x0068(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteRotation;                                        // 0x0069(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteScale;                                           // 0x006A(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x006B(0x0005) MISSED OFFSET
	class USoundBase*                                  Sound;                                                    // 0x0070(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0078(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayCameraParticleEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayCollideEffect
// 0x0050 (0x0098 - 0x0048)
class UJackAnimNotify_PlayCollideEffect : public UJackAnimNotify
{
public:
	class UClass*                                      CollideEffectClass;                                       // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttachInfo;                                      // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttached;                                        // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET
	struct FName                                       OverrideSocketName;                                       // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       OverrideAttachLocationType;                               // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     OverrideOffsetLocation;                                   // 0x0064(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    OverrideOffsetRotation;                                   // 0x0070(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bTraceEnabled;                                            // 0x007C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x007D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x007E(0x0002) MISSED OFFSET
	float                                              TraceSphereRadius;                                        // 0x0080(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0088(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x0090(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayCollideEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayCollideEffectTable
// 0x0050 (0x0098 - 0x0048)
class UJackAnimNotify_PlayCollideEffectTable : public UJackAnimNotify
{
public:
	class UClass*                                      CollideEffectClass;                                       // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttachInfo;                                      // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttached;                                        // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET
	struct FName                                       OverrideSocketName;                                       // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       OverrideAttachLocationType;                               // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     OverrideOffsetLocation;                                   // 0x0064(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    OverrideOffsetRotation;                                   // 0x0070(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bTraceEnabled;                                            // 0x007C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x007D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x007E(0x0002) MISSED OFFSET
	float                                              TraceSphereRadius;                                        // 0x0080(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0088(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x0090(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayCollideEffectTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayCollideSoundTable
// 0x0050 (0x0098 - 0x0048)
class UJackAnimNotify_PlayCollideSoundTable : public UJackAnimNotify
{
public:
	class UClass*                                      CollideSoundClass;                                        // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAttached;                                                // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AttachLocationType;                                       // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     OffsetLocation;                                           // 0x0064(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    OffsetRotation;                                           // 0x0070(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bTraceEnabled;                                            // 0x007C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x007D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x007E(0x0002) MISSED OFFSET
	float                                              TraceSphereRadius;                                        // 0x0080(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0088(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x0090(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayCollideSoundTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayMaterialAnimation
// 0x0018 (0x0060 - 0x0048)
class UJackAnimNotify_PlayMaterialAnimation : public UJackAnimNotify
{
public:
	struct FJackLDT_CharacterMaterialUpdater           CharacterMaterialUpdater;                                 // 0x0048(0x0010) (Edit, BlueprintReadOnly)
	struct FJackAnimNotify_PlayMaterialAnimation_ApplyParts ApplyParts;                                               // 0x0058(0x0005) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayMaterialAnimation");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayParticleEffect
// 0x0048 (0x0090 - 0x0048)
class UJackAnimNotify_PlayParticleEffect : public UJackAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAttached;                                                // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBeAffectedByMaterialAnimation;                           // 0x0059(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	struct FVector                                     LocationOffset;                                           // 0x005C(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0068(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bAbsoluteLocation;                                        // 0x0074(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteRotation;                                        // 0x0075(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteScale;                                           // 0x0076(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0077(0x0001) MISSED OFFSET
	class USoundBase*                                  Sound;                                                    // 0x0078(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0080(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UParticleSystemComponent>     ParticleSystemComponent;                                  // 0x0084(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayParticleEffect");
		return ptr;
	}


	void AutoPopulateInstanceProperties();
};


// Class JackGame.JackAnimNotify_PlayParticleSlotEffect
// 0x0008 (0x0098 - 0x0090)
class UJackAnimNotify_PlayParticleSlotEffect : public UJackAnimNotify_PlayParticleEffect
{
public:
	int                                                SlotNo;                                                   // 0x0090(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayParticleSlotEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayPostProcessEffect
// 0x0050 (0x0098 - 0x0048)
class UJackAnimNotify_PlayPostProcessEffect : public UJackAnimNotify
{
public:
	bool                                               bRefActionEffect;                                         // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackActionEffectCategory                          EffectCategory;                                           // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	struct FJackPostProcessEffect                      PostProcessEffect;                                        // 0x0060(0x0020) (Edit, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	TArray<struct FJackBlendablePostProcessSettingsData> PostBlendableData;                                        // 0x0088(0x0010) (BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayPostProcessEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayPresetShake
// 0x0030 (0x0078 - 0x0048)
class UJackAnimNotify_PlayPresetShake : public UJackAnimNotify
{
public:
	struct FJackLDT_PresetCameraShake                  PresetCameraShake;                                        // 0x0048(0x0010) (Edit, BlueprintReadOnly)
	struct FJackLDT_PresetForceFeedback                PresetForceFeedback;                                      // 0x0058(0x0010) (Edit, BlueprintReadOnly)
	class UClass*                                      OverrideCameraShakeClass;                                 // 0x0068(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UForceFeedbackEffect*                        OverrideForceFeedback;                                    // 0x0070(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayPresetShake");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayVoice
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotify_PlayVoice : public UJackAnimNotify
{
public:
	struct FName                                       VoiceID;                                                  // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayVoice");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_PlayWaterSurfaceSound
// 0x0010 (0x0078 - 0x0068)
class UJackAnimNotify_PlayWaterSurfaceSound : public UAnimNotify_PlaySound
{
public:
	float                                              TraceUpperDistance;                                       // 0x0068(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceLowerDistance;                                       // 0x006C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SweepSphereRadius;                                        // 0x0070(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_PlayWaterSurfaceSound");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_SpawnAirBubble
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotify_SpawnAirBubble : public UJackAnimNotify
{
public:
	TEnumAsByte<EJackAirBubble>                        AirBubbleType;                                            // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              SpawnRate;                                                // 0x004C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_SpawnAirBubble");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_SpawnDecalActor
// 0x0088 (0x00D0 - 0x0048)
class UJackAnimNotify_SpawnDecalActor : public UJackAnimNotify
{
public:
	class UMaterialInterface*                          DecalMaterialInterface;                                   // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  OffsetSpawnTransform;                                     // 0x0050(0x0030) (Edit, BlueprintReadOnly, IsPlainOldData)
	float                                              ActorLifeSpan;                                            // 0x0080(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RandomRotationRange;                                      // 0x0084(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bApplyPostRandomRotation;                                 // 0x0090(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	class UCurveLinearColor*                           ColorCurve;                                               // 0x0098(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       MaterialParameterNameToModifyColorCurve;                  // 0x00A0(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyCurveAlphaOnly;                                     // 0x00A8(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bStaticMeshDecal;                                         // 0x00A9(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00AA(0x0002) MISSED OFFSET
	float                                              ZFadeRange;                                               // 0x00AC(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRaycastHitLocation;                                   // 0x00B0(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	struct FVector                                     RaycastOffsetStart;                                       // 0x00B4(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     RaycastOffsetEnd;                                         // 0x00C0(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bAlignRaycastHitNormal;                                   // 0x00CC(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAxis>                                 AxisToAlignRaycastHitNormal;                              // 0x00CD(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMinusAxisToAlignRaycastHitNormal;                        // 0x00CE(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x00CF(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_SpawnDecalActor");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_StabilizeAnimDynamics
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotify_StabilizeAnimDynamics : public UJackAnimNotify
{
public:
	bool                                               bRequireResetAnimDynamics;                                // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                AnimDynamicsIdlingCount;                                  // 0x004C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUPPER_BODY;                                              // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLOWER_BODY;                                              // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBODY_EXTRA;                                              // 0x0052(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHair;                                                    // 0x0053(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHAIR_EXTRA;                                              // 0x0054(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMantle;                                                  // 0x0055(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOther;                                                   // 0x0056(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0057(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_StabilizeAnimDynamics");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_StartComponentMaterialCurveUpdate
// 0x0018 (0x0060 - 0x0048)
class UJackAnimNotify_StartComponentMaterialCurveUpdate : public UJackAnimNotify
{
public:
	struct FName                                       ParameterName;                                            // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveBase*                                  Curve;                                                    // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyAlpha;                                               // 0x005C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyComponent;                                           // 0x005D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_StartComponentMaterialCurveUpdate");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_WaterSurfaceEffectBase
// 0x0020 (0x0068 - 0x0048)
class UJackAnimNotify_WaterSurfaceEffectBase : public UJackAnimNotify
{
public:
	class UClass*                                      WaterSurfaceEffect;                                       // 0x0048(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EffectScale;                                              // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FName                                       TraceSocketName;                                          // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bExecuteTrace;                                            // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              TraceMargin;                                              // 0x0064(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_WaterSurfaceEffectBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_WeaponAction
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotify_WeaponAction : public UJackAnimNotify
{
public:
	TEnumAsByte<EJackEquippedHand>                     EquippedHand;                                             // 0x0048(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       ActionName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_WeaponAction");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyComponent
// 0x0050 (0x0178 - 0x0128)
class UJackAnimNotifyComponent : public UActorComponent
{
public:
	TMap<struct FName, class UJackAnimNotifyData*>     AnimNotifyDatas;                                          // 0x0128(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyComponent");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData
// 0x0010 (0x0048 - 0x0038)
class UJackAnimNotifyData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_ArmIKBase
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotifyData_ArmIKBase : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_ArmIKBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_AttackBase
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotifyData_AttackBase : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_AttackBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_AttackBurstSphere
// 0x0010 (0x0068 - 0x0058)
class UJackAnimNotifyData_AttackBurstSphere : public UJackAnimNotifyData_AttackBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0058(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_AttackBurstSphere");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_AttackRay
// 0x0020 (0x0078 - 0x0058)
class UJackAnimNotifyData_AttackRay : public UJackAnimNotifyData_AttackBase
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0058(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_AttackRay");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_AttackSweptSphere
// 0x0018 (0x0070 - 0x0058)
class UJackAnimNotifyData_AttackSweptSphere : public UJackAnimNotifyData_AttackBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0058(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_AttackSweptSphere");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_MoveToReservedLocation
// 0x0028 (0x0070 - 0x0048)
class UJackAnimNotifyData_MoveToReservedLocation : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_MoveToReservedLocation");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_MoveToReservedRotation
// 0x0028 (0x0070 - 0x0048)
class UJackAnimNotifyData_MoveToReservedRotation : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_MoveToReservedRotation");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_OverrideMovementMode
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotifyData_OverrideMovementMode : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_OverrideMovementMode");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_OverrideWeaponAttachment
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotifyData_OverrideWeaponAttachment : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_OverrideWeaponAttachment");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_PlayCollideEffect
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotifyData_PlayCollideEffect : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_PlayCollideEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_PlaySound
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotifyData_PlaySound : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_PlaySound");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_StartActorMaterialUpdaterLoopedCurve
// 0x0010 (0x0058 - 0x0048)
class UJackAnimNotifyData_StartActorMaterialUpdaterLoopedCurve : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_StartActorMaterialUpdaterLoopedCurve");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyData_TiltAlongGround
// 0x0008 (0x0050 - 0x0048)
class UJackAnimNotifyData_TiltAlongGround : public UJackAnimNotifyData
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyData_TiltAlongGround");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState
// 0x0010 (0x0050 - 0x0040)
class UJackAnimNotifyState : public UAnimNotifyState
{
public:
	float                                              TickStartTime;                                            // 0x0040(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TickEndTime;                                              // 0x0044(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TickDuration;                                             // 0x0048(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_ArmIKBase
// 0x0080 (0x00D0 - 0x0050)
class UJackAnimNotifyState_ArmIKBase : public UJackAnimNotifyState
{
public:
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           BlendInEasingFunc;                                        // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              BlendInSeconds;                                           // 0x005C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           BlendOutEasingFunc;                                       // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              BlendOutSeconds;                                          // 0x0064(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AlphaMax;                                                 // 0x0068(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0070(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EBoneControlSpace>                     TraceStartOffsetLocationSpace;                            // 0x0078(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FVector                                     TraceStartOffsetLocation;                                 // 0x007C(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     MoveLocationScale;                                        // 0x0088(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3C];                                      // 0x0094(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_ArmIKBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_ArmIKLeft
// 0x0000 (0x00D0 - 0x00D0)
class UJackAnimNotifyState_ArmIKLeft : public UJackAnimNotifyState_ArmIKBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_ArmIKLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_ArmIKRight
// 0x0000 (0x00D0 - 0x00D0)
class UJackAnimNotifyState_ArmIKRight : public UJackAnimNotifyState_ArmIKBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_ArmIKRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AttachedProps
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_AttachedProps : public UJackAnimNotifyState
{
public:
	struct FName                                       PropName;                                                 // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AttachedProps");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AttackBase
// 0x0020 (0x0070 - 0x0050)
class UJackAnimNotifyState_AttackBase : public UJackAnimNotifyState
{
public:
	TEnumAsByte<EJackNumberOfAttacks>                  NumberOfAttacks;                                          // 0x0050(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UClass*                                      DamageType;                                               // 0x0058(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                AttackPower;                                              // 0x0060(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              KnockbackPower;                                           // 0x0064(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HitStopTime;                                              // 0x0068(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForceHitToTarget;                                        // 0x006C(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanFriendryFire;                                         // 0x006D(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPreview;                                                 // 0x006E(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x006F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AttackBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AttackBurstSphere
// 0x0010 (0x0080 - 0x0070)
class UJackAnimNotifyState_AttackBurstSphere : public UJackAnimNotifyState_AttackBase
{
public:
	TArray<struct FJackAttackBurstSphere>              AttackBurstSpheres;                                       // 0x0070(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AttackBurstSphere");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AttackPredictionSphere
// 0x0010 (0x0080 - 0x0070)
class UJackAnimNotifyState_AttackPredictionSphere : public UJackAnimNotifyState_AttackBase
{
public:
	TArray<struct FJackAttackSphere>                   AttackSpheres;                                            // 0x0070(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AttackPredictionSphere");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AttackRay
// 0x0010 (0x0080 - 0x0070)
class UJackAnimNotifyState_AttackRay : public UJackAnimNotifyState_AttackBase
{
public:
	TArray<struct FJackAttackRay>                      AttackRays;                                               // 0x0070(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AttackRay");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AttackSweptSphere
// 0x0018 (0x0088 - 0x0070)
class UJackAnimNotifyState_AttackSweptSphere : public UJackAnimNotifyState_AttackBase
{
public:
	TArray<struct FJackAttackSphere>                   AttackSpheres;                                            // 0x0070(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	float                                              UpdateFrequency;                                          // 0x0080(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AttackSweptSphere");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AutoLookAt
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_AutoLookAt : public UJackAnimNotifyState
{
public:
	bool                                               bDisableAutoLookAt;                                       // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AutoLookAt");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_AutoStabilizeAnimDynamics
// 0x0000 (0x0050 - 0x0050)
class UJackAnimNotifyState_AutoStabilizeAnimDynamics : public UJackAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_AutoStabilizeAnimDynamics");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_BlockMovement
// 0x0000 (0x0050 - 0x0050)
class UJackAnimNotifyState_BlockMovement : public UJackAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_BlockMovement");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_BoneHidden
// 0x0020 (0x0070 - 0x0050)
class UJackAnimNotifyState_BoneHidden : public UJackAnimNotifyState
{
public:
	TArray<struct FJackBoneHiddenPresetNameList>       PresetNameList;                                           // 0x0050(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UDataTable*                                  HiddenBonesDefTable;                                      // 0x0060(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseHiddenBoneWhenAnimEnd;                                // 0x0068(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseHiddenBoneWhenNotifyEnd;                              // 0x0069(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_BoneHidden");
		return ptr;
	}


	void ApplyBoneScaleParameters(const struct FName& InPresetName, bool bInIsHidden, class USkeletalMeshComponent* InMeshComp);
};


// Class JackGame.JackAnimNotifyState_CancelFrame
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_CancelFrame : public UJackAnimNotifyState
{
public:
	float                                              BlendOutTime;                                             // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_CancelFrame");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_ClothBlendWeight
// 0x0020 (0x0070 - 0x0050)
class UJackAnimNotifyState_ClothBlendWeight : public UJackAnimNotifyState
{
public:
	float                                              BeginClothBlendWeight;                                    // 0x0050(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EndClothBlendWeight;                                      // 0x0054(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBeginCurrentClothBlendWeight;                            // 0x0058(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	struct FName                                       SpecificComponentName;                                    // 0x0060(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_ClothBlendWeight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_ConstBoneHiddenForLOD1
// 0x0038 (0x0088 - 0x0050)
class UJackAnimNotifyState_ConstBoneHiddenForLOD1 : public UJackAnimNotifyState
{
public:
	class UDataTable*                                  HiddenBonesDefTable;                                      // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               VisibleBonesPresetName;                                   // 0x0058(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               HiddenBonesPresetName;                                    // 0x0068(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UDataTable*                                  FacialPartsAnimDataTable;                                 // 0x0078(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FacialPoseName;                                           // 0x0080(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_ConstBoneHiddenForLOD1");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_DeactivateWeaponEffects
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_DeactivateWeaponEffects : public UJackAnimNotifyState
{
public:
	TEnumAsByte<EJackEquippedHand>                     ControlHand;                                              // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bImmediately;                                             // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_DeactivateWeaponEffects");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_EnsureEvalAnimPerFrame
// 0x0000 (0x0050 - 0x0050)
class UJackAnimNotifyState_EnsureEvalAnimPerFrame : public UJackAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_EnsureEvalAnimPerFrame");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootIKDisable
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_FootIKDisable : public UJackAnimNotifyState
{
public:
	bool                                               bDisableFootIK;                                           // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableAdjustMeshHeight;                                 // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootIKDisable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepBase
// 0x0028 (0x0078 - 0x0050)
class UJackAnimNotifyState_FootstepBase : public UJackAnimNotifyState
{
public:
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BumpNormalSize;                                           // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepMargin;                                      // 0x005C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepRadius;                                      // 0x0060(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FName                                       TraceSocketName;                                          // 0x0068(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyEffectImmediately;                                // 0x0070(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              SoundFadeoutTime;                                         // 0x0074(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundBase
// 0x0030 (0x0080 - 0x0050)
class UJackAnimNotifyState_FootstepSoundBase : public UJackAnimNotifyState
{
public:
	struct FName                                       SocketName;                                               // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BumpNormalSize;                                           // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepMargin;                                      // 0x005C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceFootstepRadius;                                      // 0x0060(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FName                                       TraceSocketName;                                          // 0x0068(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundFadeoutTime;                                         // 0x0070(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0074(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundPitch;                                               // 0x0078(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableInGame;                                       // 0x007C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableCutScene;                                     // 0x007D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x007E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundBase");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundTable
// 0x0008 (0x0088 - 0x0080)
class UJackAnimNotifyState_FootstepSoundTable : public UJackAnimNotifyState_FootstepSoundBase
{
public:
	class UClass*                                      FootstepSound;                                            // 0x0080(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundTableLeft
// 0x0000 (0x0088 - 0x0088)
class UJackAnimNotifyState_FootstepSoundTableLeft : public UJackAnimNotifyState_FootstepSoundTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundTableLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundTableRight
// 0x0000 (0x0088 - 0x0088)
class UJackAnimNotifyState_FootstepSoundTableRight : public UJackAnimNotifyState_FootstepSoundTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundTableRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundType
// 0x0008 (0x0088 - 0x0080)
class UJackAnimNotifyState_FootstepSoundType : public UJackAnimNotifyState_FootstepSoundBase
{
public:
	EJackCharacterFootstepType                         FootstepType;                                             // 0x0080(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundType");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundTypeLeft
// 0x0000 (0x0088 - 0x0088)
class UJackAnimNotifyState_FootstepSoundTypeLeft : public UJackAnimNotifyState_FootstepSoundType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundTypeLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepSoundTypeRight
// 0x0000 (0x0088 - 0x0088)
class UJackAnimNotifyState_FootstepSoundTypeRight : public UJackAnimNotifyState_FootstepSoundType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepSoundTypeRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepTable
// 0x0008 (0x0080 - 0x0078)
class UJackAnimNotifyState_FootstepTable : public UJackAnimNotifyState_FootstepBase
{
public:
	class UClass*                                      FootstepEffect;                                           // 0x0078(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepTableLeft
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotifyState_FootstepTableLeft : public UJackAnimNotifyState_FootstepTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepTableLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepTableRight
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotifyState_FootstepTableRight : public UJackAnimNotifyState_FootstepTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepTableRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepType
// 0x0008 (0x0080 - 0x0078)
class UJackAnimNotifyState_FootstepType : public UJackAnimNotifyState_FootstepBase
{
public:
	EJackCharacterFootstepType                         FootstepType;                                             // 0x0078(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepType");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepTypeLeft
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotifyState_FootstepTypeLeft : public UJackAnimNotifyState_FootstepType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepTypeLeft");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_FootstepTypeRight
// 0x0000 (0x0080 - 0x0080)
class UJackAnimNotifyState_FootstepTypeRight : public UJackAnimNotifyState_FootstepType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_FootstepTypeRight");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_HidePropActor
// 0x0010 (0x0060 - 0x0050)
class UJackAnimNotifyState_HidePropActor : public UJackAnimNotifyState
{
public:
	TArray<struct FName>                               PropNames;                                                // 0x0050(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_HidePropActor");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_LockEyeViewPoint
// 0x0010 (0x0060 - 0x0050)
class UJackAnimNotifyState_LockEyeViewPoint : public UJackAnimNotifyState
{
public:
	float                                              LockBlendSeconds;                                         // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           LockBlendEasingFunc;                                      // 0x0054(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              UnlockBlendSeconds;                                       // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           UnlockBlendEasingFunc;                                    // 0x005C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_LockEyeViewPoint");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_MoveToReservedLocation
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_MoveToReservedLocation : public UJackAnimNotifyState
{
public:
	TEnumAsByte<EEasingFunc>                           EasingFunc;                                               // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideEasingFuncZ;                                     // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           EasingFuncZ;                                              // 0x0052(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSweep;                                                   // 0x0053(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreX;                                                 // 0x0054(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreY;                                                 // 0x0055(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreZ;                                                 // 0x0056(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0057(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_MoveToReservedLocation");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_MoveToReservedLocationStockStart
// 0x0000 (0x0058 - 0x0058)
class UJackAnimNotifyState_MoveToReservedLocationStockStart : public UJackAnimNotifyState_MoveToReservedLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_MoveToReservedLocationStockStart");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_MoveToReservedRotation
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_MoveToReservedRotation : public UJackAnimNotifyState
{
public:
	TEnumAsByte<EEasingFunc>                           EasingFunc;                                               // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_MoveToReservedRotation");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_OverrideFacialState
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_OverrideFacialState : public UJackAnimNotifyState
{
public:
	bool                                               bControlUpper;                                            // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackUpperFacialState                              UpperFacialState;                                         // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bControlLower;                                            // 0x0052(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackLowerFacialState                              LowerFacialState;                                         // 0x0053(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_OverrideFacialState");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_OverrideMovementMode
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_OverrideMovementMode : public UJackAnimNotifyState
{
public:
	TEnumAsByte<EMovementMode>                         OverrideMovementMode;                                     // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRestoreMovementMode;                                     // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_OverrideMovementMode");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_OverrideWeaponAttachment
// 0x0010 (0x0060 - 0x0050)
class UJackAnimNotifyState_OverrideWeaponAttachment : public UJackAnimNotifyState
{
public:
	TEnumAsByte<EJackEquippedHand>                     EquippedHand;                                             // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0058(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_OverrideWeaponAttachment");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_PlayCollideEffect
// 0x0058 (0x00A8 - 0x0050)
class UJackAnimNotifyState_PlayCollideEffect : public UJackAnimNotifyState
{
public:
	class UClass*                                      CollideEffectClass;                                       // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttachInfo;                                      // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttached;                                        // 0x0059(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x005A(0x0006) MISSED OFFSET
	struct FName                                       OverrideSocketName;                                       // 0x0060(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       OverrideAttachLocationType;                               // 0x0068(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	struct FVector                                     OverrideOffsetLocation;                                   // 0x006C(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    OverrideOffsetRotation;                                   // 0x0078(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bDestroyEffectImmediately;                                // 0x0084(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	float                                              SoundFadeoutTime;                                         // 0x0088(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceEnabled;                                            // 0x008C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x008D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x008E(0x0002) MISSED OFFSET
	float                                              TraceSphereRadius;                                        // 0x0090(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0098(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x00A0(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_PlayCollideEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_PlayCollideEffectTable
// 0x0058 (0x00A8 - 0x0050)
class UJackAnimNotifyState_PlayCollideEffectTable : public UJackAnimNotifyState
{
public:
	class UClass*                                      CollideEffectClass;                                       // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttachInfo;                                      // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideAttached;                                        // 0x0059(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x005A(0x0006) MISSED OFFSET
	struct FName                                       OverrideSocketName;                                       // 0x0060(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       OverrideAttachLocationType;                               // 0x0068(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	struct FVector                                     OverrideOffsetLocation;                                   // 0x006C(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    OverrideOffsetRotation;                                   // 0x0078(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bDestroyEffectImmediately;                                // 0x0084(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	float                                              SoundFadeoutTime;                                         // 0x0088(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceEnabled;                                            // 0x008C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x008D(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x008E(0x0002) MISSED OFFSET
	float                                              TraceSphereRadius;                                        // 0x0090(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FName                                       TraceStartSocketName;                                     // 0x0098(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x00A0(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_PlayCollideEffectTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_PlayCollideSoundTable
// 0x0058 (0x00A8 - 0x0050)
class UJackAnimNotifyState_PlayCollideSoundTable : public UJackAnimNotifyState
{
public:
	class UClass*                                      CollideSoundClass;                                        // 0x0050(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAttached;                                                // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0060(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AttachLocationType;                                       // 0x0068(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	struct FVector                                     OffsetLocation;                                           // 0x006C(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    OffsetRotation;                                           // 0x0078(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	float                                              SoundFadeoutTime;                                         // 0x0084(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0088(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundPitch;                                               // 0x008C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableInGame;                                       // 0x0090(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSoundEnableCutScene;                                     // 0x0091(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceEnabled;                                            // 0x0092(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x0093(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceSphereRadius;                                        // 0x0094(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceStartSocketName;                                     // 0x0098(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TraceEndSocketName;                                       // 0x00A0(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_PlayCollideSoundTable");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_RotateTo
// 0x0018 (0x0068 - 0x0050)
class UJackAnimNotifyState_RotateTo : public UJackAnimNotifyState
{
public:
	EJackRotationProcessType                           RotationProcessType;                                      // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              RotationParameter1;                                       // 0x0054(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotationParameter2;                                       // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           RotationParameterEasing;                                  // 0x005C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              RotationDurationTime;                                     // 0x0060(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackRotationLayer                                 RotationLayer;                                            // 0x0064(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_RotateTo");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_Slomo
// 0x0008 (0x0058 - 0x0050)
class UJackAnimNotifyState_Slomo : public UJackAnimNotifyState
{
public:
	bool                                               bApplyToOwner;                                            // 0x0050(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackWorldTimeDilation>                WorldTimeDilationType;                                    // 0x0051(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacterScope>                   SlomoScope;                                               // 0x0052(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0053(0x0001) MISSED OFFSET
	float                                              DesiredTimeDilation;                                      // 0x0054(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_Slomo");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_StartActorMaterialUpdaterLoopedCurve
// 0x0030 (0x0080 - 0x0050)
class UJackAnimNotifyState_StartActorMaterialUpdaterLoopedCurve : public UJackAnimNotifyState
{
public:
	TArray<class UMaterialInterface*>                  ApplyMaterials;                                           // 0x0050(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       ParameterName;                                            // 0x0060(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveBase*                                  StartCurve;                                               // 0x0068(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveBase*                                  LoopCurve;                                                // 0x0070(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x0078(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ValueScale;                                               // 0x007C(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_StartActorMaterialUpdaterLoopedCurve");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_TiltAlongGround
// 0x0028 (0x0078 - 0x0050)
class UJackAnimNotifyState_TiltAlongGround : public UJackAnimNotifyState
{
public:
	float                                              BlendInTime;                                              // 0x0050(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           BlendInEasingFunc;                                        // 0x0054(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              BlendOutTime;                                             // 0x0058(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           BlendOutEasingFunc;                                       // 0x005C(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	TArray<struct FName>                               SocketNames;                                              // 0x0060(0x0010) (Edit, BlueprintReadOnly, ZeroConstructor)
	float                                              TiltAngleMax;                                             // 0x0070(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceSphereOffsetHeight;                                  // 0x0074(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_TiltAlongGround");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_TimedCameraLensEffect
// 0x0008 (0x0048 - 0x0040)
class UJackAnimNotifyState_TimedCameraLensEffect : public UAnimNotifyState
{
public:
	class UClass*                                      LensEffectEmitterClass;                                   // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_TimedCameraLensEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_TimedCameraParticleEffect
// 0x0038 (0x0078 - 0x0040)
class UJackAnimNotifyState_TimedCameraParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0040(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0048(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0054(0x000C) (Edit, BlueprintReadOnly, IsPlainOldData)
	bool                                               bDestroyAtEnd;                                            // 0x0060(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepWorldLocation;                                       // 0x0061(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteLocation;                                        // 0x0062(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteRotation;                                        // 0x0063(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteScale;                                           // 0x0064(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	class USoundBase*                                  Sound;                                                    // 0x0068(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundVolume;                                              // 0x0070(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoundFadeoutTime;                                         // 0x0074(0x0004) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_TimedCameraParticleEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_TimedParticleEffect
// 0x0008 (0x0090 - 0x0088)
class UJackAnimNotifyState_TimedParticleEffect : public UAnimNotifyState_TimedParticleEffect
{
public:
	bool                                               bBeAffectedByMaterialAnimation;                           // 0x0088(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_TimedParticleEffect");
		return ptr;
	}

};


// Class JackGame.JackAnimNotifyState_VehicleSplash
// 0x0000 (0x0050 - 0x0050)
class UJackAnimNotifyState_VehicleSplash : public UJackAnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotifyState_VehicleSplash");
		return ptr;
	}

};


// Class JackGame.JackArmIKComponent
// 0x0080 (0x0220 - 0x01A0)
class UJackArmIKComponent : public UJackCharacterComponent
{
public:
	struct FTransform                                  LeftArmFabrikEffectorTransform;                           // 0x01A0(0x0030) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              LeftArmFabrikAlpha;                                       // 0x01D0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01D4(0x000C) MISSED OFFSET
	struct FTransform                                  RightArmFabrikEffectorTransform;                          // 0x01E0(0x0030) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              RightArmFabrikAlpha;                                      // 0x0210(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0214(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackArmIKComponent");
		return ptr;
	}

};


// Class JackGame.JackArmIKTrackTrack
// 0x0008 (0x00B8 - 0x00B0)
class UJackArmIKTrackTrack : public UInterpTrackFloatBase
{
public:
	EJackCSArmType                                     TargetArtm;                                               // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackArmIKTrackTrack");
		return ptr;
	}

};


// Class JackGame.JackArmIKTrackTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackArmIKTrackTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackArmIKTrackTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAttachTrack
// 0x0018 (0x00C0 - 0x00A8)
class UJackAttachTrack : public UJackToggleBaseTrack
{
public:
	struct FName                                       AttachGroupName;                                          // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       AttachBoneName;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteLocation;                                        // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteRotation;                                        // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAbsoluteScale;                                           // 0x00BA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00BB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAttachTrack");
		return ptr;
	}

};


// Class JackGame.JackAttachTrackInst
// 0x0008 (0x0048 - 0x0040)
class UJackAttachTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAttachTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAttackHitEffect
// 0x0018 (0x0050 - 0x0038)
class UJackAttackHitEffect : public UObject
{
public:
	class UClass*                                      DefaultEffect;                                            // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CriticalEffect;                                           // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GuardEffect;                                              // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAttackHitEffect");
		return ptr;
	}

};


// Class JackGame.JackAttitudeControlComponent
// 0x00B0 (0x0250 - 0x01A0)
class UJackAttitudeControlComponent : public UJackCharacterComponent
{
public:
	bool                                               bControlPitch;                                            // 0x01A0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bControlRoll;                                             // 0x01A1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01A2(0x0002) MISSED OFFSET
	struct FRotator                                    ControlRotationMin;                                       // 0x01A4(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotationMax;                                       // 0x01B0(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIgnoreFalling;                                           // 0x01BC(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bControlHoisting;                                         // 0x01BD(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFixTurnMode;                                             // 0x01BE(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDeferredUpdateOverlaps;                                  // 0x01BF(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckFourCorners;                                        // 0x01C0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckFourCornersUseObjType;                              // 0x01C1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckFourCornersSkipJackCharacter;                       // 0x01C2(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckFourCornersFixBug;                                  // 0x01C3(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              GroundCheckUpOffset;                                      // 0x01C4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SweepGroundDistance;                                      // 0x01C8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceForPitchControl;                                  // 0x01CC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceForRollControl;                                   // 0x01D0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationSpeed;                                            // 0x01D4(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              HoistingSpeed;                                            // 0x01E0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HoistingHeight;                                           // 0x01E4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AdditionalPitch;                                          // 0x01E8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AdditionalRoll;                                           // 0x01EC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                HistoricalTargetRotatorLerpNum;                           // 0x01F0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDraw;                                               // 0x01F4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5B];                                      // 0x01F5(0x005B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAttitudeControlComponent");
		return ptr;
	}


	void SetControlled(bool bPitch, bool bRoll);
	void SetAttitudeToZero(bool bOn, bool bImmidiate);
};


// Class JackGame.JackAutoEyeComplianceTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackAutoEyeComplianceTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAutoEyeComplianceTrack");
		return ptr;
	}

};


// Class JackGame.JackAutoEyeComplianceTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackAutoEyeComplianceTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAutoEyeComplianceTrackInst");
		return ptr;
	}

};


// Class JackGame.JackLookAtBaseComponent
// 0x01E0 (0x0380 - 0x01A0)
class UJackLookAtBaseComponent : public UJackCharacterComponent
{
public:
	struct FName                                       LookAtBaseSocket;                                         // 0x01A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LookAtForwardSocket;                                      // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EAxis>                                 LookAtForwardAxis;                                        // 0x01B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01B1(0x0003) MISSED OFFSET
	float                                              LookAtMobileRegionPitchUp;                                // 0x01B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookAtMobileRegionPitchDown;                              // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookAtMobileRegionYawLeft;                                // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookAtMobileRegionYawRight;                               // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookAtInterpSpeed;                                        // 0x01C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReturnInterpSpeed;                                        // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpAngleSpeed;                                         // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           InterpCurve;                                              // 0x01D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01D1(0x0003) MISSED OFFSET
	float                                              InitialLookAtDistance;                                    // 0x01D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SecondNodeLookAtInterpSpeed;                              // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondNodeReturnInterpSpeed;                              // 0x01DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           SecondNodeInterpCurve;                                    // 0x01E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x19F];                                     // 0x01E1(0x019F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLookAtBaseComponent");
		return ptr;
	}


	void SetLookAtSpeed(float InSpeed);
	void SetLookAtSingleNode(bool bFlag, bool bRateToZeroIfNotLookAt);
	void SetLookAtMobileRegion(float PitchUp, float PitchDown, float YawLeft, float YawRight);
	void LookAtLocation(const struct FVector& Location);
	void LookAtEnd();
	void LookAtCharacter(class AJackCharacter* Character, const struct FName& Socket);
	bool IsActive();
	struct FVector GetLookAtLocation();
	struct FVector GetLookAtInterpLocation();
	void GetLookAtClamp(TEnumAsByte<EJackLookAtControlBone> ControlBone, struct FJackLookAtBoneSetting* OutLookAtBoneSetting);
	float GetLookAtApplySecondNodeRate();
	float GetLookAtApplyRate();
};


// Class JackGame.JackLookAtComponent
// 0x0060 (0x03E0 - 0x0380)
class UJackLookAtComponent : public UJackLookAtBaseComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0380(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLookAtComponent");
		return ptr;
	}

};


// Class JackGame.JackAutoLookAtComponent
// 0x0060 (0x0440 - 0x03E0)
class UJackAutoLookAtComponent : public UJackLookAtComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03E0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAutoLookAtComponent");
		return ptr;
	}


	void SetAutoLookAtEnbaledWithPurpose(TEnumAsByte<EJackCharacterAutoLookAtPurpose> InType, bool bEnabled);
	bool IsAutoLookAtEnbaled();
};


// Class JackGame.JackAutoMoveAnimationRateTrack
// 0x0008 (0x00B8 - 0x00B0)
class UJackAutoMoveAnimationRateTrack : public UInterpTrackFloatBase
{
public:
	bool                                               bIsOverrideEnbale;                                        // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAutoMoveAnimationRateTrack");
		return ptr;
	}

};


// Class JackGame.JackAutoMoveAnimationRateTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackAutoMoveAnimationRateTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAutoMoveAnimationRateTrackInst");
		return ptr;
	}

};


// Class JackGame.JackAvoidingBlindComponent
// 0x0010 (0x0138 - 0x0128)
class UJackAvoidingBlindComponent : public UActorComponent
{
public:
	bool                                               bHide;                                                    // 0x0128(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	float                                              MaxFadeSeconds;                                           // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              FadeSeconds;                                              // 0x0130(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAvoidingBlindComponent");
		return ptr;
	}

};


// Class JackGame.JackActionCameraParameter
// 0x0018 (0x0050 - 0x0038)
class UJackActionCameraParameter : public UObject
{
public:
	float                                              LineSightCollisionSize;                                   // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraCollisionSize;                                      // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GroundSecurityHeight;                                     // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackBattleActionCameraGroundCheck>    CameraGroundCheck;                                        // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              PeriodicFrameCheckTime;                                   // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackActionCameraParameter");
		return ptr;
	}

};


// Class JackGame.JackBattleAIComponent
// 0x0348 (0x0470 - 0x0128)
class UJackBattleAIComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	class UJackBattleWeapon*                           BattleWeapon;                                             // 0x0130(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleCharacterCollisionCoordinator*    CharacterCollisionCoordinator;                            // 0x0138(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleVoicePlayer*                      BattleVoicePlayer;                                        // 0x0140(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0148(0x0008) MISSED OFFSET
	struct FName                                       CurrentStateName;                                         // 0x0150(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bInputEnable;                                             // 0x0158(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2B0];                                     // 0x0159(0x02B0) MISSED OFFSET
	bool                                               bZoneStartRequest;                                        // 0x0409(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	EJackBattleABPState                                ABPState;                                                 // 0x040A(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x040B(0x0005) MISSED OFFSET
	TArray<bool>                                       ABPFlags;                                                 // 0x0410(0x0010) (Edit, ZeroConstructor, EditConst)
	struct FName                                       CurrentOddEffectMotionID;                                 // 0x0420(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0428(0x0001) MISSED OFFSET
	bool                                               bLookAtEnable;                                            // 0x0429(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x042A(0x0002) MISSED OFFSET
	float                                              LookAtUpdateCycleTimer;                                   // 0x042C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TWeakObjectPtr<class AJackCharacter>               ForceLookAtCharacter;                                     // 0x0430(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class UJackStreamObjectsHolder*                    ActionResourceHolder;                                     // 0x0438(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackStreamObjectsHolder*                    ActionVoiceResourceHolder;                                // 0x0440(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackStreamObjectsHolder*                    HealVoiceResourceHolder;                                  // 0x0448(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x20];                                      // 0x0450(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleAIComponent");
		return ptr;
	}


	void SetABPState(EJackBattleABPState InABPState);
	void SetABPFlag(EJackBattleABPFlag InABPFlag, bool bEnable);
	void OnAnimMontageStarted(class UAnimMontage* Montage);
	EJackBattleABPState GetABPState();
	bool GetABPFlag(EJackBattleABPFlag InABPFlag);
	void ForceDeadWithMontage(bool bForce, const struct FName& MontageName, bool bIgnoreToubatu, EJackDeadRequestType DeadRequestType);
	void ForceDead(bool bForce);
	void ApplyOddEffectMotion(bool bSkipToLoop);
};


// Class JackGame.JackBattleCameraManager
// 0x00F8 (0x0130 - 0x0038)
class UJackBattleCameraManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0038(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCameraManager");
		return ptr;
	}

};


// Class JackGame.JackBattleCharacterCollisionCoordinator
// 0x0100 (0x0138 - 0x0038)
class UJackBattleCharacterCollisionCoordinator : public UObject
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x0038(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCharacterCollisionCoordinator");
		return ptr;
	}


	void OnBlockingHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class JackGame.JackBattleCharacterCollisionManager
// 0x0010 (0x0060 - 0x0050)
class UJackBattleCharacterCollisionManager : public UJackTickableGameObject
{
public:
	TArray<class UJackBattleCharacterCollisionCoordinator*> Coordinators;                                             // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCharacterCollisionManager");
		return ptr;
	}

};


// Class JackGame.JackBattleCharacterInfo
// 0x01D8 (0x0210 - 0x0038)
class UJackBattleCharacterInfo : public UObject
{
public:
	bool                                               bActive;                                                  // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	TWeakObjectPtr<class UJackGameCharacter>           GameCharacter;                                            // 0x003C(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                MightIndex;                                               // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bAdditionalCreate;                                        // 0x0048(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bNigeru;                                                  // 0x0049(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bNifuramu;                                                // 0x004A(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bInvalidOddEffectEffect;                                  // 0x004B(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bInvalidOddEffectFacial;                                  // 0x004C(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bMarkedActionMoveVectorDirty;                             // 0x004D(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x102];                                     // 0x004E(0x0102) MISSED OFFSET
	EJackBattleFreeMoveType                            FreeMoveType;                                             // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0151(0x0003) MISSED OFFSET
	struct FVector                                     FreeMoveOriginLocation;                                   // 0x0154(0x000C) (Edit, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bShiftMoveEnable;                                         // 0x0160(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2F];                                      // 0x0161(0x002F) MISSED OFFSET
	TEnumAsByte<EJackEquippedWeaponStyle>              ABP_WeaponStyle;                                          // 0x0190(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	TArray<struct FName>                               HandEquipItemIDs;                                         // 0x0198(0x0010) (Edit, ZeroConstructor)
	TWeakObjectPtr<class AController>                  DefaultController;                                        // 0x01A8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAutoDestroyDefaultController;                            // 0x01B0(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x01B1(0x0003) MISSED OFFSET
	int                                                TurnCount;                                                // 0x01B4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       DeadReceivedActionID;                                     // 0x01B8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       DeadReceivedRenkeiID;                                     // 0x01C0(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bHaveNormalItem;                                          // 0x01C8(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bHaveRareItem;                                            // 0x01C9(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x01CA(0x0002) MISSED OFFSET
	TWeakObjectPtr<class AActor>                       ZouenLocator;                                             // 0x01CC(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       CoffinActor;                                              // 0x01D4(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TWeakObjectPtr<class AJackBattleSnowman>           SnowmanActor;                                             // 0x01DC(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01E4(0x0004) MISSED OFFSET
	struct FName                                       OverrideVoicePresetID;                                    // 0x01E8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UJackStreamObjectsHolder*                    AdditionalVoiceAssetsObjectHolder;                        // 0x01F0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FVector                                     ActionMoveVectorCache;                                    // 0x01F8(0x000C) (Edit, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bInvalidToubatuMonster;                                   // 0x0204(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0205(0x0003) MISSED OFFSET
	struct FName                                       LatestPlayedActionID;                                     // 0x0208(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCharacterInfo");
		return ptr;
	}

};


// Class JackGame.JackBattleCharacterManager
// 0x00B0 (0x00E8 - 0x0038)
class UJackBattleCharacterManager : public UObject
{
public:
	TArray<class UJackBattleCharacterInfo*>            BattleCharacterInfos;                                     // 0x0038(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate)
	class UJackBattleCharacterCollisionManager*        BattleCharacterCollisionManager;                          // 0x0048(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UClass*                                      BattleCommandAIClass_Friend;                              // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UClass*                                      BattleCommandAIClass_Monster;                             // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UClass*                                      BattleCommandAIClass_Konran;                              // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0068(0x0050) MISSED OFFSET
	TArray<TWeakObjectPtr<class AJackCharacter>>       RegisteredPauseCharacters;                                // 0x00B8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class AJackCharacter>>       UnregisteredPauseCharacters;                              // 0x00C8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class AJackCharacter>>       TextureMipLevelsToBeResidentCharacters;                   // 0x00D8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCharacterManager");
		return ptr;
	}


	TArray<class UJackGameCharacter*> GetToubatuMonsterGameCharacters();
	class AJackCharacter* GetMainPlayerCharacter();
	class UJackGameCharacter* GetLeaderGameCharacter();
	class AJackCharacter* GetLeaderCharacter();
	class UJackGameCharacter* GetControlGameCharacter();
	class AJackCharacter* GetControlCharacter();
	TArray<class AJackCharacter*> GetBattlePlayerCharacters(bool bAliveOnly);
	TArray<class AJackCharacter*> GetBattleMonsterCharacters(bool bAliveOnly);
	TArray<class UJackGameCharacter*> GetBattleGameCharacters(bool bAliveOnly, TArray<TEnumAsByte<EJackMight>> Mights);
	TArray<class AJackCharacter*> GetBattleCharacters(bool bAliveOnly, TArray<TEnumAsByte<EJackMight>> Mights);
	TArray<class UJackGameCharacter*> GetActionTargetGameCharacters(class UJackGameCharacter* CasterGameCharacter, EJackActionTargetListType ActionTargetListType, const struct FJackActionData& ActionData);
};


// Class JackGame.JackBattleCommandAI
// 0x0008 (0x03A0 - 0x0398)
class AJackBattleCommandAI : public AActor
{
public:
	int                                                ExecTurnCommandCount;                                     // 0x0398(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAI");
		return ptr;
	}


	class AJackCharacter* GetJackCharacter();
	class UJackGameCharacter* GetGameCharacter();
	class AJackBattleManager* GetBattleManager();
	class UJackBattleCharacterManager* GetBattleCharacterManager();
	void ExecTurnCommandCore();
	struct FJackBattleCommandAI_ExecTurnCommandResult ExecTurnCommand();
	bool ExecSecondCheckBP(class UJackGameCharacter* TargetGameCharacter, EJackBattleIntelligenceType IntelligenceType, struct FJackActionData* ActionData);
};


// Class JackGame.JackBattleCommandAI_Friend
// 0x00F8 (0x0498 - 0x03A0)
class AJackBattleCommandAI_Friend : public AJackBattleCommandAI
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x03A0(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAI_Friend");
		return ptr;
	}


	struct FJackBattleCommandAI_ExecTurnCommandResult ExecAnalysisFlow();
};


// Class JackGame.JackBattleCommandAI_Konran
// 0x0020 (0x03C0 - 0x03A0)
class AJackBattleCommandAI_Konran : public AJackBattleCommandAI
{
public:
	unsigned char                                      KoudouPer_NanimoSinai;                                    // 0x03A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      KoudouPer_KougekiEnemy;                                   // 0x03A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      KoudouPer_KougekiSelf;                                    // 0x03A2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      KoudouPer_KougekiFriend;                                  // 0x03A3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	TArray<struct FJackKonranNanimoSinaiInfo>          NanimoSinaiInfos;                                         // 0x03A8(0x0010) (Edit, ZeroConstructor)
	EJackKonranKoudouType                              ExecKoudouType;                                           // 0x03B8(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAI_Konran");
		return ptr;
	}

};


// Class JackGame.JackBattleCommandAI_Monster
// 0x0180 (0x0520 - 0x03A0)
class AJackBattleCommandAI_Monster : public AJackBattleCommandAI
{
public:
	struct FName                                       MonsterBattleAIID;                                        // 0x03A0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FJackDataTableMonsterBattleAI               MonsterBattleAIRow;                                       // 0x03A8(0x00F8) (Edit, BlueprintVisi, DisableEditOnTemplate)
	int                                                ExecActionSlotID;                                         // 0x04A0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                ExecExceptionActionSlotID;                                // 0x04A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleIntelligenceType                        IntelligenceType;                                         // 0x04A8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIntelligenceConclusion;                                  // 0x04A9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleActionPatternType                       ActionPatternType;                                        // 0x04AA(0x0001) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x04AB(0x0001) MISSED OFFSET
	int                                                CalcActionStrideTableCount;                               // 0x04AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleMoreActionType                          OriginalMoreActionType;                                   // 0x04B0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleMoreActionType                          MoreActionType;                                           // 0x04B1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x04B2(0x0002) MISSED OFFSET
	int                                                MoreActionNumber;                                         // 0x04B4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                PrevExecActionSlotID;                                     // 0x04B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                PrevExecExceptionActionSlotID;                            // 0x04BC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TMap<struct FName, int>                            ExecActionHistory;                                        // 0x04C0(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<int>                                        DebugActionPatternSlotIDs;                                // 0x0510(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAI_Monster");
		return ptr;
	}


	void UpdateExceptionActionSlotGroupeCheck(const struct FJackMonsterBattleAI_ActionSlot& ExceptionActionSlot);
	void UpdateActionSlotGroupeCheck(const struct FJackMonsterBattleAI_ActionSlot& ActionSlot);
	TArray<class UJackGameCharacter*> SortCandidateTargetGameCharacters(TArray<class UJackGameCharacter*> CandidateTargetGameCharacters, TArray<struct FJackMonsterBattleAI_ActionSlot> CandidateActionSlots, int CandidateActionSlotID);
	void SetupMoreAction();
	bool SetMoreAction(bool bInitialize);
	void SetGroupeCheckDefaultExceptionActionSlots(TArray<struct FJackMonsterBattleAI_ActionSlot> ExceptionActionSlots);
	void SetGroupeCheckDefaultActionSlots(TArray<struct FJackMonsterBattleAI_ActionSlot> ActionSlots);
	void RestoreMapGroupeCheck();
	bool RegisterInterruptActionDetail(EJackBattleInterruptActionTiming InTiming, const struct FName& InAction, const struct FName& InOverrideCastMotion, const struct FName& InOverrideShotMotion, class UJackGameCharacter* InTarget);
	bool RegisterInterruptActionBySlot(EJackBattleInterruptActionTiming InTiming, int ActionSlotID, class UJackGameCharacter* InTarget);
	bool RegisterInterruptAction(EJackBattleInterruptActionTiming InTiming, const struct FName& InAction, class UJackGameCharacter* InTarget);
	void OnInterruptActionComplete(const struct FJackActionPlayParam& InActionPlayParam);
	bool OnBreakMonsterParts(class UJackMonsterGameCharacter* BreakGameCharacter);
	bool IsRegisteredInterruptAction(const struct FName& InAction);
	bool IsChangeAITable();
	void InsertTurnQueue(class UJackGameCharacter* TurnGameCharacter, bool bRootTurn);
	void InitializeMonsterBattleAI(const struct FName& InMonsterBattleAIID);
	TArray<struct FJackMonsterBattleAI_ActionSlot> GetMonsterBattleAI_ExceptionActionSlotsBP(struct FJackDataTableMonsterBattleAI* DTMonsterBattleAIRow);
	TArray<struct FJackMonsterBattleAI_ActionSlot> GetMonsterBattleAI_ActionSlotsBP(struct FJackDataTableMonsterBattleAI* DTMonsterBattleAIRow);
	class AActor* GetLocatorActorByTag(const struct FName& InTagName);
	TArray<int> GetDebugActionPatternSlotIDs();
	void ExecFirstCheck(TArray<struct FJackMonsterBattleAI_ActionSlot> CandidateActionSlots, TArray<struct FJackMonsterBattleAI_ActionSlot>* OutCandidateActionSlots);
	void CreateSlotsKaitenC(int CandidateSlotIDsNum, int NextBasicActionSlotID, TArray<int>* OutCandidateSlotIDs);
	void CreateSlotsKaitenB(int CandidateSlotIDsNum, int NextBasicActionSlotID, TArray<int>* OutCandidateSlotIDs);
	void CreateSlotsKaitenA(int CandidateSlotIDsNum, int NextBasicActionSlotID, TArray<int>* OutCandidateSlotIDs);
	bool CheckNakamaYobiBySlot(int ActionSlotID);
	bool CheckExceptionActionSlotGroupeCheck(const struct FJackMonsterBattleAI_ActionSlot& ActionSlot);
	bool CheckActionSlotGroupeCheck(const struct FJackMonsterBattleAI_ActionSlot& ActionSlot);
	int CalcGetNextBasisActionSlotID(TArray<int> InCandidateSlotIDs, int InExecActionSlotID);
	void BuildCandidateExceptionActionSlots(TArray<struct FJackMonsterBattleAI_ActionSlot> ExceptionActionSlots, TArray<struct FJackMonsterBattleAI_ActionSlot>* OutCandidateActionSlots);
	void AdjustMonsterBattleAIRowByCopyMonster();
};


// Class JackGame.JackBattleCommandAIComponent
// 0x0000 (0x0128 - 0x0128)
class UJackBattleCommandAIComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAIComponent");
		return ptr;
	}

};


// Class JackGame.JackBattleCommandAIControlComponent
// 0x0018 (0x0140 - 0x0128)
class UJackBattleCommandAIControlComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0128(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAIControlComponent");
		return ptr;
	}

};


// Class JackGame.JackBattleCommandAIManager
// 0x00A0 (0x00D8 - 0x0038)
class UJackBattleCommandAIManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0038(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleCommandAIManager");
		return ptr;
	}

};


// Class JackGame.JackBattleEncountParameter
// 0x0030 (0x0068 - 0x0038)
class UJackBattleEncountParameter : public UObject
{
public:
	float                                              PlayerBaseValue;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerKiyousaRate;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIncludeStandbyMember;                                    // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              MonsterThroughLevelValue;                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MonsterUpLevelValue;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MonsterCorrectionValue;                                   // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MonsterBaseValue;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FJackPreemptiveStrikePersons>        PreemptiveStrikePersonsProbability;                       // 0x0058(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleEncountParameter");
		return ptr;
	}

};


// Class JackGame.JackAnimNotify_HitEffectByChannels
// 0x00A0 (0x0110 - 0x0070)
class UJackAnimNotify_HitEffectByChannels : public UJackAnimNotify_HitByChannelsBase
{
public:
	TMap<TEnumAsByte<EPhysicalSurface>, class UParticleSystem*> HitEffect;                                                // 0x0070(0x0050) (Edit, BlueprintReadOnly, ZeroConstructor)
	TMap<TEnumAsByte<EPhysicalSurface>, class USoundBase*> HitSound;                                                 // 0x00C0(0x0050) (Edit, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAnimNotify_HitEffectByChannels");
		return ptr;
	}

};


// Class JackGame.JackBattleEventInterface
// 0x0000 (0x0038 - 0x0038)
class UJackBattleEventInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleEventInterface");
		return ptr;
	}


	void BootEventBattle(const struct FName& EventBattleID);
};


// Class JackGame.JackBattleFieldGenerator
// 0x0098 (0x0430 - 0x0398)
class AJackBattleFieldGenerator : public AActor
{
public:
	struct FScriptMulticastDelegate                    OnCheckActive;                                            // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleStart;                                            // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleEnd;                                              // 0x03B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                Priority;                                                 // 0x03C8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BattleFieldRadius;                                        // 0x03CC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHiddenGrass;                                             // 0x03D0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLowAngleCameraInvalid;                                   // 0x03D1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03D2(0x0006) MISSED OFFSET
	TArray<class AVolume*>                             ActiveVolumeArray;                                        // 0x03D8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03E8(0x0010) MISSED OFFSET
	TArray<struct FJackBattleFieldPermitVolumeInfo>    PermitVolumeInfoArray;                                    // 0x03F8(0x0010) (Edit, ZeroConstructor)
	bool                                               bPinpointLocatorEnable;                                   // 0x0408(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0409(0x0003) MISSED OFFSET
	TWeakObjectPtr<class AJackLocator>                 PinpointLocator;                                          // 0x040C(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0414(0x0004) MISSED OFFSET
	TArray<class AJackBattleFieldGenerator_BlockingVolume*> BlockingVolumeArray;                                      // 0x0418(0x0010) (Edit, ZeroConstructor)
	bool                                               bActiveInvalid;                                           // 0x0428(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0429(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleFieldGenerator");
		return ptr;
	}


	void UpdateBlockingVolumeNavMesh();
	TArray<class AVolume*> GetPermitVolumeArray();
	TArray<class AJackBattleFieldGenerator_BlockingVolume*> GetBlockingVolumeArray(int PermitIndex);
	TArray<class AVolume*> GetActiveVolumeArray();
	void Delegate__DelegateSignature();
	bool CalcPermitVolumeNearestPoint(const struct FVector& Point, struct FVector* OutNearestPoint, float* OutDistanceToPoint, struct FJackBattleFieldPermitVolumeInfo* OutPermitVolumeInfo, int* OutPermitIndex, class AVolume** OutPermitVolume);
	bool CalcBattleFieldLocation(const struct FVector& InLocation, const struct FVector& InDirection, bool bCalcDirection, struct FVector* OutLocation, struct FVector* OutDirection, int* OutPermitIdex, class AVolume** OutPermitVolume);
	void BattleStartDelegate__DelegateSignature(int PermitIndex);
};


// Class JackGame.JackBattleFieldGenerator_BlockingVolume
// 0x0000 (0x03E0 - 0x03E0)
class AJackBattleFieldGenerator_BlockingVolume : public ANavModifierVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleFieldGenerator_BlockingVolume");
		return ptr;
	}

};


// Class JackGame.JackBattleFieldManager
// 0x0040 (0x03D8 - 0x0398)
class AJackBattleFieldManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	bool                                               bDebugDrawEnable;                                         // 0x03A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawEnable_CalcProgram;                             // 0x03A1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawEnable_OuterEdgeCollision;                      // 0x03A2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03A3(0x0001) MISSED OFFSET
	float                                              BattleFieldRadius_Default;                                // 0x03A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BattleFieldRadius_RangeExtinguish;                        // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bCameraDirectionModeEnable;                               // 0x03AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET
	TArray<TWeakObjectPtr<class AJackBattleFieldGenerator>> BattleFieldGeneratorArray;                                // 0x03B0(0x0010) (Edit, ZeroConstructor, EditConst)
	float                                              GroundGradientAngle;                                      // 0x03C0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	class UJackBattleFieldInfo*                        BattleFieldInfo;                                          // 0x03C8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       DebugBattleFieldCollisionActor;                           // 0x03D0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleFieldManager");
		return ptr;
	}


	TArray<class AJackBattleFieldGenerator*> GetBattleFieldGeneratorArray();
	void FinalizeDebugBattleFieldCollisionByBlueprint();
	void DisplayDebugInfoByBlueprint();
	void DisplayDebugInfo_GeneratorInfo(class AJackBattleFieldGenerator* Generator, const struct FVector& TextLocation, int PermitIndex, class AVolume* PermitVolume, float BattleFieldRadius);
	struct FVector CalcEncountDirectionByBP(class AJackCharacter* PlayerCharacter, class AJackCharacter* MonsterCharacter);
	void CalcBattleFieldRadiusBP(class AJackBattleFieldGenerator* Generator, int PermitIndex, class UJackEventBattleInfo* EventBattleInfo, float* OutRadius);
	bool CalcBattleFieldLocationBP(const struct FVector& EncountLocation, const struct FVector& EncountDirection, TEnumAsByte<EJackBattleEncount> EncountType, class UJackEventBattleInfo* EncountEventBattleInfo, bool ErrorMessageFlag, class AJackBattleFieldGenerator** OutGenerator, int* OutPermitIndex, class AVolume** OutPermitVolume, struct FVector* OutLocation, struct FVector* OutDirection);
};


// Class JackGame.JackBattleFukidasiTalkManager
// 0x03F8 (0x0790 - 0x0398)
class AJackBattleFukidasiTalkManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x2F0];                                     // 0x0398(0x02F0) MISSED OFFSET
	TArray<class UJackBattleVoicePlayer*>              DirectVoicePlayers;                                       // 0x0688(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient)
	unsigned char                                      UnknownData01[0xF8];                                      // 0x0698(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleFukidasiTalkManager");
		return ptr;
	}


	class UTexture2D* GetFukidasiFaceIcon(const struct FName& InName);
	void CloseScenarioFukidasi();
	bool CheckRowMatch_Value(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_Type(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TVC(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TV(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TSVC(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TSV(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TSC(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TS(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_TC(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_String(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
	bool CheckRowMatch_Character(const struct FJackBattleFukidasiTalkCondition& SrcCondition, const struct FJackBattleFukidasiTalkCommandInfo& InCommandInfo);
};


// Class JackGame.JackBattleGroupManager
// 0x00A8 (0x00E0 - 0x0038)
class UJackBattleGroupManager : public UObject
{
public:
	bool                                               bInitialized;                                             // 0x0038(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FJackBattleTroop>                    Troops;                                                   // 0x0040(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst)
	class UJackBattleGroupParameter*                   BattleGroupParameter;                                     // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TMap<struct FName, int>                            PlacementOrder;                                           // 0x0058(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x38];                                      // 0x00A8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleGroupManager");
		return ptr;
	}

};


// Class JackGame.JackBattleGroupParameter
// 0x01A0 (0x01D8 - 0x0038)
class UJackBattleGroupParameter : public UObject
{
public:
	struct FRotator                                    FirstCameraAngle;                                         // 0x0038(0x000C) (Edit, IsPlainOldData)
	TEnumAsByte<EJackBattleFirstCameraTarget>          FirstCameraTarget;                                        // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	struct FRotator                                    PreparationCameraAngle;                                   // 0x0048(0x000C) (Edit, IsPlainOldData)
	float                                              PreparationCameraCheckCollisionRadius;                    // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PreparationCameraPositionLimitPitchAngle;                 // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreparationCameraPositionLimitCheckFeet;                 // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x005D(0x0001) MISSED OFFSET
	bool                                               IsFriendMoveCollisionCheck;                               // 0x005E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackBattleTurnDirection>              FriendsTurnDirection;                                     // 0x005F(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FriendsLookAtDistance;                                    // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FriendsLookAtAngle;                                       // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FriendsBackMoveAngle;                                     // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FriendsBackMoveLength;                                    // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackBattleTurnDirection>              EnemyTurnDirection;                                       // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               EnemyTurn1To1Look;                                        // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	float                                              EnemyLookAtDistance;                                      // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyLookAtAngle;                                         // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsEnemyMoveCollisionCheck;                                // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              RandomEncountBattleFieldInfoRadius;                       // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlignmentDistanceRate;                                    // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PositioningAcceptRadiusRate;                              // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnStartAngle;                                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnEndAngle;                                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecliningBaselineLength;                                  // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecliningBaseMoveLength;                                  // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGroupSortMonsterAddOnly;                                 // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TArray<struct FJackGroupFormations>                EnemyGroupFormation;                                      // 0x00A0(0x0010) (Edit, ZeroConstructor)
	TMap<struct FName, struct FJackGroupFormationsList> EventBattleEnemyGroupFormation;                           // 0x00B0(0x0050) (Edit, ZeroConstructor)
	TArray<struct FJackGroupFormations>                PlayerGroupFormation;                                     // 0x0100(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackGroupFormations>                PlayerGroupGuestFormation;                                // 0x0110(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackGroupFormations>                PlayerGroupFormationBySScenario;                          // 0x0120(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackGroupFormations>                PlayerGroupGuestFormationBySScenario;                     // 0x0130(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackGroupGuestExceptionFormationInfo> PlayerGroupGuestExceptionFormation;                       // 0x0140(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      GroupPlacedStartingPoint;                                 // 0x0150(0x0010) (Edit, ZeroConstructor)
	float                                              PlayerMinimumGroupScale;                                  // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerMaxGroupScaleRate;                                  // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyMinimumGroupScale;                                   // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyMaxGroupScaleRate;                                   // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerGroupScaleInterval;                                 // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerGroupScaleRate;                                     // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyGroupScaleInterval;                                  // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyGroupScaleRate;                                      // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackBattleGroupAlignmentSequence>     GroupAlignmentSequence;                                   // 0x0180(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bGroupAutoAdjustment;                                     // 0x0181(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x0182(0x0002) MISSED OFFSET
	int                                                GroupAutoAdjustment_AddCheckNum;                          // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GroupAutoAdjustment_SufferRate;                           // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	TArray<float>                                      DummyAngleList;                                           // 0x0190(0x0010) (Edit, ZeroConstructor)
	float                                              MinimumTroopScale;                                        // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTroopScale;                                            // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerTroopScalePadding;                                  // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerTroopScaleRate;                                     // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerRandomLocationRange;                                // 0x01B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerRandomLocationRangeSecurity;                        // 0x01B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyTroopScalePadding;                                   // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EnemyTroopScaleRate;                                      // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InitialPlacementWidth;                                    // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	TArray<struct FJackGroupID_Summarize>              GroupID_Summarize;                                        // 0x01C8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleGroupParameter");
		return ptr;
	}

};


// Class JackGame.JackBattleInterruptActionManager
// 0x0070 (0x00A8 - 0x0038)
class UJackBattleInterruptActionManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
	TArray<class UJackBattleInterruptActionRequest*>   BattleStartRequests;                                      // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<class UJackBattleInterruptActionRequest*>   RoundStartRequests;                                       // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<class UJackBattleInterruptActionRequest*>   TurnEndRequests;                                          // 0x0068(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<class UJackBattleInterruptActionRequest*>   RoundEndRequests;                                         // 0x0078(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	EJackBattleInterruptActionTiming                   PlayingTiming;                                            // 0x0088(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	TWeakObjectPtr<class AJackActionExec>              PlayingActionExec;                                        // 0x008C(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TWeakObjectPtr<class UJackBattleInterruptActionRequest> PlayingRequest;                                           // 0x0094(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                PlayingScene;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bPlayingStart;                                            // 0x00A0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleInterruptActionManager");
		return ptr;
	}

};


// Class JackGame.JackBattleLockOn
// 0x00F8 (0x0130 - 0x0038)
class UJackBattleLockOn : public UObject
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0038(0x00E8) MISSED OFFSET
	TWeakObjectPtr<class AJackCharacter>               OwnerCharacter;                                           // 0x0120(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bInitialized;                                             // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0129(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleLockOn");
		return ptr;
	}

};


// Class JackGame.JackBattleManager
// 0x0538 (0x08D0 - 0x0398)
class AJackBattleManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	bool                                               bDebugFlag_DrawBattleGroup;                               // 0x03A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawBattleStateInfo;                           // 0x03A1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawRoundInfo;                                 // 0x03A2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawActionInfo;                                // 0x03A3(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawZoneInfo;                                  // 0x03A4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawCollisionInfo;                             // 0x03A5(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawTeleportInfo;                              // 0x03A6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawVoiceInfo;                                 // 0x03A7(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawCharaStatusInfo;                           // 0x03A8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawCharaStateInfo;                            // 0x03A9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawBattleCommandAIInfo;                       // 0x03AA(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawCharaMovementInfo;                         // 0x03AB(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawEventBattleInfo;                           // 0x03AC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawCalcInfo;                                  // 0x03AD(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03AE(0x0002) MISSED OFFSET
	int                                                DebugFlag_DrawCalcInfoIgnoreRefCount;                     // 0x03B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawNakamaYobiInfo;                            // 0x03B4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawActionExtentInfo;                          // 0x03B5(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DrawBattleTextInfo;                            // 0x03B6(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x03B7(0x0001) MISSED OFFSET
	int                                                DebugFlag_DrawBattleFukidasiInfo;                         // 0x03B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_BattleFukidasiForce;                            // 0x03BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       DebugFlag_BattleFukidasiForceID;                          // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bDebugFlag_DrawPositioningInfo;                           // 0x03C8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_MonsterNigeru;                                 // 0x03C9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x03CA(0x0002) MISSED OFFSET
	int                                                DebugFlag_TurnSkip;                                       // 0x03CC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_SenseiKougeki;                                  // 0x03D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_Nigeru;                                         // 0x03D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_Critical;                                       // 0x03D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_Miss;                                           // 0x03DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_Mikawasi;                                       // 0x03E0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_TateGuard;                                      // 0x03E4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_BukiGuard;                                      // 0x03E8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_Counter;                                        // 0x03EC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_OddEffect;                                      // 0x03F0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_Mitoreru;                                       // 0x03F4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_ToubatuEffect;                                  // 0x03F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_HazukasiiNoroi;                                 // 0x03FC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_HazukasiiNoroiText;                             // 0x0400(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackHitStopPresetType                             DebugFlag_HitStopPresetType;                              // 0x0404(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	int                                                DebugFlag_PositioningPlayer;                              // 0x0408(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_PositioningMonster;                             // 0x040C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_BattleFieldHiddenGrass;                         // 0x0410(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_BattleFieldLowAngleCameraInvalid;               // 0x0414(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_ResultSkip;                                    // 0x0418(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DropCertainty;                                 // 0x0419(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_RareDropCertainty;                             // 0x041A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DropLogOutput;                                 // 0x041B(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_Drop2000Lottery;                               // 0x041C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_Win;                                           // 0x041D(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_Lose;                                          // 0x041E(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_DisablePopupBalloon;                           // 0x041F(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_ActionCameraInfo;                              // 0x0420(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	int                                                DebugFlag_AutoCameraInfo;                                 // 0x0424(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_AutoCameraParam;                                // 0x0428(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugFlag_DistantBranch;                                  // 0x042C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_AIFirstCheck;                                  // 0x0430(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_AISecondCheck;                                 // 0x0431(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_AIFirstCheckLogShow;                           // 0x0432(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_AISecondCheckLogShow;                          // 0x0433(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_PlayerAIDrawCalcInfo;                          // 0x0434(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_PlayerAIFlowTest;                              // 0x0435(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_PlayerAIFlowLogShow;                           // 0x0436(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_PlayerAIFlowBossBattle;                        // 0x0437(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_PlayerAIScoreCheckLogShow;                     // 0x0438(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_MonsterAppearSkip;                             // 0x0439(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_MonsterAppearDrawBox;                          // 0x043A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_BattlePreparationCameraDraw;                   // 0x043B(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugFlag_MonsterSpawnNear;                              // 0x043C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x043D(0x0003) MISSED OFFSET
	int                                                Debug_FixDamage;                                          // 0x0440(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0444(0x0004) MISSED OFFSET
	TArray<int>                                        DebugBattleCommandAI_ActionPatternSlotIDs;                // 0x0448(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient)
	struct FName                                       BattleTextCaster;                                         // 0x0458(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	struct FName                                       BattleTextTarget;                                         // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	int                                                BattleTextDamage;                                         // 0x0468(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bEncount_InvalidByDebugCmd;                               // 0x046C(0x0001) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               bEncount_InvalidByBPDebug;                                // 0x046D(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackBattleEncount>                    Encount_Type;                                             // 0x046E(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1];                                       // 0x046F(0x0001) MISSED OFFSET
	struct FVector                                     Encount_Location;                                         // 0x0470(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, Transient, EditConst, IsPlainOldData)
	TWeakObjectPtr<class AJackMonsterCharacter>        Encount_MonsterCharacter;                                 // 0x047C(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	float                                              Encount_IntervalSeconds;                                  // 0x0484(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Encount_IntervalSecondsWork;                              // 0x0488(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TWeakObjectPtr<class UJackEventBattleInfo>         Encount_EventBattleInfo;                                  // 0x048C(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TEnumAsByte<EJackBattlePreemptiveAttack>           Encount_PreemptiveAttack;                                 // 0x0494(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	bool                                               Encount_Attack;                                           // 0x0495(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x0496(0x0002) MISSED OFFSET
	class UJackBattleEncountParameter*                 EncountParameter;                                         // 0x0498(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	int                                                Validation_LockOnMovementTest;                            // 0x04A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                BattleMonsterNumLimit;                                    // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleEndMessageStableWaitTime;                           // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleMessageDisplayTime_Normal;                          // 0x04AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleMessageDisplayTime_2Line;                           // 0x04B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleMessageDisplayTime_Skip;                            // 0x04B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UnsheathePreWaitTimeRandomMin;                            // 0x04B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UnsheathePreWaitTimeRandomMax;                            // 0x04BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UJackBattleStatus*                           BattleStatus;                                             // 0x04C0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleResultInfo*                       BattleResultInfo;                                         // 0x04C8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleCharacterManager*                 BattleCharacterManager;                                   // 0x04D0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleGroupManager*                     BattleGroupManager;                                       // 0x04D8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AJackBattleFieldManager*                     BattleFieldManager;                                       // 0x04E0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleInterruptActionManager*           BattleInterruptActionManager;                             // 0x04E8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleTurnManager*                      BattleTurnManager;                                        // 0x04F0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleCameraManager*                    BattleCameraManager;                                      // 0x04F8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleSelectionEffect*                  BattleSelectionEffect;                                    // 0x0500(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackHitStop*                                HitStop;                                                  // 0x0508(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleParameter*                        BattleParameter;                                          // 0x0510(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackBattleZoneParameter*                    ZoneParameter;                                            // 0x0518(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackBattleCommandAIManager*                 BattleCommandAIManager;                                   // 0x0520(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AJackBattleFukidasiTalkManager*              BattleFukidasiTalkManager;                                // 0x0528(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnBattleInitialize;                                       // 0x0530(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCrashEffectStart;                                       // 0x0540(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattlePostInitialize;                                   // 0x0550(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMonsterAppearStart;                                     // 0x0560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleStart;                                            // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleTurnStart;                                        // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleTurnPostActionExit;                               // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRoundEndInterruptCheck;                                 // 0x05A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRoundEnd;                                               // 0x05B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActionHitComplete;                                      // 0x05C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishBlow;                                             // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleEnd;                                              // 0x05E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResultStart;                                            // 0x05F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResultCameraStart;                                      // 0x0600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleExitStart;                                        // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleFinalize;                                         // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleFieldEffectChange;                                // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleCameraStartDelegate;                              // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBattleCameraEndDelegate;                                // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPrgCameraSetupDelegate;                                 // 0x0660(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPrgCameraStartDelegate;                                 // 0x0670(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPrgCameraEndDelegate;                                   // 0x0680(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x140];                                     // 0x0690(0x0140) MISSED OFFSET
	class AJackBattleMonsterAppear*                    MonsterAppear;                                            // 0x07D0(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class AJackBattleResultSequence*                   ResultSequence;                                           // 0x07D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackBattleVoiceResourceChanger*             BattleVoiceResourceChanger;                               // 0x07E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TWeakObjectPtr<class AJackBattleToubatuEffect>     ToubatuEffect;                                            // 0x07E8(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TWeakObjectPtr<class AJackBattleMemberChange>      MemberChange;                                             // 0x07F0(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TWeakObjectPtr<class AJackBattleNigeruSequence>    NigeruSequence;                                           // 0x07F8(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	TMap<EJackBattleAdditionalResourceType, class UJackStreamObjectsHolder*> AdditionalResourceObjectsHolders;                         // 0x0800(0x0050) (Edit, ZeroConstructor, Transient, EditConst)
	class UClass*                                      MemberChangeClass;                                        // 0x0850(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BattleFieldManagerClass;                                  // 0x0858(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CriticalKaisinEffectClass;                                // 0x0860(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CriticalTuukonEffectClass;                                // 0x0868(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      JumonBousouEffectClass;                                   // 0x0870(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ToubatuEffectClass;                                       // 0x0878(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BattleParameterClass;                                     // 0x0880(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ZoneParameterClass;                                       // 0x0888(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      EncountParameterClass;                                    // 0x0890(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HitStopClass;                                             // 0x0898(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TreasureBoxBattleClass;                                   // 0x08A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TreasureBoxRareBattleClass;                               // 0x08A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackBattleNavigationQueryFilterDict> NavigationQueryFilters;                                   // 0x08B0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      OddEffectDokuPostProcessClass;                            // 0x08C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FieldDokuDamageInterval;                                  // 0x08C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FieldDokuTurnSec;                                         // 0x08CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleManager");
		return ptr;
	}


	bool SetTroopLocation(const struct FVector& InLocation, TEnumAsByte<EJackMight> MightType);
	void SetHiddenInBattleField(class AJackCharacter* InCharacter, bool bInHidden);
	void SetFoliageDitherRangeDirect(float DitherRange);
	void SetFoliageDitherRange(EJackBattleFoliageDitherRangeType FoliageDitherRangeType);
	void SetFoliageDitherBattleFieldDirect(const struct FVector& DitherLocation, float DitherBounds);
	void SetFoliageDitherBattleField(EJackBattleFoliageDitherBattleFieldType FoliageDitherBattleFieldType);
	void PlayEventBattleInSe();
	void OnResultStartComplete();
	void OnMonsterAppearComplete();
	void OnCrashEffectComplete();
	void OnBattleStartComplete();
	void OnBattlePostInitializeComplete();
	void OnBattlePostInitializeBPComplete();
	void OnBattleInitializeComplete();
	void OnBattleFinalizeComplete();
	void OnBattleExitStartComplete();
	void OnBattleEndComplete();
	void OnActionHitCompleteFunction(const struct FJackActionResult& ActionResult, class AJackActionExec* ActionExec);
	void MonsterAppearParameterInitialize();
	bool IsToubatuEffectEnable();
	bool IsSimpleCameraMode();
	bool IsNigeruEnable();
	bool IsInBattle(bool bCheckAllSequence);
	bool IsEncountable(bool bCheckFieldAttack);
	bool IsBattleFieldNigeruInvalid();
	float GetStartFadeTime();
	TEnumAsByte<EJackFadeColor> GetStartFadeColor();
	struct FName GetHiddenExclusionTag();
	class UMaterialParameterCollection* GetEnvParamMaterialParameterCollection();
	float GetEndFadeTime();
	float GetEndFadeOutDefaultTimeByWin();
	float GetEndFadeOutDefaultTimeByOther();
	TEnumAsByte<EJackFadeColor> GetEndFadeColor();
	class AJackCharacter* GetControlCharacter();
	class UJackBattleStatus* GetBattleStatusBP();
	class UJackBattleParameter* GetBattleParameter();
	class UJackBattleNigeruComponent* GetBattleNigeruComponent();
	TArray<class AJackCharacter*> GetBattleHiddenMonsterCharacters(const struct FVector& CenterLocation, float Radius, float HalfHeight, TArray<class AJackCharacter*> ActorsToIgnore);
	bool CheckUsedRenkei(const struct FName& RenkeiID);
	bool CheckToubatuMonster(const struct FName& MonsterID, const struct FName& ActionID, const struct FName& RenkeiID);
	void BattleTurnStartDelegate__DelegateSignature(class UJackGameCharacter* TurnGameCharacter, bool bRootTurn);
	void BattleTurnPostActionExitDelegate__DelegateSignature(class UJackGameCharacter* InTurnGameCharacter);
	void BattleSimpleDelegate__DelegateSignature();
	void BattleInitializeDelegate__DelegateSignature(const struct FJackCommandBattleInitialize& InCommand);
	void BattleFinishBlowDelegate__DelegateSignature(TEnumAsByte<EJackBattleResult> ResultType);
	void BattleFieldEffectChangeDelegate__DelegateSignature(TEnumAsByte<EJackBattleFieldEffectStatus> InStatus, bool InEnable);
	void BattleCameraStartDelegate__DelegateSignature(EJackBattleCameraCategory BattleCameraCategory);
	void BattleCameraEndDelegate__DelegateSignature(EJackBattleCameraCategory BattleCameraCategory);
	void BattleActionHitCompleteDelegate__DelegateSignature(const struct FJackActionResult& ActionResult, class AJackActionExec* ActionExec);
};


// Class JackGame.JackTaskBattleMemberChangeCharaIn
// 0x0018 (0x0058 - 0x0040)
class UJackTaskBattleMemberChangeCharaIn : public UJackTask
{
public:
	TWeakObjectPtr<class AJackCharacter>               Character;                                                // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TWeakObjectPtr<class UAnimMontage>                 MemberChangeInAM;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              DitherTime;                                               // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bVoiceEnable;                                             // 0x0054(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTaskBattleMemberChangeCharaIn");
		return ptr;
	}

};


// Class JackGame.JackBattleMemberChange
// 0x0128 (0x04C0 - 0x0398)
class AJackBattleMemberChange : public AActor
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0398(0x00F0) MISSED OFFSET
	TArray<struct FJackBattleMemberChangeCharaInfo>    MemberChangeCharaInfos;                                   // 0x0488(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	class UJackTaskHolder*                             TaskHolder;                                               // 0x0498(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	EJackBattleMemberChangeType                        MemberChangeType;                                         // 0x04A0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04A1(0x0003) MISSED OFFSET
	float                                              CharaOutDitherTime;                                       // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CharaIntervalTimeMin;                                     // 0x04A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CharaIntervalTimeMax;                                     // 0x04AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CharaDitherTime;                                          // 0x04B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x04B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleMemberChange");
		return ptr;
	}

};


// Class JackGame.JackBattleMonsterAppear
// 0x03B8 (0x0750 - 0x0398)
class AJackBattleMonsterAppear : public AActor
{
public:
	unsigned char                                      UnknownData00[0x3B8];                                     // 0x0398(0x03B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleMonsterAppear");
		return ptr;
	}


	void InitBattleAppearance(EJackMonsterAlignmentSequenceEnum InProduction, float PlayTime, float CameraFOV, float TransparencyTime, float WaitingStartAnimationMaxTime, float ArrangementInterval, float CornerMarginRate, float TimerMax, float WaitMax, float SphereRadius, bool CameraSmooth, bool InSymbolPriority, float InParticleCameraFixedDistance, float InRandomEncounterWidthMax, float InRandomEncounterOverCameraAngle, bool IsCenterLocationSwitch);
};


// Class JackGame.JackBattleNigeruComponent
// 0x0008 (0x0130 - 0x0128)
class UJackBattleNigeruComponent : public UActorComponent
{
public:
	bool                                               bNigeruConfirmWindowComplete;                             // 0x0128(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0129(0x0003) MISSED OFFSET
	int                                                NigeruConfirmWindowExecCount;                             // 0x012C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleNigeruComponent");
		return ptr;
	}


	void SetRecast();
	void NigeruConfirmWindow_OnSelectComplete(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, int SelectDialogIndex);
	void NigeruConfirmWindow_OnComplete();
	bool IsNigeruRequest();
	bool IsInNigeruRequestArea();
	bool CheckInputRequest(float AllowRadius, float AllowPower);
};


// Class JackGame.JackBattleNigeruSequence
// 0x0108 (0x04A0 - 0x0398)
class AJackBattleNigeruSequence : public AActor
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0398(0x00E8) MISSED OFFSET
	bool                                               bNigeruSuccess;                                           // 0x0480(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bNigeruSequenceEnd;                                       // 0x0481(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0482(0x0006) MISSED OFFSET
	class UJackStreamObjectsHolder*                    NigeruEffectAssetHolder;                                  // 0x0488(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       NigeruEffect;                                             // 0x0490(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleNigeruSequence");
		return ptr;
	}


	bool IsNigeruSuccess();
	void ExecEvent(EJackBattleNigeruSequenceEventType EventType, const struct FName& Param);
};


// Class JackGame.JackBattleParameter
// 0x0678 (0x06B0 - 0x0038)
class UJackBattleParameter : public UObject
{
public:
	float                                              FastMode_TimeDilation;                                    // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FastMode_TimeDilationByVeryFast;                          // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFastMode_IncludingMonsterAppear;                         // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFastMode_IncludingResult;                                // 0x0041(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFastMode_IncludingMatineeRenkei;                         // 0x0042(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFastMode_VoiceEnable;                                    // 0x0043(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FastMode_CameraRotationSpeed;                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FastMode_CameraRotationSpeedByVeryFast;                   // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fade_EndFadeOutDefaultTimeByWin;                          // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fade_EndFadeOutDefaultTimeByOther;                        // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Foliage_DitherRanges[0x3];                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Foliage_BattleFieldDitherLowerLimitRadius;                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FJackBattleFieldFoliageDitherInfo>   Foliage_BattleFieldFoliageDitherInfos;                    // 0x0068(0x0010) (Edit, ZeroConstructor)
	float                                              Chara_InjuryRateInterpTime;                               // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FJackKougekiInfo>                    PlayerKougekiInfos;                                       // 0x0080(0x0010) (Edit, ZeroConstructor)
	bool                                               bPlayerMove_TurnToEnable;                                 // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              PlayerMove_SpeedInterpIn;                                 // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerMove_SpeedInterpOut;                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerMove_SpeedInterpAdjustP0;                           // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerMove_SpeedInterpAdjustP1;                           // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerMove_SpeedInterpAdjustP2;                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PlayerMove_SpeedInterpAdjustP3;                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleFieldDirectionForcedAngle;                          // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleFieldDirectionForcedAdjustment;                     // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BattleStartMenu_MenuOpenWaitTime;                         // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackPreparationViewData>            PreparationViewData;                                      // 0x00B8(0x0010) (Edit, ZeroConstructor)
	float                                              ActionAssistMove_Timeout;                                 // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActionAssistMove_RotationSpeed;                           // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActionAssistMove_RotationDurationTime;                    // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActionBackMove_BackJump;                                 // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActionBackMove_IgnoreMeireisasero;                       // 0x00D5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x00D6(0x0002) MISSED OFFSET
	float                                              ActionBackMove_BackJumpThresholdLength;                   // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActionBackMove_BackJumpLimitLength;                       // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActionBackMove_BackJumpForceByAutoCamera;                // 0x00E0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	float                                              ActionBackMove_BackJumpForceThresholdLength;              // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActionBackMove_ActionCompleteWaitIfBackJumpPlayingByAutoCamera;// 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActionBackMove_ActionPlayWaitIfAnyBackJumpPlayingByAutoCamera;// 0x00E9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bActionBackMove_InvalidRelocateIfBackJumpPlayingByAutoCamera;// 0x00EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHiddenFriends;                                           // 0x00EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSimpleCamera_GroupMoveDisable;                           // 0x00EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSimpleCamera_TeleportToHomePositionEnable;               // 0x00ED(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSimpleCamera_RenzokuKoudouTeleportDisable;               // 0x00EE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSimpleCamera_RenzokuKoudouTeleportDisableByBattleCommand;// 0x00EF(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSimpleCamera_LookAtDisable;                              // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              PrgCamera_ScorePenalty_Overlap;                           // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_81;                                // 0x00F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_51;                                // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenaltyTurnChara_51;                       // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_MarginSizeAll;                     // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_MarginSizeH;                       // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_MarginSizeUnder;                   // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_MarginBalanceH;                    // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_MarginBalanceW;                    // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_TurnCharaDist;                     // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_PreCamera;                         // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_FrontDiffDist;                     // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_BirdDiffDist;                      // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ScorePenalty_DiagonalDiffDist;                  // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Front_FixDist;                                  // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Front_DistOfs;                                  // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Front_YawAdd;                                   // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Front_PitchAdd;                                 // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Front_GroundMargin;                             // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PrgCamera_Bird_LotPar;                                    // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PrgCamera_Bird_FixDist;                                   // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PrgCamera_Bird_YawVariation;                              // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PrgCamera_Diagonal_LotFrontPar;                           // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PrgCamera_Diagonal_LotTrackingPar;                        // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_NoTrackingDist;                        // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           PrgCamera_Diagonal_CurveFunc;                             // 0x0158(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                PrgCamera_Diagonal_LotBestMax;                            // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PrgCamera_Diagonal_PitchVariation;                        // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_DistOffsetMax;                         // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_YawMin;                                // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_MinZ;                                  // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_TrackingMinZ;                          // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_NoLowMinZ;                             // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_TrackingNoLowMinZ;                     // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Diagonal_YawAdd;                                // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PrgCamera_Socket_OffsetPos;                               // 0x0180(0x000C) (Edit, IsPlainOldData)
	int                                                PrgCamera_Socket_LotPar;                                  // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Anim_MaxTime;                                   // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Anim_YawAdd;                                    // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_Anim_DistAdd;                                   // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_GroundMargin;                                   // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_CollisionSphereRadius;                          // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_PushOutMargin;                                  // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrgCamera_ShrinkLotPar;                                   // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TArray<struct FJackAutoCameraScoreRect>            PrgCamera_PCCameraScoreRects;                             // 0x01B0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               PrgCamera_Diagonal_MainViewMonsters;                      // 0x01C0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               PrgCamera_Diagonal_HorizontalViewMonsters;                // 0x01D0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               PrgCamera_BirdMonsters;                                   // 0x01E0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               PrgCamera_CameraBlockMonsters;                            // 0x01F0(0x0010) (Edit, ZeroConstructor)
	float                                              Nigeru_BaseSuccessPer;                                    // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Nigeru_KiyousaHosei;                                      // 0x0204(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Nigeru_CertainKouSyuThreshold;                            // 0x0208(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x020C(0x0004) MISSED OFFSET
	TArray<float>                                      Nigeru_SaiteiHosyouSuccessPerArray;                       // 0x0210(0x0010) (Edit, ZeroConstructor)
	float                                              Action_NifuramuDitherTime;                                // 0x0220(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_InoriNoYubiwaBreakProb;                            // 0x0224(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_BunnyNoMamoriActionHitDelayTime;                   // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_BunnyNoMamoriActionFadeAlpha;                      // 0x022C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_BunnyNoMamoriActionFadeOutTime;                    // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_BunnyNoMamoriActionFadeInTime;                     // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Action_TateGuardSEID_Player;                              // 0x0238(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Action_TateGuardSEID_Monster;                             // 0x0240(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_FailShotMotionLoopTime;                            // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_FailMessageDelayTime_Default;                      // 0x024C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_FailMessageDelayTime_DefaultByItem;                // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Action_FailMessageDelayTime_Exclusive;                    // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NakamaYobi_CheckCapsuleRadius;                            // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x025C(0x0004) MISSED OFFSET
	TArray<struct FName>                               Renkei_MemorizeRenkeiIDs;                                 // 0x0260(0x0010) (Edit, ZeroConstructor)
	float                                              TurnOrder_SubayasaHoseiMin_Player;                        // 0x0270(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnOrder_SubayasaHoseiMax_Player;                        // 0x0274(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnOrder_SubayasaHoseiMin_Monster;                       // 0x0278(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnOrder_SubayasaHoseiMax_Monster;                       // 0x027C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TurnStartOddEffect_WaitSecondMin;                         // 0x0280(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	struct FName                                       TurnStartOddEffect_ActionCameraID_Player;                 // 0x0288(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       TurnStartOddEffect_ActionCameraID_Monster;                // 0x0290(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Mitoreru_HanteiOddEffectID;                               // 0x0298(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Mitoreru_OddEffectID;                                     // 0x02A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Mitoreru_CalcBaseParameter1;                              // 0x02A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Mitoreru_CalcBaseParameter2;                              // 0x02AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Mitoreru_CalcBaseClampMin;                                // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Mitoreru_CalcBaseClampMax;                                // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       HazukasiiNoroi_OddEffectIDs[0xA];                         // 0x02B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Hazukasiinoroi_MiryouMukou;                               // 0x0308(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Hazukasiinoroi_KonranMukou;                               // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Hazukasiinoroi_NemuriMukou;                               // 0x0310(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0314(0x0004) MISSED OFFSET
	TArray<struct FJackHazukasiiNoroiMessageInfo>      Hazukasiinoroi_RandomTexts;                               // 0x0318(0x0010) (Edit, ZeroConstructor)
	float                                              OddEffect_Konran_MeityuuHoseiPer;                         // 0x0328(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OddEffect_Miryou_KougekiBairituHoseiPer;                  // 0x032C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      OddEffect_NakamaTurnSkip_KoudouPerArray;                  // 0x0330(0x0010) (Edit, ZeroConstructor)
	struct FJackHitStopPresetInfo                      HitStop_PresetInfos[0x17];                                // 0x0340(0x0002) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x036E(0x0002) MISSED OFFSET
	struct FJackHitCameraShakePresetInfo               HitCameraShake_PresetInfos[0x17];                         // 0x0370(0x0010) (Edit)
	TArray<float>                                      Hate_Ranks;                                               // 0x04E0(0x0010) (Edit, ZeroConstructor)
	int                                                AI_CalcActionStrideTableCountMax;                         // 0x04F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_CalcScoreTimeMax;                                      // 0x04F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckZoneCoefficient;                             // 0x04F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckNemuriCoefficient;                           // 0x04FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckNemuriCorrectCoefficient;                    // 0x0500(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckMetalCoefficient;                            // 0x0504(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                AI_ScoreCheckMetalExpCoefficient;                         // 0x0508(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckContinuedDamageCoefficient;                  // 0x050C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAttackUpEnableCoefficient;                   // 0x0510(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckDazzleCureEnableCoefficient;                 // 0x0514(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckDazzleCorrectCoefficient;                    // 0x0518(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckCRACoefficient_Zaoriku;                      // 0x051C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckCRACoefficient_Zaoraru;                      // 0x0520(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckCRACoefficient_FukkatuNoTue;                 // 0x0524(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckCRACoefficient_SeijaNoUta;                   // 0x0528(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckCRACoefficient_Megazaru;                     // 0x052C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckCRACoefficient_Etc;                          // 0x0530(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckTRACoefficient_Zaoriku;                      // 0x0534(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckTRACoefficient_Zaoraru;                      // 0x0538(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckTRACoefficient_FukkatuNoTue;                 // 0x053C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckTRACoefficient_SeijaNoUta;                   // 0x0540(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckTRACoefficient_Megazaru;                     // 0x0544(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckTRACoefficient_Etc;                          // 0x0548(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAHHCoefficient_Rihoimi;                      // 0x054C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAHHCoefficient_Ribehoimi;                    // 0x0550(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAHHCoefficient_Ribehoimu;                    // 0x0554(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAHHCoefficient_IyasiNoAme;                   // 0x0558(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAHHCoefficient_RamudaNoInori;                // 0x055C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAHHCoefficient_RamudaNoInori_Otona;          // 0x0560(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckAtkStrRankCoefficient[0x4];                  // 0x0564(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckDefStrRankCoefficient[0x4];                  // 0x0574(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckDefStrSlideChangeCoefficient[0x5];           // 0x0584(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AI_ScoreCheckUseMpImpactCoefficient[0x5];                 // 0x0598(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Coffin_RotationYawRandomWidth;                            // 0x05AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_YarukiVoiceID;                                   // 0x05B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_TyuuikankiVoiceID;                               // 0x05B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_ReiseiVoiceID;                                   // 0x05C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_AseriVoiceID;                                    // 0x05C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_IkariVoiceID;                                    // 0x05D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_KansyaVoiceID;                                   // 0x05D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_YorokobiVoiceID;                                 // 0x05E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       Fukidasi_KonranVoiceID;                                   // 0x05E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fukidasi_PerTimming;                                      // 0x05F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fukidasi_PerTwoCharacter;                                 // 0x05F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Fukidasi_DerayTime;                                       // 0x05F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x05FC(0x0004) MISSED OFFSET
	TArray<struct FJackActionCompactMessageInfo>       ActionCompactMessages;                                    // 0x0600(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackDamageCompactMessageInfo>       DamageCompactMessages;                                    // 0x0610(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackOddEffectCompactMessageInfo>    OddEffectCompactMessages;                                 // 0x0620(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackPafuPafuMessageInfo>            PafuPafuMukouMessages;                                    // 0x0630(0x0010) (Edit, ZeroConstructor)
	bool                                               bHansyaValidity_Mahosute;                                 // 0x0640(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHansyaValidity_BukiTateGuard;                            // 0x0641(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHansyaValidity_DamageKanzenGuard;                        // 0x0642(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHansyaValidity_KaisinKanzenGuard;                        // 0x0643(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUkenagasiValidity_Counter;                               // 0x0644(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUkenagasiValidity_Mikawasi;                              // 0x0645(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUkenagasiValidity_BukiTateGuard;                         // 0x0646(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUkenagasiValidity_DamageKanzenGuard;                     // 0x0647(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUkenagasiValidity_ButuriKanzenGuard;                     // 0x0648(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUkenagasiValidity_KaisinKanzenGuard;                     // 0x0649(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBattleMonsterCollisionVisible;                           // 0x064A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x5];                                       // 0x064B(0x0005) MISSED OFFSET
	TArray<struct FJackActionBalloonDelayInfo>         BalloonDelayInfos;                                        // 0x0650(0x0010) (Edit, ZeroConstructor)
	float                                              KnockBack_SmallRate;                                      // 0x0660(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              KnockBack_NormalRate;                                     // 0x0664(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              KnockBack_PlayerDamageSS_BlendRate;                       // 0x0668(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	TArray<struct FName>                               RotationToAttackerLocationMonsterIDs;                     // 0x0670(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData16[0x18];                                      // 0x0680(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackBattleParameter.Class_NigeruEffectClass
	unsigned char                                      UnknownData17[0x18];                                      // 0x0698(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackBattleParameter.Class_ResultZenmetuClass

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleParameter");
		return ptr;
	}


	int GetAICalcActionStrideTableCountMax();
};


// Class JackGame.JackPlayerController
// 0x01F0 (0x0930 - 0x0740)
class AJackPlayerController : public APlayerController
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0740(0x0028) MISSED OFFSET
	class UJackActionCursorControllerComponent*        CachedActionCursorControllerComponent;                    // 0x0768(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    ReceiveMoveCompleted;                                     // 0x0770(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0780(0x0020) MISSED OFFSET
	struct FRotator                                    InitialControlRotation;                                   // 0x07A0(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              ControlRotationInertia;                                   // 0x07AC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE0];                                      // 0x07B0(0x00E0) MISSED OFFSET
	float                                              AutoRunCancelThreshould;                                  // 0x0890(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x9C];                                      // 0x0894(0x009C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerController");
		return ptr;
	}


	void SetSplinePathCameraParams(float CameraUpdateLength, float UpdateRateMaxLength, float MaxSpeed);
	void SetSplinePathCameraOffset(const struct FVector& CameraOffset);
	void SetSplinePathCameraFirstPointFixed(bool bFixed);
	void SetSplinePathCameraData(class AJackCharacter* Actor, class USplineComponent* Spline);
	void SetFriendTalkCameraData(const struct FVector& Location, const struct FRotator& Rotation);
	void SetFixCameraNowLocationRotation();
	void SetFixCameraNoActor(const struct FVector& CameraLocation, const struct FVector& LookAtLocation);
	void SetFixCamera(const struct FVector& CameraLocation, class AJackCharacter* Actor, const struct FVector& LookAtOffset);
	void SetControlRotationWithInterp(const struct FRotator& Rotation, float InterpSeconds, bool bRelativeRotation);
	void SetChangeTimeCameraParam(const struct FVector& InActorOffset, float InPitchAngle);
	void SetChangeTimeCameraMoveStartToEnd(float Sec);
	void SetChangeTimeCameraMoveEndToStart(float Sec);
	void SetCameraOverRideCheckOffInnterArmLength(float OverrideArmLength);
	void SetCameraCollisionCheckDisable(TEnumAsByte<EJackCameraMode> CameraMode, bool bDisable);
	void SetCameraArmLength(float DesiredArmLength, float InterpSeconds);
	void SetBackPlayerCameraStartLocation(const struct FVector& StartLocation);
	void SetBackPlayerCamera(const struct FRotator& AngleMax, const struct FRotator& AngleMin, float CenterYaw);
	void PushCameraMode(TEnumAsByte<EJackCameraMode> InMode, float InterpSeconds, bool bKeepOldCameraView);
	void PopCameraMode(TEnumAsByte<EJackCameraMode> InMode, float InterpSeconds);
	void PopAllCameraMode(float InterpSeconds);
	void OnEndTalk();
	void OnBeginTalk(class AActor* InOther, bool bInLocationUpdate);
	void NotifyTeleportToCamera();
	TEnumAsByte<EPathFollowingRequestResult> MoveToLocation(const struct FVector& Dest, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bProjectDestinationToNavigation, bool bCanStrafe, class UClass* FilterClass);
	TEnumAsByte<EPathFollowingRequestResult> MoveToActor(class AActor* Goal, float AcceptanceRadius, bool bStopOnOverlap, bool bUsePathfinding, bool bCanStrafe, class UClass* FilterClass);
	void Latent_ChangeTimeCameraStartStop(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float Sec);
	void Latent_ChangeTimeCameraEndStop(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float Sec);
	bool IsOperationToSinkWhenPlayerIsFish();
	TEnumAsByte<EPathFollowingStatus> GetMoveStatus();
	class AJackHUD* GetJackHUD();
	void EnableIndoorCamera(float InterpSec);
	void DisableIndoorCamera(bool bForce, float InterpSec);
};


// Class JackGame.JackFieldPlayerController
// 0x0200 (0x0B30 - 0x0930)
class AJackFieldPlayerController : public AJackPlayerController
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0930(0x0010) MISSED OFFSET
	class UMaterialParameterCollection*                MPC_GroundAffect;                                         // 0x0940(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAffectPlayerMarker;                                      // 0x0948(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAffectPossessedConditionInTheAir;                        // 0x0949(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHandleControlGuideVisibility;                            // 0x094A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x15];                                      // 0x094B(0x0015) MISSED OFFSET
	bool                                               bCanEnterPhotoMode;                                       // 0x0960(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0961(0x0003) MISSED OFFSET
	float                                              ActionGuideVisibleRate;                                   // 0x0964(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0968(0x0028) MISSED OFFSET
	class UJackVehicleControllerComponent*             VehicleControllerComponent;                               // 0x0990(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackVehicleRiderControllerComponent*        VehicleRiderControllerComponent;                          // 0x0998(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AJackVehicle*                                StoredVehicle;                                            // 0x09A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x188];                                     // 0x09A8(0x0188) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFieldPlayerController");
		return ptr;
	}


	void Yubibue();
	void Taimatu();
	void PhotoMode();
	void OnPlayerMovementModeChanged(class ACharacter* InCharacter, TEnumAsByte<EMovementMode> PrevMovementMode, unsigned char PreviousCustomMode);
	void OnPawnTeleportSucceeded();
	void OnOpenActionGuideHelp();
	void OnHideControlGuideUIChanged(bool bHide);
	void OnDisplayActionGuide();
	void OnCloseActionGuideHelp();
	void OnAutoRunDiableChanged(bool bDisable);
	void NakamaKaiwa();
};


// Class JackGame.JackBattlePlayerController
// 0x01A0 (0x0CD0 - 0x0B30)
class AJackBattlePlayerController : public AJackFieldPlayerController
{
public:
	TWeakObjectPtr<class AJackPlayableCharacter>       FieldPlayableCharacter;                                   // 0x0B30(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0B38(0x0080) MISSED OFFSET
	bool                                               bDebugDrawEnabled;                                        // 0x0BB8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0BB9(0x0007) MISSED OFFSET
	class UJackActionCameraParameter*                  JackActionCameraParameter;                                // 0x0BC0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x108];                                     // 0x0BC8(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattlePlayerController");
		return ptr;
	}


	bool IsEncountable();
};


// Class JackGame.JackBattleResultInfo
// 0x0040 (0x0078 - 0x0038)
class UJackBattleResultInfo : public UObject
{
public:
	TEnumAsByte<EJackBattleResult>                     BattleResultType;                                         // 0x0038(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                RoundCount;                                               // 0x003C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PlayerPartyTotalTurnCount;                                // 0x0040(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                DropExp;                                                  // 0x0044(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FJackBattleResultExpInfo>            CharacterExpInfos;                                        // 0x0048(0x0010) (Edit, ZeroConstructor, EditConst)
	int                                                SibariExpMonsterLevel;                                    // 0x0058(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                DropGold;                                                 // 0x005C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FJackDropItemStructs>                DropItem;                                                 // 0x0060(0x0010) (Edit, ZeroConstructor, EditConst)
	TEnumAsByte<EJackVehicleModelId>                   DropVehicle;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleResultInfo");
		return ptr;
	}

};


// Class JackGame.JackBattleResultParameter
// 0x0038 (0x0070 - 0x0038)
class UJackBattleResultParameter : public UObject
{
public:
	float                                              LevelUpCamera_InterpSeconds;                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<struct FJackBattleResultFormations>         PlayerFormation;                                          // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackBattleResultFormations>         GuestFormation;                                           // 0x0050(0x0010) (Edit, ZeroConstructor)
	float                                              FormationRandom;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DropItemDelayTime;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLevelUpRecover;                                          // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleResultParameter");
		return ptr;
	}

};


// Class JackGame.JackBattleResultSequence
// 0x0138 (0x04D0 - 0x0398)
class AJackBattleResultSequence : public AActor
{
public:
	unsigned char                                      UnknownData00[0x128];                                     // 0x0398(0x0128) MISSED OFFSET
	class UJackStreamObjectsHolder*                    ResultZenmetuAssetHolder;                                 // 0x04C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleResultSequence");
		return ptr;
	}

};


// Class JackGame.JackBattleResultZenmetu
// 0x0008 (0x03A0 - 0x0398)
class AJackBattleResultZenmetu : public AActor
{
public:
	bool                                               bPlaying;                                                 // 0x0398(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRequestEnd;                                              // 0x0399(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x039A(0x0002) MISSED OFFSET
	int                                                Scene;                                                    // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleResultZenmetu");
		return ptr;
	}


	void ExecEvent(EJackBattleResultZenmetuEventType EventType, const struct FName& Param);
};


// Class JackGame.JackBattleSelectionEffect
// 0x0018 (0x0068 - 0x0050)
class UJackBattleSelectionEffect : public UJackTickableGameObject
{
public:
	struct FName                                       SelectionActionID;                                        // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<struct FJackBattleSelectionCharacterInfo>   SelectionCharacterInfos;                                  // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleSelectionEffect");
		return ptr;
	}

};


// Class JackGame.JackBattleSnowman
// 0x0010 (0x1100 - 0x10F0)
class AJackBattleSnowman : public AJackCharacter
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleSnowman");
		return ptr;
	}

};


// Class JackGame.JackBattleStatus
// 0x00F8 (0x0130 - 0x0038)
class UJackBattleStatus : public UObject
{
public:
	bool                                               bBattleInitializeCall;                                    // 0x0038(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleInitializeComplete;                                // 0x0039(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattlePostInitializeBPComplete;                          // 0x003A(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bMonsterAppearComplete;                                   // 0x003B(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleStartCall;                                         // 0x003C(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleEndCall;                                           // 0x003D(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleEndBPComplete;                                     // 0x003E(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleStartMenu_Complete;                                // 0x003F(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleStartMenu_Tatakau;                                 // 0x0040(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bBattleStartMenu_Nigeru;                                  // 0x0041(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSakusenChange_End;                                       // 0x0042(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bExecuteTurn_SelectComplete;                              // 0x0043(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bExecuteTurn_Complete;                                    // 0x0044(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bExecuteTurn_SakusenNigeru;                               // 0x0045(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bExecuteTurn_ChangeToAI;                                  // 0x0046(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bExecuteTurn_MemberChange;                                // 0x0047(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSkipCrashEffect;                                         // 0x0048(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSkipMonsterAppear;                                       // 0x0049(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSkipResult;                                              // 0x004A(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bInterruptSakusenMenu;                                    // 0x004B(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bNigeruSuccess;                                           // 0x004C(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bFinishBlowComplete;                                      // 0x004D(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bRecentlyFastMode;                                        // 0x004E(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleSpeedMode                               BattleSpeedMode;                                          // 0x004F(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleCameraMode                              BattleCameraMode;                                         // 0x0050(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EJackBattleResult>                     BattleResultType;                                         // 0x0051(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackBattleNigeruConditionType                     NigeruConditionType;                                      // 0x0052(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bBattleFieldNigeruInvalid;                                // 0x0053(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FJackDropItemStructs>                DropItem;                                                 // 0x0058(0x0010) (Edit, ZeroConstructor, EditConst)
	TEnumAsByte<EJackVehicleModelId>                   DropVehicle;                                              // 0x0068(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	int                                                RoundCount;                                               // 0x006C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NakamaTurnSkipSharedTurnCount;                            // 0x0070(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                NigeruCount;                                              // 0x0074(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FJackOddEffect_OnTurnStartResult            OddEffect_OnTurnStartResult;                              // 0x0078(0x0028) (Edit, EditConst)
	struct FJackOddEffect_OnTurnEndResult              OddEffect_OnTurnEndResult;                                // 0x00A0(0x0020) (Edit, EditConst)
	TArray<TWeakObjectPtr<class AJackCharacter>>       ZoneStartCharacterArray;                                  // 0x00C0(0x0010) (Edit, ZeroConstructor, EditConst)
	int                                                HaouZanTeachP007;                                         // 0x00D0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	TArray<struct FName>                               UsedRenkeiIDs;                                            // 0x00D8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TArray<struct FJackBattleExtraToubatuCountInfo>    ExtraToubatuMonsters;                                     // 0x00E8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	TWeakObjectPtr<class AJackCharacter>               PlayedTurnCharacterEffectCharacter;                       // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	struct FJackBattleFieldFoliageDitherInfo           BattleFieldFoliageDitherInfo;                             // 0x0100(0x0028) (Edit, DisableEditOnTemplate, Transient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0128(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleStatus");
		return ptr;
	}


	void IncrementHaouZanTeachP007();
};


// Class JackGame.JackBattleToubatuEffect
// 0x00F8 (0x0490 - 0x0398)
class AJackBattleToubatuEffect : public AActor
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0398(0x00E8) MISSED OFFSET
	bool                                               bPlayCompleteRequest;                                     // 0x0480(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0481(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleToubatuEffect");
		return ptr;
	}


	void PlayComplete();
};


// Class JackGame.JackBattleTurnManager
// 0x0338 (0x0370 - 0x0038)
class UJackBattleTurnManager : public UObject
{
public:
	TWeakObjectPtr<class UJackGameCharacter>           TurnGameCharacter;                                        // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TWeakObjectPtr<class UJackGameCharacter>           PrevTurnGameCharacter;                                    // 0x0040(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x328];                                     // 0x0048(0x0328) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleTurnManager");
		return ptr;
	}


	bool RemoveTurnQueue(class UJackGameCharacter* RemoveGameCharacter);
	void InsertTurnQueue(class UJackGameCharacter* InsertGameCharacter, bool bHead, bool bRootTurn);
};


// Class JackGame.JackTaskHolder
// 0x0010 (0x0060 - 0x0050)
class UJackTaskHolder : public UJackTickableGameObject
{
public:
	TArray<class UJackTask*>                           Tasks;                                                    // 0x0050(0x0010) (Edit, ExportObject, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTaskHolder");
		return ptr;
	}

};


// Class JackGame.JackBattleInterruptActionRequest
// 0x0308 (0x0340 - 0x0038)
class UJackBattleInterruptActionRequest : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FJackActionPlayParam                        ActionPlayParam;                                          // 0x0040(0x0290) (Edit, BlueprintVisi)
	unsigned char                                      UnknownData01[0x70];                                      // 0x02D0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleInterruptActionRequest");
		return ptr;
	}

};


// Class JackGame.JackBattleTypes
// 0x0000 (0x0038 - 0x0038)
class UJackBattleTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleTypes");
		return ptr;
	}

};


// Class JackGame.JackBattleVoicePlayer
// 0x0180 (0x01D0 - 0x0050)
class UJackBattleVoicePlayer : public UJackTickableGameObject
{
public:
	unsigned char                                      UnknownData00[0xE0];                                      // 0x0050(0x00E0) MISSED OFFSET
	TWeakObjectPtr<class AJackCharacter>               OwnerCharacter;                                           // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	struct FName                                       DirectVoicePresetID;                                      // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	bool                                               bSound2D;                                                 // 0x0140(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0141(0x0007) MISSED OFFSET
	struct FName                                       RequestedVoiceID;                                         // 0x0148(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0150(0x0008) MISSED OFFSET
	struct FName                                       PlayingVoiceID;                                           // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0160(0x0008) MISSED OFFSET
	float                                              PlayingRemainDelayTime;                                   // 0x0168(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	TWeakObjectPtr<class UAudioComponent>              PlayingAudioComponent;                                    // 0x016C(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0174(0x0004) MISSED OFFSET
	TMap<struct FName, class UJackStreamObjectsHolder*> VoiceResourceObjectsHolders;                              // 0x0178(0x0050) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient)
	unsigned char                                      UnknownData05[0x8];                                       // 0x01C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleVoicePlayer");
		return ptr;
	}

};


// Class JackGame.JackBattleVoiceResourceChanger
// 0x0070 (0x00C0 - 0x0050)
class UJackBattleVoiceResourceChanger : public UJackTickableGameObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) MISSED OFFSET
	TArray<class UJackFriendGameCharacter*>            ReloadFriendGameCharacters;                               // 0x00A0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleVoiceResourceChanger");
		return ptr;
	}

};


// Class JackGame.JackBattleWeapon
// 0x0118 (0x0150 - 0x0038)
class UJackBattleWeapon : public UObject
{
public:
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0038(0x00E8) MISSED OFFSET
	TWeakObjectPtr<class AJackCharacter>               OwnerCharacter;                                           // 0x0120(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bInitialized;                                             // 0x0128(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUnsheathe;                                               // 0x0129(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBougyoStart;                                             // 0x012A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBougyoIdle;                                              // 0x012B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	TArray<struct FName>                               MontageKeys;                                              // 0x0130(0x0010) (Edit, ZeroConstructor)
	EJackBattleWeaponMontageKey                        CurrentDefaultSlotMontageKeyType;                         // 0x0140(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0141(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleWeapon");
		return ptr;
	}


	void OnOwnerPlayAnimMontageByKey(const struct FName& AnimMontageKey, class UAnimMontage* AnimMontage);
	void OnOwnerMontageStarted(class UAnimMontage* OwnerMontage);
};


// Class JackGame.JackBattleZoneParameter
// 0x00F8 (0x0130 - 0x0038)
class UJackBattleZoneParameter : public UObject
{
public:
	int                                                Common_KeepRemainBattle;                                  // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FJackZoneStartParameter                     ZoneStartParameter_Friend;                                // 0x0040(0x0020) (Edit)
	struct FJackZoneStartParameter                     ZoneStartParameter_Monster;                               // 0x0060(0x0020) (Edit)
	TArray<struct FJackZonePointInvokeInfo>            Invoke_ZonePointInvokeInfos;                              // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackZonePointInvokeInfo>            Invoke_ZonePointInvokeInfos_Monster;                      // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackCharacterZonePointInfo>         AddBattleStart_CharacterZonePoints;                       // 0x00A0(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      AddTurnStart_ZoneCharacterCountZonePoints_Alive1;         // 0x00B0(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      AddTurnStart_ZoneCharacterCountZonePoints_Alive2;         // 0x00C0(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      AddTurnStart_ZoneCharacterCountZonePoints_Alive3;         // 0x00D0(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      AddTurnStart_ZoneCharacterCountZonePoints_Monster;        // 0x00E0(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      AddTurnStart_ProgressTurnZonePoints;                      // 0x00F0(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      AddTurnStart_ProgressTurnZonePoints_Monster;              // 0x0100(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackDamageZonePointInfo>            AddDamage_DamageZonePointInfos;                           // 0x0110(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackDamageZonePointInfo>            AddDamage_DamageZonePointInfos_Monster;                   // 0x0120(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleZoneParameter");
		return ptr;
	}

};


// Class JackGame.JackBGMControlTrack
// 0x0038 (0x00E8 - 0x00B0)
class UJackBGMControlTrack : public UInterpTrackFloatBase
{
public:
	class UDataTable*                                  BGMDataTable;                                             // 0x00B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceDQ11BGM;                                            // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	TArray<class USoundBase*>                          PreLoadBGM;                                               // 0x00C0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackBGMControlTrackKey>             KeyArray;                                                 // 0x00D0(0x0010) (ZeroConstructor)
	bool                                               bIsStartedCSSkip;                                         // 0x00E0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBGMControlTrack");
		return ptr;
	}

};


// Class JackGame.JackBGMControlTrackInst
// 0x0010 (0x0048 - 0x0038)
class UJackBGMControlTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBGMControlTrackInst");
		return ptr;
	}

};


// Class JackGame.JackBlendAnimOverrideTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackBlendAnimOverrideTrack : public UInterpTrack
{
public:
	TArray<struct FJackBlendAnimOverrideTrackKeyInfo>  KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBlendAnimOverrideTrack");
		return ptr;
	}

};


// Class JackGame.JackBlendAnimOverrideTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackBlendAnimOverrideTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBlendAnimOverrideTrackInst");
		return ptr;
	}

};


// Class JackGame.JackBlendAnimPlayTrack
// 0x0018 (0x00E8 - 0x00D0)
class UJackBlendAnimPlayTrack : public UInterpTrackAnimControl
{
public:
	TArray<struct FJackBlendAnimPlayTrackKey>          AnimExtraKey;                                             // 0x00D0(0x0010) (ZeroConstructor)
	float                                              DefaultInterpSec;                                         // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBlendAnimPlayTrack");
		return ptr;
	}

};


// Class JackGame.JackBlendAnimPlayTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackBlendAnimPlayTrackInst : public UInterpTrackInstAnimControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBlendAnimPlayTrackInst");
		return ptr;
	}

};


// Class JackGame.JackBowgunTargetComponent
// 0x0010 (0x0138 - 0x0128)
class UJackBowgunTargetComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnHitArrow;                                               // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBowgunTargetComponent");
		return ptr;
	}


	void OnInteractCallback(class AActor* OtherActor, class UJackInteractiveActorComponent* InteractiveActorComponent);
	void OnHitArrowSignature__DelegateSignature();
};


// Class JackGame.JackBowgunTargetManager
// 0x0010 (0x03A8 - 0x0398)
class AJackBowgunTargetManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0398(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBowgunTargetManager");
		return ptr;
	}

};


// Class JackGame.JackBoxComponent
// 0x0020 (0x0780 - 0x0760)
class UJackBoxComponent : public UBoxComponent
{
public:
	struct FString                                     AutoAttachComponentName;                                  // 0x0760(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       AutoAttachSocketName;                                     // 0x0770(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AutoAttachType;                                           // 0x0778(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0779(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBoxComponent");
		return ptr;
	}

};


// Class JackGame.JackBunsinComponent
// 0x0010 (0x01B0 - 0x01A0)
class UJackBunsinComponent : public UJackCharacterComponent
{
public:
	TArray<TWeakObjectPtr<class AJackCharacter>>       BunsinActors;                                             // 0x01A0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBunsinComponent");
		return ptr;
	}


	class AJackCharacter* SpawnBunsinActor(const struct FTransform& Transform);
};


// Class JackGame.JackCollideEffect
// 0x01B0 (0x0200 - 0x0050)
class UJackCollideEffect : public UJackTickableGameObject
{
public:
	struct FJackCollideEffects                         DefaultEffects;                                           // 0x0050(0x0078) (Edit, DisableEditOnInstance)
	struct FName                                       ModifyTexturePosition;                                    // 0x00C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ModifyTextureRotation;                                    // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ModifyColor;                                              // 0x00D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class UParticleSystemComponent>     Emitter;                                                  // 0x00E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UAudioComponent>              Audio;                                                    // 0x00E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UObject>                      EffectOwner;                                              // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x108];                                     // 0x00F8(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCollideEffect");
		return ptr;
	}

};


// Class JackGame.JackBurstEffect
// 0x0048 (0x0248 - 0x0200)
class UJackBurstEffect : public UJackCollideEffect
{
public:
	class UClass*                                      BurstHitEffect;                                           // 0x0200(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BurstAttackHitEffect;                                     // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StartSize;                                                // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndSize;                                                  // 0x0214(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BurstDelayStartTime;                                      // 0x0218(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BurstDulation;                                            // 0x021C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreOwner;                                             // 0x0220(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	float                                              BurstSphereSize;                                          // 0x0224(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BurstTimer;                                               // 0x0228(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               AttachedActors;                                           // 0x0230(0x0010) (ZeroConstructor, Transient)
	bool                                               bHitTimingCallbackCalled;                                 // 0x0240(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0241(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBurstEffect");
		return ptr;
	}

};


// Class JackGame.JackCameraBattleResult
// 0x0010 (0x03A8 - 0x0398)
class AJackCameraBattleResult : public AActor
{
public:
	class USceneComponent*                             SceneComponent;                                           // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCameraAnimInst*                             CameraAnimInst;                                           // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCameraBattleResult");
		return ptr;
	}

};


// Class JackGame.JackCameraData
// 0x0008 (0x0040 - 0x0038)
class UJackCameraData : public UObject
{
public:
	float                                              FieldOfView;                                              // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCameraData");
		return ptr;
	}

};


// Class JackGame.JackCameraLightDisableTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackCameraLightDisableTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCameraLightDisableTrack");
		return ptr;
	}

};


// Class JackGame.JackCameraLightDisableTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackCameraLightDisableTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCameraLightDisableTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCameraLightEnableTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackCameraLightEnableTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCameraLightEnableTrack");
		return ptr;
	}

};


// Class JackGame.JackCameraLightEnableTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackCameraLightEnableTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCameraLightEnableTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCapsuleComponent
// 0x0020 (0x0780 - 0x0760)
class UJackCapsuleComponent : public UCapsuleComponent
{
public:
	struct FString                                     AutoAttachComponentName;                                  // 0x0760(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       AutoAttachSocketName;                                     // 0x0770(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AutoAttachType;                                           // 0x0778(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0779(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCapsuleComponent");
		return ptr;
	}

};


// Class JackGame.JackCaptionBlendRateTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackCaptionBlendRateTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCaptionBlendRateTrack");
		return ptr;
	}

};


// Class JackGame.JackCaptionBlendRateTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackCaptionBlendRateTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCaptionBlendRateTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCaptionTrack
// 0x0118 (0x01A8 - 0x0090)
class UJackCaptionTrack : public UInterpTrack
{
public:
	TArray<struct FJackCaptionTrackKey>                CaptionTrack;                                             // 0x0090(0x0010) (ZeroConstructor)
	TMap<struct FString, class USoundBase*>            VoiceResouce;                                             // 0x00A0(0x0050) (ZeroConstructor, Transient)
	bool                                               bIsVoiceLoadComplete;                                     // 0x00F0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET
	TMap<struct FString, class UDataTable*>            LipDataTable;                                             // 0x00F8(0x0050) (ZeroConstructor, Transient)
	bool                                               bIsLipDataTableLoadComplete;                              // 0x0148(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	TMap<struct FString, class UDataTable*>            VoiceTimelineDataTable;                                   // 0x0150(0x0050) (ZeroConstructor, Transient)
	bool                                               bIsVoiceTimelineDataTableLoadComplete;                    // 0x01A0(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCaptionTrack");
		return ptr;
	}

};


// Class JackGame.JackCaptionTrackExecutor
// 0x02C8 (0x0660 - 0x0398)
class AJackCaptionTrackExecutor : public AActor
{
public:
	TArray<struct FJackCaptionTrackShowSerifuInfo>     ShowRequestArray;                                         // 0x0398(0x0010) (ZeroConstructor)
	TArray<struct FJackCaptionTrackSynchroInfo>        SynchroRequestArray;                                      // 0x03A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0xD8];                                      // 0x03B8(0x00D8) MISSED OFFSET
	class UJackCutSceneTextController*                 TextController;                                           // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0498(0x0008) MISSED OFFSET
	struct FJackLipSyncController                      LipController;                                            // 0x04A0(0x0190)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0630(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCaptionTrackExecutor");
		return ptr;
	}

};


// Class JackGame.JackCaptionTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackCaptionTrackInst : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCaptionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackColorFadeTrack
// 0x0008 (0x00D0 - 0x00C8)
class UJackColorFadeTrack : public UInterpTrackFade
{
public:
	TEnumAsByte<EJackFadeColor>                        FadeColorType;                                            // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EJackCutSceneFadeLayer                             FadeLayer;                                                // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00CA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackColorFadeTrack");
		return ptr;
	}

};


// Class JackGame.JackCategoryFadeTrack
// 0x0010 (0x00E0 - 0x00D0)
class UJackCategoryFadeTrack : public UJackColorFadeTrack
{
public:
	TArray<TEnumAsByte<EJackFadeTime>>                 FadeTimeCategorys;                                        // 0x00D0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCategoryFadeTrack");
		return ptr;
	}

};


// Class JackGame.JackCategoryHiddenManager
// 0x0458 (0x07F0 - 0x0398)
class AJackCategoryHiddenManager : public AActor
{
public:
	TArray<class UClass*>                              Dictionary_Object;                                        // 0x0398(0x0010) (Edit, ZeroConstructor)
	TArray<class UClass*>                              Dictionary_Object_Battle;                                 // 0x03A8(0x0010) (Edit, ZeroConstructor)
	TArray<class UClass*>                              Dictionary_Object_CutScene;                               // 0x03B8(0x0010) (Edit, ZeroConstructor)
	TArray<class UClass*>                              Dictionary_EventMonster;                                  // 0x03C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ExclusionList;                                            // 0x03D8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x408];                                     // 0x03E8(0x0408) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCategoryHiddenManager");
		return ptr;
	}


	void RemoveExclusionTag(const struct FName& InTag);
	bool IsCategoryHidden(TEnumAsByte<EJackCategoryHiddenType> InType);
	TArray<struct FName> GetExclusionList();
	void CategoryHidden(TEnumAsByte<EJackCategoryHiddenType> InType, TEnumAsByte<EJackCategoryHiddenLayer> Layer, bool bInHidden, bool bCollisionOption_Object);
	void AddExclusionTag(const struct FName& InTag);
};


// Class JackGame.JackCharacterAutoSECallback
// 0x0008 (0x00A0 - 0x0098)
class UJackCharacterAutoSECallback : public USQEXSEADAutoSeComponentCallbackDefault
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterAutoSECallback");
		return ptr;
	}

};


// Class JackGame.JackCharacterCapsuleComponent
// 0x0260 (0x09C0 - 0x0760)
class UJackCharacterCapsuleComponent : public UCapsuleComponent
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0760(0x00A0) MISSED OFFSET
	bool                                               bThinCapsuleRadiusEnable;                                 // 0x0800(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreCollisionByPlayerPawnWhilePlayerFalling;           // 0x0801(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFallingHitToThin;                                        // 0x0802(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0803(0x0001) MISSED OFFSET
	float                                              FallingHitToThinExecuteSec;                               // 0x0804(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x150];                                     // 0x0808(0x0150) MISSED OFFSET
	class UJackExtraNPCCapsuleComponent*               ExtraNPCCapsuleComponent;                                 // 0x0958(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x60];                                      // 0x0960(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterCapsuleComponent");
		return ptr;
	}


	void OnPlayerMovementModeChanged(class AJackCharacter* JackCharacter, TEnumAsByte<EMovementMode> OldMovementMode, TEnumAsByte<EMovementMode> NewMovementMode);
	void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class JackGame.JackCharacterCaptureCameraCharacterClassLoadManager
// 0x0028 (0x0060 - 0x0038)
class UJackCharacterCaptureCameraCharacterClassLoadManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterCaptureCameraCharacterClassLoadManager");
		return ptr;
	}


	void RequestAsyncLoadCallback(TArray<struct FSoftObjectPath> TargetsToStream, TArray<class UObject*> LoadedObjects, int Index, const struct FString& ClassPathName);
};


// Class JackGame.JackCharacterCaptureCamera
// 0x00C0 (0x0470 - 0x03B0)
class AJackCharacterCaptureCamera : public ASceneCapture2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B0(0x0008) MISSED OFFSET
	class USceneComponent*                             CapturePartsComponent;                                    // 0x03B8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneComponent*                             TurnTableComponent;                                       // 0x03C0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x03C8(0x0030) MISSED OFFSET
	TArray<struct FJackCaptureCharacterInfo>           MenuCharacterInfos;                                       // 0x03F8(0x0010) (ZeroConstructor)
	float                                              MonsterAnimationRepeatInterval;                           // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DebugDrawToDefaultScene;                                  // 0x040C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	class UClass*                                      ReflectionCaptureClass;                                   // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0418(0x0008) MISSED OFFSET
	bool                                               bDisableFieldLights;                                      // 0x0420(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowParticleRenderingInScneCapture;                     // 0x0421(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x46];                                      // 0x0422(0x0046) MISSED OFFSET
	bool                                               bSquareViewport;                                          // 0x0468(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bOverrideMinAutoScalingFactorBySystemResolution;          // 0x0469(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x046A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterCaptureCamera");
		return ptr;
	}


	void StabilizeCharacterPose(int Index);
	void SpawnLoadedCharacter(bool bIgnoreEquipmentCoordinate);
	void SetWallpaperDistance(float Distance);
	void SetTurnTableScale(float Scale);
	void SetTurnTableRotation(const struct FRotator& Rotation);
	void SetTexturesCinematicMipLevel(bool bToBeResident, int Index);
	void SetLightParameter(TArray<struct FJackZukanMotionDirectionalLightParameter> DirectionalLightParameterList, TArray<struct FJackZukanMotionPointLightParameter> PointLightParameterList);
	void SetEnabledCapture(bool bEnabled);
	void SetEnableCaptureEnvrionmentObjects(bool bEnable);
	void SetDisableFieldLights(bool bDisable);
	void SetCharacterRelativeRotation(const struct FRotator& Rotation, int Index);
	void SetCharacterRelativeLocation(const struct FVector& Location, int Index);
	void SetCameraPitch(float Pitch);
	void SetCameraLocation(const struct FVector& InPosition);
	void SetCameraFieldOfView(float FieldOfView);
	void SetAnimDynamicsIdlingCount(int IdlingCount, int Index);
	void SetAnimationFlagOfInBattle(bool bInBattle, int Index);
	void RequestAsyncLoadyCharacterAnimCallback(TArray<struct FSoftObjectPath> TargetsToStream, TArray<class UObject*> LoadedObjects, int Index, const struct FName& RequestCharacterId);
	void RequestAsyncLoadCallback(TArray<struct FSoftObjectPath> TargetsToStream, TArray<class UObject*> LoadedObjects, int Index, const struct FString& ClassPathName);
	void RefreshCharacterStatus(int Index);
	bool PlayWeaponAnimMontageByKey(const struct FName& MontageKey, TEnumAsByte<EJackEquippedHand> Hand, int Index);
	bool PlayCharacterAnimSequence(int Index);
	bool PlayCharacterAnimMontageByKey(const struct FName& AnimMontageKey, bool bLoop, bool bRepeat, int Index, float* OutAnimDuration, float* OutAnimRepeatTime);
	bool PlayCharacterAnimMontage(class UAnimMontage* AnimMontage, int Index);
	bool IsToBeWantsTexturesCinematicMipLevel(int Index);
	bool IsLoadingAnyCharacters();
	bool IsLoadingAnyCharacterAnimations();
	bool IsEnabledCapture();
	float GetTurnTableScale();
	struct FRotator GetTurnTableRotation();
	float GetRepeatMontageTimer(int Index);
	struct FName GetMonsterZukanId(const struct FName& MonsterID);
	class AJackCharacter* GetJackCharacter(int Index);
	struct FRotator GetCharacterRelativeRotation(int Index);
	struct FVector GetCharacterRelativeLocation(int Index);
	float GetCameraPitch();
	struct FVector GetCameraLocation();
	float GetCameraFieldOfView();
	void EndLookAt(int Index);
	bool DoesExistSpawnedCharacter();
	void DestroyMenuCharacters();
	bool CreateMenuMonsterCharacter(const struct FName& MonsterID, int Index);
	bool CreateMenuFriendCharacter(const struct FName& FriendID);
	void BeginLookAt(const struct FVector& LookAtLocation, int Index);
};


// Class JackGame.JackCharacterComponentDebugger
// 0x0000 (0x0038 - 0x0038)
class UJackCharacterComponentDebugger : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterComponentDebugger");
		return ptr;
	}

};


// Class JackGame.JackCharacterDebugComponent
// 0x0000 (0x01A0 - 0x01A0)
class UJackCharacterDebugComponent : public UJackCharacterComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterDebugComponent");
		return ptr;
	}

};


// Class JackGame.JackCharacterManager
// 0x00E0 (0x0478 - 0x0398)
class AJackCharacterManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0398(0x00D8) MISSED OFFSET
	TWeakObjectPtr<class AJackCharacter>               TalkingNpc;                                               // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterManager");
		return ptr;
	}

};


// Class JackGame.JackCharacterMeshComponent
// 0x0160 (0x1200 - 0x10A0)
class UJackCharacterMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10A0(0x0010) MISSED OFFSET
	class UJackAttitudeControlComponent*               CachedAttitudeControlComponent;                           // 0x10B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x148];                                     // 0x10B8(0x0148) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterMeshComponent");
		return ptr;
	}


	void SetFixedLODBoundsEnable(bool bEnable);
	bool SetFixedLODBounds(const struct FName& LODBoundsName);
	void EvaluateUpperFacePose(const struct FJackEvaluateFacePose_Params& Params);
	void EvaluateLowerFacePose(const struct FJackEvaluateFacePose_Params& Params);
};


// Class JackGame.JackCharacterMovementComponent
// 0x05A0 (0x0D10 - 0x0770)
class UJackCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0770(0x0010) MISSED OFFSET
	float                                              MaxMoveSpeed;                                             // 0x0780(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreRotationYaw;                                       // 0x0784(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreRotationPitch;                                     // 0x0785(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreRotationRoll;                                      // 0x0786(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bSafeNavConstrainedDuringMove;                            // 0x0787(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BattleMaxTurnSpeed;                                       // 0x0788(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x078C(0x0004) MISSED OFFSET
	class UClass*                                      NavigationQueryFilter;                                    // 0x0790(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x98];                                      // 0x0798(0x0098) MISSED OFFSET
	bool                                               bIsIgnoreMovementDisabledCheckCollision;                  // 0x0830(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3BF];                                     // 0x0831(0x03BF) MISSED OFFSET
	bool                                               bOrientRotationToBattleMovement;                          // 0x0BF0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x11F];                                     // 0x0BF1(0x011F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterMovementComponent");
		return ptr;
	}


	void SetReservedMovementRotation(const struct FRotator& InRotation, bool bAdditive, bool bConsumeAll);
	void SetReservedMovementLocation(const struct FVector& InLocation, bool bAdditive, bool bConsumeAll);
	void SetMovementMaxSpeedType(TEnumAsByte<EJackCharacterMovementMaxSpeedPurpose> Purpose, TEnumAsByte<EJackCharacterMovementMaxSpeed> MaxSpeedType);
	void SetMovementEnabled(bool bEnabled, TEnumAsByte<EJackCharacterControlChannel> InChannel);
	void SetJumpDisabled(bool bDisabled, TEnumAsByte<EJackCharacterControlChannel> InChannel);
	void SetIgnoreMovementDisabledCheckCollision(bool bDisabled);
	void SetConstrainedOnNavMesh(TEnumAsByte<EJackCharacterConstrainedOnNavMeshPurpose> Purpose, bool bConstrainedOnNavMesh);
	void SetAutonomicMovementDisabled(bool bDisabled, TEnumAsByte<EJackCharacterControlChannel> InChannel);
	void OnEndOverlapControllPrimitive(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnBeginOverlapControllPrimitive(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class JackGame.JackMoveTrack
// 0x0008 (0x00F0 - 0x00E8)
class UJackMoveTrack : public UInterpTrackMove
{
public:
	bool                                               bDisableMovementAssist;                                   // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAdjustTransformForJackCharacter;                         // 0x00E9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyRotateToAdjustCharacter;                            // 0x00EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyScaleToAdjustCharacter;                             // 0x00EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMoveTrack");
		return ptr;
	}

};


// Class JackGame.JackCharacterMovementTrack
// 0x0000 (0x00F0 - 0x00F0)
class UJackCharacterMovementTrack : public UJackMoveTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterMovementTrack");
		return ptr;
	}

};


// Class JackGame.JackCharacterMovementTrackInst
// 0x0000 (0x0050 - 0x0050)
class UJackCharacterMovementTrackInst : public UInterpTrackInstMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterMovementTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCharacterOneTokiNoKesin
// 0x0200 (0x12F0 - 0x10F0)
class AJackCharacterOneTokiNoKesin : public AJackCharacter
{
public:
	class UJackLookAtComponent*                        LookAtComponent;                                          // 0x10F0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackOverlappedActorComponent*               OverlappedActorComponent;                                 // 0x10F8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FVector                                     TargetPosition;                                           // 0x1100(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              ArrivedLength;                                            // 0x110C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NormalMoveRotateSpeed;                                    // 0x1110(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xBC];                                      // 0x1114(0x00BC) MISSED OFFSET
	float                                              ActorHeight;                                              // 0x11D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MoveSpeedWalk;                                            // 0x11D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MoveSpeedRun;                                             // 0x11D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotLerpRate;                                              // 0x11DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MoveLerpRate;                                             // 0x11E0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsWallMove;                                              // 0x11E4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x11E5(0x0003) MISSED OFFSET
	float                                              MoveAnimationRate;                                        // 0x11E8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MoveMotionBlendRate;                                      // 0x11EC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackTokiNoKesinMotionState                        MotionState;                                              // 0x11F0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x11F1(0x0003) MISSED OFFSET
	float                                              MaxMoveMotionBlendRate;                                   // 0x11F4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              VisibleSecMin;                                            // 0x11F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              VisibleSecMax;                                            // 0x11FC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UnVisibleSecMin;                                          // 0x1200(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UnVisibleSecMax;                                          // 0x1204(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              VisibleFadeSec;                                           // 0x1208(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UnVisibleFadeSec;                                         // 0x120C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ForceUnVisibleFadeSec;                                    // 0x1210(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x1214(0x0004) MISSED OFFSET
	TArray<class UAnimMontage*>                        SitWaiterAnimArray;                                       // 0x1218(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<class UAnimMontage*>                        StandWaiterAnimArray;                                     // 0x1228(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	class UAnimMontage*                                Sit2pInteractionAnim;                                     // 0x1238(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                Stand2pInteractionAnim;                                   // 0x1240(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                InDestroyWaitAnim;                                        // 0x1248(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              LookAtYawAngle;                                           // 0x1250(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              LookAtLength;                                             // 0x1254(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Wait2pInteractionAnimResetLength;                         // 0x1258(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              LifeSec;                                                  // 0x125C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bOffBlink;                                                // 0x1260(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8F];                                      // 0x1261(0x008F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterOneTokiNoKesin");
		return ptr;
	}


	void STATIC_SyncTokinoKesinSpawnLimitManager();
	void SyncParameter();
	void STATIC_SetTokinoKesinSpawnLimitNum(int Num);
	void SetReuseActor();
	void RemoveOverlappedComponent(class UPrimitiveComponent* OtherComp);
	void RegistSpawnActor();
	bool IsWait();
	bool IsStand();
	bool IsSit();
	bool IsMove();
	bool IsDestroyOk();
	int STATIC_GetTokinoKesinSpawnLimitNum();
	bool STATIC_CanTokinoKesinSpawn();
	void AddOverlappedComponent(class UPrimitiveComponent* OtherComp);
};


// Class JackGame.JackCharacterSystem
// 0x0078 (0x00B0 - 0x0038)
class UJackCharacterSystem : public UObject
{
public:
	class UJackGameCharacterManager*                   GameCharacterManager;                                     // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackDressupCoordinateManager*               DressupCoordinateManager;                                 // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              FieldAttackMaxDamageRate;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiIconDistance;                                     // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiIconVanishDistance;                               // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiDistance;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiForceVanishDistance;                              // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMin_NormalVisible;                             // 0x005C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMax_NormalVisible;                             // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMin_NormalInvisible;                           // 0x0064(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMax_NormalInvisible;                           // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMin_ShortVisible;                              // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMax_ShortVisible;                              // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMin_ShortInvisible;                            // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FukidasiSecMax_ShortInvisible;                            // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	struct FJackCharacterCoordinateLODInfo             SlaveMeshOverrideLODInfos[0x2];                           // 0x0080(0x0010) (Edit, DisableEditOnInstance)
	TArray<struct FJackActiveTokugiSpecialConditionSetting> ActiveTokugiSpecialConditionSetting;                      // 0x00A0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterSystem");
		return ptr;
	}


	void RecoverPartyMembers(TEnumAsByte<EJackCharacterRecover> RecoverType, bool bRevive);
	int GetRemainingExpToNextLevel(class UJackGameCharacter* InGameCharacter);
	class UJackGamePlayer* GetGamePlayer();
	class UJackGameCharacterManager* GetGameCharacterManager();
	class AJackMonsterCharacter* CreateMonster(class UClass* InClass, class AActor* InOwner, const struct FVector& InLocation, const struct FRotator& InRotator);
};


// Class JackGame.JackCharacterTickIntervalManager
// 0x0050 (0x03E8 - 0x0398)
class AJackCharacterTickIntervalManager : public AActor
{
public:
	TArray<struct FJackCharacterTickIntervalSetting>   CharacterTickIntervalSetting;                             // 0x0398(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackCharacterDisplayLimitSetting>   CharacterDisplayLimitSetting;                             // 0x03A8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char																			 bLoadReducerDisabled; // set by DisableLoadReductionForNPC
	unsigned char                                      UnknownData00[0x30];                                      // 0x03B8(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterTickIntervalManager");
		return ptr;
	}

};


// Class JackGame.JackCharacterUIComponent
// 0x0000 (0x01A0 - 0x01A0)
class UJackCharacterUIComponent : public UJackCharacterComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCharacterUIComponent");
		return ptr;
	}


	void ShowQuestionEffect();
	void ShowExclamationEffect();
	void ShowEmotionEffect(TEnumAsByte<EJackMonsterEmotionIcon> EmotionIcon);
	void ShowAngryIcon();
	void OpenNamePlate(const struct FString& Message);
	void OpenMonsterNamePlate();
	void HideEmotionEffect(TEnumAsByte<EJackMonsterEmotionIcon> EmotionIcon);
	void HideAngryIcon();
	void CloseNamePlate();
};


// Class JackGame.JackCheatManager
// 0x0000 (0x0088 - 0x0088)
class UJackCheatManager : public UCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCheatManager");
		return ptr;
	}


	void ZonePoint(float Value);
	void ZoneKeepRemainTurn(int Value);
	void ZoneEnable();
	void WaitVoiceMessageForCS(bool bEnable);
	void VehicleSpawn(const struct FString& VehicleName);
	void ValidateMemory(int Type);
	void UpdatePartyFromCutScene();
	void UpdatePackageStatus();
	void UpdateFollowingFriendCharacters(bool bRelocation);
	void TryLoadPackage(const struct FString& PackagePath);
	void TryLoadLevel(const struct FString& LevelPath);
	void TryLoadAsset(const struct FString& AssetPath);
	void TrialAchievementTest(bool bIsTrialTest);
	void TraceCutScenePerformanceLog();
	void TraceCutSceneMatineeInfo();
	void TraceCutSceneDynamicResolutionLog();
	void TokugiPoint(TEnumAsByte<EJackCharacter> TargetCharacter, int Point);
	void TokugiOpen(const struct FName& TokugiPanelID, bool bConsumePoint);
	void TokugiClose(const struct FName& TokugiPanelID, bool bConsumePoint);
	void ToggleSaveLoadForceFailMode();
	void ToggleReturnToAutoSaveVolumeEnable();
	void ToggleHandheldBoostMode();
	void ToggleDisplayRuby();
	void ToggleAutoSaveEnabled();
	void TestDressupCoordinate();
	void TenseiTest(const struct FName& TenseiId);
	void TenseiCheck(int Mode);
	void TeleportMapStart();
	void TeleportLocation(float X, float Y, float Z);
	void TabiNoKokoroeTaughtFlagSet(const struct FName& TabiNoKokoroeID, bool bNewFlag);
	void StreamedObjectsToBeResident();
	void StopLoadingScreen();
	void StopCSAutoMovieCapture();
	void StartCSAutoMovieCapture();
	void SpawnActor(class UClass* Class);
	void SlomoUp();
	void SlomoReset();
	void SlomoDown();
	void Slomo3x();
	void ShowRandomEncountInfo();
	void ShowPartyTalkSafeAreaLine();
	void ShowPartyTalkSafeAreaInfo();
	void ShowPartyTalkingSafeArea();
	void ShowParticleEffectComponentInWorldSettings();
	void ShowMonsterSymbolInfo();
	void ShowMonsterSensor();
	void ShowMonsterGeneratorInfo();
	void ShowLastBehaviorName();
	void ShowGuestFollowTargetLine();
	void ShowFlagBreakPoints();
	void ShowCutSceneTextureLoadInfo();
	void ShowCutSceneMovieTimelineInfo();
	void ShowClothCollisions();
	void ShowBehaviorNGCutScene();
	void SetWorldMapVisible(bool bVisible);
	void SetWaitChangingMEToBGMDefault(bool bIsWait);
	void SetVoiceLanguage(const struct FName& Language);
	void SetUseDQ8BGM(bool bIsUseDQ8BGM);
	void SetToherosu();
	void SetTitleFadeTime(float InTime);
	void SetTitleDelayTime(float InTime);
	void SetTextLogEnabled(bool bEnabled);
	void SetShareEnable(bool bEnable);
	void SetSeisui();
	void SetSaveLoadForceFailResult(EJackSaveLoadResult InForceFailResult);
	void SetPlayerName(const struct FString& PlayerName);
	void SetPlayerCameraSpeedIdParamUptoChangeSpeedRateByPlayerMovement(int ID, float Rate);
	void SetPlayerCameraSpeedIdParamDowntoChangeSpeedRateByPlayerMovement(int ID, float Rate);
	void SetPlayerCameraSpeedIdParamAddYawInputSpeed(int ID, float Rate);
	void SetPlayerCameraSpeedIdParamAddYawInputMaxSpeedRate(int ID, float Rate);
	void SetPlayerCameraSpeedIdParamAddPitchInputSpeed(int ID, float Rate);
	void SetPlayerCameraSpeedIdParamAddPitchInputMaxSpeedRate(int ID, float Rate);
	void SetPlayerCameraSpeedId(const struct FString& RoomOrFieldOrPlayerMove, int ID);
	void SetPlayerCameraRotateSpeedRateForPlayerMovement(float Rate);
	void SetPlayerCameraLightDisable(bool bDisable);
	void SetPlayerCameraDataArmLength(float ArmLengthMin, float ArmLengthMax);
	void SetOffTutorialMessage(bool bOn);
	void SetOffAchievementMessage(bool bOn);
	void SetNamaeInputOffsetX(float InOffset);
	void SetMonsterOptimize(bool bEnabled);
	void SetModeSelectCameraWait(int InValue);
	void SetModeSelectCameraPlayWait(int InValue);
	void SetMiniMapVisible(bool bVisible);
	void SetMapVisit(const struct FName& InMapVolumeID, bool InVisited);
	void SetInstallDummyResult(int64_t Result);
	void SetHiddenFollowingFriendCharacters(bool bHidden);
	void SetHiddenFollowingFriendCharacterByCharacterType(TEnumAsByte<EJackCharacter> CharacterType, bool bHidden);
	void SetGCInterval(int Interval);
	void SetGameplayTime(int GameplayTime);
	void SetFukkatuNoJumon(const struct FString& InTitle);
	void SetFollowingFriendCharactersAnimationType(int Index);
	void SetFollowingCharactersActionCursorType(int Index);
	void SetFlag(const struct FString& FlagCategory, const struct FName& FlagName, const struct FString& Value);
	void SetEncountEnabled(bool bEnabled);
	void SetEnabledVideoRecording(bool bEnable);
	void SetEnabledSharePlay(bool bEnable);
	void SetEnabledScreenShot(bool bEnable);
	void SetEnabledLiveStreaming(bool bEnable);
	void SetEditionType(TEnumAsByte<EJackEdition> InEditionType);
	void SetCutSceneOneLetterInterval(float TimeSec);
	void SetCutSceneAutomaticFeedOfSpeechIntervalInVoice(float TimeSec);
	void SetCutSceneAutomaticFeedOfSpeechIntervalInText(float TimeSec);
	void SetCutSceneAutomaticFeedOfSpeechIntervalInLoopVoice(float TimeSec);
	void SetCSBatchArray(const struct FString& FilePath);
	void SetControlRotation(float CameraRoll, float CameraPitch, float CameraYaw);
	void SetControlledCharacterType(TEnumAsByte<EJackCharacter> CharacterType);
	void SetCharacterFixedTickIntervalDistance(bool bEnable, float Distance1Int, float Distance2Int);
	void SetBGMOrchestraDiscVersion(bool bIsOrchestra);
	void SetAutomaticFeedOfSpeechShowUIInterval(float TimeSec);
	void SetAutomaticFeedOfSpeechEnable(bool bEnable);
	void SetAutoCaptionInterval(float TimeSec);
	void SetActorRotation(float Pitch, float Yaw, float Roll);
	void SetActorNotHiddenInGame(const struct FString& PatternStr);
	void SetActorHiddenInGame(const struct FString& PatternStr);
	void SetAchievementForcedUnlockFlag(bool IsForcedFlag);
	void SetAchievedSibariSetting(int Index, bool bEnable);
	void SerifuWindowInvisible(bool bInvisible);
	void SaveSystem(int SlotIndex);
	void SaveMapJourney();
	void SaveGame2D(int SlotIndex);
	void SaveGame(int SlotIndex);
	void SakusenSet(const struct FName& InName, const struct FName& SakusenName);
	void RuraJump(const struct FName& InJumpTag);
	void RuraDebugCheck(bool bStart);
	void RunRate(float PlayRate);
	void RunMacro(const struct FName& DebugCommandMacro);
	void RootMotionDisabled(bool bDisabled);
	void RiremitoJump(const struct FName& InJumpTag);
	void ResetGamePlayerCondition();
	void ResetFlags(const struct FString& FlagCategory);
	void RenkeiSpectacleShowResult(int Value);
	void RenkeiFormationView();
	void RenkeiCutInFastestTimeZero();
	void RenkeiAvailable();
	void RemoveScenario();
	void RemoveFlagBreakPoint(const struct FString& FlagCategory, const struct FName& FlagName);
	void RefreshMonsterDeploy();
	void RefreshItemGettableObject();
	void RecoverAll(bool bRevive);
	void ReacquiredJackUE4Achievement(TEnumAsByte<EJackAchievementCategory> InCategory, TEnumAsByte<EJackAchievementCondition> InCondition);
	void RandomEncountImmediately();
	void RandInfo();
	void QuestProgressSet(const struct FName& QuestId, int ProgressFlag);
	void QuestParamaterLogOutput(bool bOnlyValidData);
	void PrintTextArgs(TArray<struct FString> ParamList);
	void PrintText(const struct FName& InTextId);
	void PrintSimpleTextArgs(TArray<struct FString> ParamList);
	void PrintSimpleText(const struct FName& InTextId);
	void PrintLetters();
	void PrintFontList();
	void PreloadSubLevelFastMode(int InMode);
	void PreloadStopWatchStop(const struct FName& KeyName);
	void PreloadStopWatchStart(const struct FName& KeyName);
	void PreloadOutPutLog();
	void PreloadOnOff();
	void PreloadMemoryOutPut();
	void PreloadMap(const struct FName& MapStartName);
	void PlayerMakerUpdateOnTeleport(bool bEnable);
	void PlayEffect(const struct FString& ParticlePath);
	void Play2DMovie(const struct FName& InCutSceneID);
	void PlatformSpecificText(const struct FString& InText);
	void PhotoModeErrorTest(int ErrorNo);
	void PhotoModeDebugSavePath(const struct FString& InSavePath);
	void PhotoMode_TeleportCharacter(float InX, float InY, float InZ, float InYaw);
	void PhotoMode_StopCharacterEmotion();
	void PhotoMode_SetRelocateRadius(float InRadius);
	void PhotoMode_SetRelocateCharaDistance(float InDistance);
	void PhotoMode_SetLookAtType(int InType);
	void PhotoMode_SetHiddenCharacter(bool bInHidden);
	void PhotoMode_SetAlignmentWtypeCharaDistance(float InDepth);
	void PhotoMode_SetAlignmentWtypeCharaDepth(float InDepth);
	void PhotoMode_SetAlignmentType(int InType);
	void PhotoMode_SetAlignmentCharaShift(float InShift);
	void PhotoMode_SetAlignmentCharaDistance(float InDistance);
	void PhotoMode_PlayCharacterEmotionDebug();
	void PhotoMode_PlayCharacterEmotion(const struct FName& EmotionName);
	void PhotoMode_DispRelocateRadius();
	void PhotoMode_DispRelocateCharaDistance();
	void PhotoMode_DispDebugInfo();
	void PhotoMode_CharacterLookAt();
	void PhotoMode_CharacterLeave();
	void PhotoMode_CharacterHeadLookAtEnd();
	void PhotoMode_CharacterHeadLookAt();
	void PhotoMode_CharacterEnter();
	void PhotoMode_CameraReturnEnable();
	void PhotoMode_CameraReturnDisable();
	void PerchMovement(bool bEnable);
	void PauseItemGettableObject(bool bPause);
	void PauseActorByName(const struct FString& Name, bool bPause);
	void PartyTalkTestTalk(const struct FName& InTextNo);
	void PartyTalkFriendJoin(TEnumAsByte<EJackCharacter> InType);
	void PartyTalkCameraSetting();
	void ParticleInfo();
	void PackagesLoadList(const struct FString& Search);
	void OutputGameDataText();
	void Output2DGameDataText();
	void OpenProductBrowse(const struct FName& DlcId);
	void OpenPresentCodeInputScreen();
	void OpenMiniMap();
	void OpenImeNameEntry();
	void OddEffectSetTakusan(const struct FName& TargetName);
	void OddEffectSetGood(const struct FName& TargetName);
	void OddEffectSetBad(const struct FName& TargetName);
	void OddEffectSet(const struct FName& OddEffectID, const struct FName& TargetName);
	void OddEffectInfo();
	void OddEffectClearGood(const struct FName& TargetName);
	void OddEffectClearBattleEnd();
	void OddEffectClearBad(const struct FName& TargetName);
	void OddEffectClear(const struct FName& OddEffectID, const struct FName& TargetName);
	void NotUnlockUE4Achievements(bool bIsProhibit);
	void Muteki(const struct FName& InName, bool bEnabled);
	void MuteAudio();
	void MusicDirectLoadMode();
	void MSC(const struct FName& DebugCommandMacroShortCut);
	void MPSet(const struct FName& InName, int NewMP);
	void MPMax(const struct FName& InName);
	void MonsterSpawnWithSubstance(const struct FName& MonsterID, const struct FName& SubstanceId);
	void MonsterSpawnNear();
	void MonsterSpawn(const struct FName& MonsterID);
	void MonsterSensorEnabled();
	void MonsterLotteryNumMax(int InSpecifyCost);
	void MonsterGeneratorEnabled();
	void MonsterForceLotteryType(const struct FName& InLotteryType);
	void MeasureLetterSize();
	void LogShowTextMacroReplace();
	void LogPackageList(const struct FString& PackagePath);
	void LogPackageInfo(const struct FString& PackagePath);
	void LogNPCInfo(int Mode);
	void LogMemoryPackageList();
	void LogMemoryPackageInfo();
	void LogMapStartPackageList(const struct FName& MapStartName);
	void LogMapStartPackageInfo(const struct FName& MapStartName);
	void LogLevelPackageList();
	void LogLevelPackageInfo();
	void LogItemPictorialBookInfo();
	void LogAssetList(const struct FString& AssetPath);
	void LogAssetInfo(const struct FString& AssetPath);
	void LockAllAchievements();
	void LoadSystem();
	void LoadSavedGame(int SlotIndex);
	void LoadingTipsView(const struct FName& InTipsNo);
	void LoadingTipsSwitchTime(float InTipsSwitchTime);
	void LoadingTipsDebug(const struct FName& InTipsNo);
	void LoadGame(int SlotIndex);
	void LevelSet(const struct FName& InName, int InLevel);
	void LevelPause();
	void KillOffPlayers();
	void KillOffMonsters();
	void KaziFlagSet(bool InFlag);
	void JumonGet(const struct FName& InName);
	void JumonForget(const struct FName& InName);
	void JackHelp();
	void IncrementalGC();
	void ImportSaveData();
	void HPSet(const struct FName& InName, int NewHP);
	void HideScreenShotCopyright();
	void HiddenNPCBy(float Distance);
	void HiddenActorByName(const struct FString& Name, bool bHidden);
	void HDVibration(int Mode);
	void GuestNpcWarp(TEnumAsByte<EJackCharacter> InType);
	void GuestNpcLeave(const struct FName& InName);
	void GuestNpcJoin(const struct FName& InName);
	void Gold(int InGold);
	void GetFlag(const struct FString& FlagCategory, const struct FName& FlagName);
	void GatherOnMemoryObject(const struct FString& StrAddr);
	void FusigiKaziSetTemperature();
	void FusigiKaziSetSuccessNum();
	void FusigiKaziSetGaugeValue();
	void FusigiKaziGetNowGaugeValue();
	void FriendLeaveKeepItems(const struct FName& InName);
	void FriendLeave(const struct FName& InName);
	void FriendJoin(const struct FName& InName);
	void FreeCamera();
	void FrameTimeControl(int Mode);
	void FrameSkip();
	void ForceSetWorldTime(int Hour, int Min, int Sec, bool bResetNPCSchedule);
	void ForceSetUsoWoTsukuTalkRate(int Rate);
	void ForceSetUsoTalkMessage(int Index);
	void ForceSetTokugiUseCount(const struct FName& ActionID, int Count);
	void ForceSetSibariPlayFlag(TEnumAsByte<EJackSibari> Type, bool bFlag);
	void ForceSetSibariPlayDisplayFlag(bool bFlag);
	void ForceSetRenkeiUseCount(int Count);
	void ForceSetQuestClearCount(int Count);
	void ForceSetPlaythrough(int Through);
	void ForceSetObjectDestructionCount(int Count);
	void ForceSetMedalCount(int Count);
	void ForceSetKiraReplacementSec(float Seconds);
	void ForceSetKaziRetryPlayCount(int InCount);
	void ForceSetKaziCreatePlayCount(int InCount);
	void ForceSetItemUseCount(const struct FName& ItemID, int Count);
	void ForceSetItemTotalGetCount(const struct FName& ItemID, int Count);
	void ForceSetItemIndex(TEnumAsByte<EJackItem_Bag> BagType, int DstIndex, int SrcIndex);
	void ForceSetItemGettableObjectFlag(const struct FName& ID, bool bGetFlag);
	void ForceSetInnStayCount(int Count);
	void ForceSetHazukasiiNoroiTalkRate(int Rate);
	void ForceSetHazukasiiNoroiTalkMessage(int Index);
	void ForceSetEnableOverrideTranslationText();
	void ForceSetDefeatMonsterZukanCount(const struct FName& MonsterZukanID, int Count);
	void ForceSetDefeatMonsterTotalCount(int Count);
	void ForceSetDefeatMetalMonsterTotalCount(int Count);
	void ForceSetCoinCount(int Count);
	void ForceSetCampCount(int Count);
	void ForceSetBlowAwayMonsterCount(int Count);
	void ForceSetBattleVictoryCount(int Count);
	void ForceSetBattlePlayerAICalcScoreTimeMax(float TimeMax);
	void ForceSetBattleCountBySwordAttack(int Count);
	void ForceSavingBackToThePastInfo();
	void ForceRemoveDefeatMonster(const struct FName& MonsterID);
	void ForceRecordRideMonsterVehicle(TEnumAsByte<EJackVehicle> VehicleID);
	void ForceRecordExecuteRenkei(const struct FName& RenkeiID);
	void ForceRecordExecuteMonsterRenkei(const struct FName& MonsterRenkeiID);
	void ForceReceiveItemPresent(const struct FName& DlcId);
	void ForceParameterSettingWhenBackToThePast();
	void ForceParameterSettingPowerAwakening();
	void ForceMoveItem(TEnumAsByte<EJackItem_Bag> BagTypeDst, TEnumAsByte<EJackItem_Bag> BagTypeSrc, int Index, int ItemCount);
	void ForceMapJumpDebug(bool bEnable);
	void ForceLossRecipeBookFromItemId(const struct FName& ItemID);
	void ForceLossRecipeBookAll();
	void ForceLossRecipeBook(const struct FName& RecipeBookID);
	void ForceLossBrowsedRecipeBookForItemId(const struct FName& ItemID);
	void ForceLossBrowsedRecipeBookAll();
	void ForceLossBrowsedRecipeBook(const struct FName& RecipeBookID);
	void ForceLearningRecipeBookFItemId(const struct FName& ItemID);
	void ForceLearningRecipeBookAll();
	void ForceLearningRecipeBook(const struct FName& RecipeBookID);
	void ForceLearningBrowsedRecipeBookForItemId(const struct FName& ItemID);
	void ForceLearningBrowsedRecipeBookAll();
	void ForceLearningBrowsedRecipeBookAcquiredAll();
	void ForceLearningBrowsedRecipeBook(const struct FName& RecipeBookID);
	void ForceHiddenNPC(bool bHidden, float Distance);
	void ForceHaveStampPage4Flag(bool bFlag);
	void ForceGetItemToBag(const struct FName& ItemID, int ItemCount, TEnumAsByte<EJackItem_Bag> BagType);
	void ForceGetItem(const struct FName& ItemID, int ItemCount);
	void ForceGC(bool bFullPurge);
	void ForceGarbageCollection(bool bFullPurge);
	void ForceFukkatunojumonEncode();
	void ForceFukkatunojumonDecode(const struct FString& InStr);
	void ForceFukkatunojumon(const struct FString& PlayerName, int ScenarioProgress);
	void ForceExperienceRecipeRankParts(const struct FName& PartsName, int Result);
	void ForceExperienceRecipeRankIndex(int RecipeIndex, int Result);
	void ForceExperienceRecipeRank(const struct FName& RecipeName, int Result);
	void ForceExperienceRecipeAllRandom();
	void ForceExperienceRecipeAll(int Result);
	void ForceExchangeShopFlag(bool bFlag);
	void ForceExchangeMedalItem(const struct FName& ExchangeId);
	void ForceExchangeCoinItem(const struct FName& ExchangeId);
	void ForceEquipItemDetach(TEnumAsByte<EJackCharacter> CharacterType, TEnumAsByte<EJackEquipmentRegion> RegionType);
	void ForceEquipItemAttach(TEnumAsByte<EJackCharacter> CharacterType, TEnumAsByte<EJackEquipmentRegion> RegionType, const struct FName& ItemID, bool bUseAuto);
	void ForceDisplayFukidasi(const struct FName& FukidasiID);
	void ForceDiscardItem(const struct FName& ItemID);
	void ForceDiscardBagAll();
	void ForceDisableNewMark(const struct FName& ItemID);
	void ForceDepositGold(int Gold);
	void ForceDebugBreak();
	void ForceCutSceneDebug(bool bEnable);
	void ForceClearedSecondPlaythrough(bool bFlag);
	void ForceClearAchievementQueue();
	void ForceAddDefeatMonsterCount(const struct FName& MonsterID, int AddCount);
	void ForceAcquireAchievementDirect(const struct FName& AchievementID);
	void ForceAcquireAchievementAll();
	void FootIKNPCDisabled(bool bDisabled);
	void FootIKAllDisabled(bool bDisabled);
	void FlagLogPrint(int Slot);
	void FlagLogOn(int Slot);
	void FlagLogOff(int Slot);
	void FixupLooks();
	void FixedTimeStep60();
	void FixedTimeStep30();
	void FindOnMemoryObject(const struct FString& Name);
	void ExportSaveData();
	void Exec2DCasino(const struct FName& InGameName);
	void EnableP001Voice(bool bEnable);
	void EnableFlagBreakPoint(const struct FString& FlagCategory, const struct FName& FlagName, const struct FString& AccessType);
	void EnableDisplayDebugLog(bool bEnable);
	void EmptyPCFootmark();
	void DynamicResolution();
	void DumpReferencingObject(const struct FString& Name);
	void DumpRedmineInfo();
	void DumpPlayerCoordinateInfo();
	void DumpObjectCount(int Type, const struct FString& SearchWord);
	void DumpMapSymbolInfo();
	void DumpFukkatunojumonCommand(int ScenarioNumber);
	void DumpFlag();
	void DumpDressupCoordinate();
	void DumpConsoleCommandsUE4();
	void DumpConsoleCommandsJack();
	void DumpConsoleCommandsAll();
	void DumpAssetNumberEachVersion();
	void DumpAssetNameSpecifiedVersion(const struct FString& UE4Version);
	void DisplayWorldInfo();
	void DisplayWeatherInfo();
	void DisplayUiStaffRollWarningInfo();
	void DisplayUiStaffRollInfo();
	void DisplayUISelectedItem();
	void DisplayUIMenuList();
	void DisplayUIMenuInfo();
	void DisplayUIFukidasiIconInfo();
	void DisplayTextMacroReplaceInfo();
	void DisplayTextIdInfo();
	void DisplayTabiNoKokoroe(const struct FName& TabiNoKokoroeID);
	void DisplaySQEXNGWordInfo();
	void DisplaySoundDebugInfo(const struct FName& CharacterID);
	void DisplaySibariInfo();
	void DisplayShopInfo();
	void DisplaySaveDataInfo();
	void DisplayRuraInfo();
	void DisplayRecipeBookInfo();
	void DisplayPreloadInfo();
	void DisplayPlayerCamera();
	void DisplayNPCStat();
	void DisplayNPCInfo(const struct FString& CharacterName);
	void DisplayModeSelectCameraInfo();
	void DisplayMedalInfo();
	void DisplayMapInfo();
	void DisplayKiraInfo();
	void DisplayItemPresentInfo();
	void DisplayItemInfo();
	void DisplayItemGettableObjectInfo();
	void DisplayItemGetIcon(const struct FName& ItemID);
	void DisplayInstallInfo();
	void DisplayInnInfo();
	void DisplayHasItemObjectInfo();
	void DisplayGCInfo();
	void DisplayGamma(float Gamma);
	void DisplayGamePlayerInfo();
	void DisplayFukkatunojumonInfo();
	void DisplayExecutedRenkeiInfo(bool bMonsterRenkei);
	void DisplayEquipmentInfo();
	void DisplayEOSCommandLine();
	void DisplayDebugInfo();
	void DisplayCoinInfo();
	void DisplayChurchInfo();
	void DisplayCharacterTickIntervalInfo();
	void DisplayCharacterInfo();
	void DisplayCharacterComponentInfo(const struct FString& ComponentName);
	void DisplayCameraModeStack();
	void DisplayAchievementInfo();
	void DispersionInfo();
	void DispersionEnable();
	void DisableLoadReductionForNPC(bool bDisable);
	void DisableFlagBreakPoint(const struct FString& FlagCategory, const struct FName& FlagName, const struct FString& AccessType);
	void DisableCutSceneFixedDynamicResolution();
	void DisableCharacterTickInterval(bool bDisable);
	void DisableBattlePhotoMode(bool bIsDisable);
	void DisableAchievementAcquisition(bool bDisable);
	void DestroyActorByName(const struct FString& Name);
	void DefragGPUResources();
	void DebugVehicleMinimumSizeRadius(bool bOn);
	void DebugSpawnAllPartyCharacters();
	void DebugSaveGame(int SlotIndex);
	void DebugMenuItemExec(const struct FString& MenuFullPath);
	void DebugMenuEnabled(bool bEnabled);
	void DebugMenu();
	void DebugLoadGame(int SlotIndex);
	void DebugGameCamera();
	void DebugBGMVolume();
	void DebugAutoRun();
	void CutSceneFinish(const struct FName& InCSStart, const struct FName& InCSEnd);
	void CrashDumpTest();
	void Crash();
	void CopyMonsterLookUpDefeatLogs();
	void CommandReceiverInfo();
	void ClothNPCEnabled(bool bEnabled);
	void ClothAllEnabled(bool bEnabled);
	void CloseText();
	void CloseMiniMap(bool bRemoveWidget, bool bForceRemove);
	void ClearPreloadMap();
	void ClearInstallDummyResult();
	void ClearFontCache();
	void ClearCameraFade();
	void CheckRegion();
	void CheckAcquiredAchievementTrophyList();
	void CharacterCheatParameterReset(const struct FName& TargetCharacterName);
	void CharacterCheatParameterMode(const struct FName& Mode);
	void CharacterCheatParameterInfo();
	void CharacterCheatParameter(const struct FName& ParameterName, float ParameterValue, const struct FName& TargetCharacterName);
	void CharacterCaptureSetFixedColor(float Intensity);
	void CharacterCaptureEnableFixedColor(bool bEnable);
	void CharacterCaptureDebugMode(bool bShowInfo, bool bShowTargetSize);
	void ChangePadModeVita();
	void ChangePadModePS4();
	void BowgunGet();
	void BoukenGuideIdDebugSet(const struct FName& InBoukenGuideId);
	void BoukenGuideIdDebugReset();
	void BlockingLoadForceHighPriority();
	void BGMVolumeEditor();
	void BattleZoneInfo();
	void BattleWin();
	void BattleVoiceLanguage(const struct FName& Language);
	void BattleVoiceInfo();
	void BattleTurnSkip(int Value);
	void BattleToubatuEffect(int Value);
	void BattleTextInfo();
	void BattleTextDebug_TextID(const struct FName& TextID);
	void BattleTextDebug_SetTag(const struct FName& InCaster, const struct FName& InTarget, int InDamage);
	void BattleTextDebug_OddEffect(const struct FName& OddEffectID, EJackActionTextType TextType);
	void BattleTextDebug_Action(const struct FName& ActionID, EJackActionTextType TextType);
	void BattleTeleportInfo();
	void BattleTateGuard(int Value);
	void BattleStateInfo();
	void BattleSpeedModeParam(float TimeDilation, float TimeDilationByVeryFast);
	void BattleSpeedMode(int Value);
	void BattleSenseiKougeki(int Value);
	void BattleRoundInfo();
	void BattleResultSkip();
	void BattleResultDropLog();
	void BattleResultDrop2000Lottery();
	void BattleRareDropCertainty();
	void BattlePreparationCameraDrawSphere();
	void BattlePositioningPlayer(int Value);
	void BattlePositioningMonster(int Value);
	void BattlePositioningInfo();
	void BattlePopupBalloon();
	void BattlePlayerMoveTurnToEnable(bool bEnable);
	void BattlePlayerMoveTest(int TestMode);
	void BattlePlayerMoveSpeedInterpOut(float InterpTimeCoeff);
	void BattlePlayerMoveSpeedInterpIn(float InterpTimeCoeff);
	void BattlePlayerAITestFlow();
	void BattlePlayerAIScoreCheckLogShow();
	void BattlePlayerAIFlowLogShow();
	void BattlePlayerAIFlowBossBattle();
	void BattlePlayerAICalcInfo();
	void BattlePerfInfo();
	void BattleOpen();
	void BattleOddEffect(int Value);
	void BattleNigeru(int Value);
	void BattleNakamaYobiInfo();
	void BattleMovementInfo();
	void BattleMonsterSpawn(const struct FName& MonsterID);
	void BattleMonsterNigeru(int Value);
	void BattleMonsterLimit(int Value);
	void BattleMonsterAppearSkip();
	void BattleMonsterAppearDrawBox();
	void BattleMitoreru(int Value);
	void BattleMiss(int Value);
	void BattleMikawasi(int Value);
	void BattleLose();
	void BattleLockOnMovementTest();
	void BattleHitStop(const struct FName& HitStopPresetTypeEnumName);
	void BattleHazukasiiNoroiText(int Value);
	void BattleHazukasiiNoroi(int Value);
	void BattleGuestNPCControl(int Value);
	void BattleGroupInfo();
	void BattleFukidasiReset();
	void BattleFukidasiPush(const struct FName& FukidasiTextID);
	void BattleFukidasiInfo(int Value);
	void BattleFukidasiForceID(const struct FName& FukidasiID);
	void BattleFukidasiForce();
	void BattleFixDamage(int Damage);
	void BattleFieldLowAngleCameraInvalid(int Value);
	void BattleFieldInfo();
	void BattleFieldHiddenGrass(int Value);
	void BattleFieldFailSafe(int FailSafeType);
	void BattleEventBattleInfo();
	void BattleEncountEnable();
	void BattleDropCertainty();
	void BattleDistantBranch(int Value);
	void BattleDead(const struct FName& TargetName);
	void BattleDataTableCheck();
	void BattleCritical(int Value);
	void BattleCounter(int Value);
	void BattleCommandAISet(const struct FName& BattleAIID, const struct FName& TargetCharacterName);
	void BattleCommandAIInfo();
	void BattleCommandAIChangeIntelligence(const struct FName& IntelligenceTypeName);
	void BattleCommandAIChangeActionPattern(const struct FName& ActionPatternTypeName);
	void BattleCommandAIActionPattern(int Order1, int Order2, int Order3, int Order4, int Order5, int Order6);
	void BattleCollisionInfo();
	void BattleCharaStateInfo();
	void BattleCharaInfo();
	void BattleCameraMode(int Value);
	void BattleCalcInfo();
	void BattleBukiGuard(int Value);
	void BattleBackJumpThresholdLength(float Length);
	void BattleBackJumpForceByAutoCamera();
	void BattleBackJump();
	void BattleAutoCameraParam(int Value);
	void BattleAutoCameraInfo(int Value);
	void BattleAISecondCheckLogShow();
	void BattleAISecondCheckChange();
	void BattleAIFirstCheckLogShow();
	void BattleAIFirstCheckChange();
	void BattleActionInfo();
	void BattleActionExtentInfo();
	void BattleActionCameraInfo();
	void BattleActionCameraDebugMode();
	void AutoRun();
	void AudioSEADVolume(float Volume);
	void AudioMasterVolume(float Volume);
	void AssetRegistryEnabled(bool bEnabled);
	void ArasuziDebugFlagSet(const struct FName& ArasuziId, bool bPlayThroughSecond);
	void ActionPreview(const struct FName& TargetCharacterName);
	void ActionPlay(const struct FName& ActionID);
	void ActionLearnJumon();
	void ActionLearn(const struct FName& TargetName, const struct FName& ActionID);
};


// Class JackGame.JackClothBlendRateTrack
// 0x0010 (0x00C0 - 0x00B0)
class UJackClothBlendRateTrack : public UInterpTrackFloatBase
{
public:
	TArray<struct FJackLDT_Coordinate>                 ApplyCoordinates;                                         // 0x00B0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackClothBlendRateTrack");
		return ptr;
	}

};


// Class JackGame.JackClothResetDistanceTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackClothResetDistanceTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackClothResetDistanceTrack");
		return ptr;
	}

};


// Class JackGame.JackClothResetDistanceTrackInst
// 0x0058 (0x0090 - 0x0038)
class UJackClothResetDistanceTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0038(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackClothResetDistanceTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCoffinCharacter
// 0x0000 (0x10F0 - 0x10F0)
class AJackCoffinCharacter : public AJackCharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCoffinCharacter");
		return ptr;
	}

};


// Class JackGame.JackCoinManager
// 0x0040 (0x0078 - 0x0038)
class UJackCoinManager : public UObject
{
public:
	class UDataTable*                                  CoinShopDataTable;                                        // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  CoinExchangeDataTable;                                    // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  CoinExchangeShopDataTable;                                // 0x0048(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0050(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCoinManager");
		return ptr;
	}


	int GetHaveCoinNumber();
	TArray<struct FJackCoin_ExchageItem> GetExchangeItemList(const struct FName& ShopId, bool bSort);
	bool GetCoinShopDataTable(const struct FName& ShopId, struct FJackDataTableCoinShop* OutCoinShopTable);
	bool GetCoinExchangeDataTable(const struct FName& PrizeId, struct FJackDataTableCoinExchange* OutCoinExchangeTable);
	bool ExchangeItem(const struct FName& PrizeId, int PrizeCount);
	void DebugBpValueGetSet();
	bool CheckPrizeSoldOut(const struct FName& PrizeId);
	bool CheckPrizeMamonoExchange(const struct FName& PrizeId);
};


// Class JackGame.JackPhysicalCollideBase
// 0x0000 (0x0038 - 0x0038)
class UJackPhysicalCollideBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicalCollideBase");
		return ptr;
	}

};


// Class JackGame.JackCollideEffectTable
// 0x0120 (0x0158 - 0x0038)
class UJackCollideEffectTable : public UJackPhysicalCollideBase
{
public:
	class UClass*                                      Default;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Earth;                                                    // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      EarthDry;                                                 // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Mud;                                                      // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Stone;                                                    // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Wood;                                                     // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      WoodBoard;                                                // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      WoodDamaged;                                              // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      WoodThick;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SuspensionBridge;                                         // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SandStone;                                                // 0x0088(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Sand;                                                     // 0x0090(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Gravel;                                                   // 0x0098(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BurntSand;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Water;                                                    // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Shallow;                                                  // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      OceanFloor;                                               // 0x00B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Snow;                                                     // 0x00C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Ice;                                                      // 0x00C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Grass;                                                    // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Leaf;                                                     // 0x00D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Straw;                                                    // 0x00E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BrownGrass;                                               // 0x00E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Cloth;                                                    // 0x00F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ClothThick;                                               // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Metal;                                                    // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Coin;                                                     // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Flesh;                                                    // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Ladder;                                                   // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Rope;                                                     // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Poison;                                                   // 0x0128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Lava;                                                     // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Ivy;                                                      // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Barrier;                                                  // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ColdLava;                                                 // 0x0148(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CleftLava;                                                // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCollideEffectTable");
		return ptr;
	}


	class UClass* GetCollideEffectClassBySurfaceType(TEnumAsByte<EPhysicalSurface> SurfaceType);
	class UClass* GetCollideEffectClassByHitResult(const struct FHitResult& HitResult);
};


// Class JackGame.JackCollideSoundTable
// 0x0120 (0x0158 - 0x0038)
class UJackCollideSoundTable : public UJackPhysicalCollideBase
{
public:
	class USoundBase*                                  Default;                                                  // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Earth;                                                    // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  EarthDry;                                                 // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Mud;                                                      // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Stone;                                                    // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Wood;                                                     // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  WoodBoard;                                                // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  WoodDamaged;                                              // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  WoodThick;                                                // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  SuspensionBridge;                                         // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  SandStone;                                                // 0x0088(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Sand;                                                     // 0x0090(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Gravel;                                                   // 0x0098(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  BurntSand;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Water;                                                    // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Shallow;                                                  // 0x00B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  OceanFloor;                                               // 0x00B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Snow;                                                     // 0x00C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Ice;                                                      // 0x00C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Grass;                                                    // 0x00D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Leaf;                                                     // 0x00D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Straw;                                                    // 0x00E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  BrownGrass;                                               // 0x00E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Cloth;                                                    // 0x00F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  ClothThick;                                               // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Metal;                                                    // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Coin;                                                     // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Flesh;                                                    // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Ladder;                                                   // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Rope;                                                     // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Poison;                                                   // 0x0128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Lava;                                                     // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Ivy;                                                      // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  Barrier;                                                  // 0x0140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  ColdLava;                                                 // 0x0148(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundBase*                                  CleftLava;                                                // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCollideSoundTable");
		return ptr;
	}


	class USoundBase* GetCollideSoundBySurfaceType(TEnumAsByte<EPhysicalSurface> SurfaceType);
	class USoundBase* GetCollideSoundByHitResult(const struct FHitResult& HitResult);
};


// Class JackGame.JackColorFadeTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackColorFadeTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackColorFadeTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCommandDispatcher
// 0x0028 (0x0060 - 0x0038)
class UJackCommandDispatcher : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnJackCommandSample3;                                     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnJackCommandSample4;                                     // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCommandDispatcher");
		return ptr;
	}


	void SetJackCommandSample5(struct FJackCommandSample5* InCommand);
	void SetJackCommandSample4(struct FJackCommandSample4* InCommand);
	void SetJackCommandSample3(struct FJackCommandSample3* InCommand);
	void SendFromBrueprint(class UObject* Sender, class UObject* Receiver);
	void SendAllFromBrueprint(class UObject* Sender);
	void SendAllCharactersFromBrueprint(class UObject* Sender);
	void SendAllBlueprintsFromBrueprint(class UObject* Sender);
	void JackCommandSample4Delegate__DelegateSignature(const struct FJackCommandSample4& InCommand);
	void JackCommandSample3Delegate__DelegateSignature(const struct FJackCommandSample3& InCommand);
};


// Class JackGame.JackCommandReceiver
// 0x0000 (0x0038 - 0x0038)
class UJackCommandReceiver : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCommandReceiver");
		return ptr;
	}

};


// Class JackGame.JackCommandTypes
// 0x0000 (0x0038 - 0x0038)
class UJackCommandTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCommandTypes");
		return ptr;
	}

};


// Class JackGame.JackCoordSoundDisableTrack
// 0x0008 (0x00B0 - 0x00A8)
class UJackCoordSoundDisableTrack : public UJackToggleBaseTrack
{
public:
	struct FName                                       AttachGroupName;                                          // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCoordSoundDisableTrack");
		return ptr;
	}

};


// Class JackGame.JackCoordSoundDisableTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackCoordSoundDisableTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCoordSoundDisableTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCoordSoundTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackCoordSoundTrack : public UInterpTrack
{
public:
	TArray<struct FJackCoordSoundTrackKey>             KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)
	struct FName                                       AttachGroupName;                                          // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCoordSoundTrack");
		return ptr;
	}

};


// Class JackGame.JackCoordSoundTrackInst
// 0x0010 (0x0048 - 0x0038)
class UJackCoordSoundTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UJackAnimNotify_CoordSoundType*              Notify;                                                   // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCoordSoundTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCrossFadeTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackCrossFadeTrack : public UInterpTrack
{
public:
	TArray<struct FJackCrossFadeTrackKey>              KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCrossFadeTrack");
		return ptr;
	}

};


// Class JackGame.JackCrossFadeTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackCrossFadeTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCrossFadeTrackInst");
		return ptr;
	}

};


// Class JackGame.JackCutSceneController
// 0x0280 (0x0618 - 0x0398)
class AJackCutSceneController : public AActor
{
public:
	struct FScriptMulticastDelegate                    CloseRequestDelegate;                                     // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A8(0x0010) MISSED OFFSET
	struct FName                                       PlayedCutSceneID;                                         // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x03C0(0x00B0) MISSED OFFSET
	TArray<class UJackStreamObjectsHolder*>            MaterialStreamObjectsHolders;                             // 0x0470(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x198];                                     // 0x0480(0x0198) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCutSceneController");
		return ptr;
	}


	void TraceCutSceneMatineeInfo();
	void TerminateCutSceneSystem();
	void SetupMatineeActor(class AMatineeActor* MatineeActor);
	void SetDebugTracePerformanceLogEnable(bool bEnable);
	void SetDebugTraceDynamicResolutionLogEnable(bool bEnable);
	void SetDebugJumpFlag(bool bEnable);
	void SetDebugDisableFixedDynamicResolutionFlagEnable(bool bEnable);
	void RequestWaitLoadTextureActors(TArray<class AActor*> ActorList);
	void RequestMovieVolumeFadeOut(float FadeTime);
	void RequestHighQualityTextureActors(TArray<class AActor*> ActorList);
	void RequestDisableInactiveForParticle(TArray<class AActor*> ActorList);
	void ReleaseMatineeActor(class AMatineeActor* MatineeActor);
	void PreCutScenePlay();
	void PostCutSceneStop();
	void OnSkipAction(EJackUMGCutSceneSkipEvent InSkipEventType, bool bIsFlag);
	void LatentSetupMatineeActor(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class AMatineeActor* MatineeActor);
	bool IsSetupMatineeActorCompleted();
	bool IsDebugTracePerformanceLogEnable();
	bool IsDebugTraceDynamicResolutionLogEnable();
	bool IsDebugJump();
	bool IsDebugDisableFixedDynamicResolutionFlagEnable();
	void InitializeCutSceneSystem(const struct FName& CutSceneID);
	float GetMoviePlayTime();
	TEnumAsByte<EJackWorldWindLevel> GetMatineeWindLevel();
	float GetMatineeWindAngle();
	void EndCutSceneAllPlay();
	void DebugAutoSkipCaption(bool bEnable);
	void DebugAutoSendInterval(float Interval);
	void DebugAutoSendCaption(bool bEnable);
	void BeginCutSceneAllPlay();
};


// Class JackGame.JackCutSceneTextController
// 0x0018 (0x0050 - 0x0038)
class UJackCutSceneTextController : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackCutSceneTextController");
		return ptr;
	}

};


// Class JackGame.JackDamageType
// 0x0008 (0x0058 - 0x0050)
class UJackDamageType : public UDamageType
{
public:
	unsigned char                                      bDisableDamage : 1;                                       // 0x0050(0x0001) (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bBlowOff : 1;                                             // 0x0050(0x0001) (Edit, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDamageType");
		return ptr;
	}

};


// Class JackGame.JackDebugCameraController
// 0x0000 (0x0788 - 0x0788)
class AJackDebugCameraController : public ADebugCameraController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugCameraController");
		return ptr;
	}

};


// Class JackGame.JackDebugCameraHUD
// 0x0000 (0x0480 - 0x0480)
class AJackDebugCameraHUD : public ADebugCameraHUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugCameraHUD");
		return ptr;
	}

};


// Class JackGame.JackDebugLoggerComponent
// 0x0010 (0x0138 - 0x0128)
class UJackDebugLoggerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0128(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugLoggerComponent");
		return ptr;
	}


	void StartLogger(const struct FString& Filename, bool bPrefixActorName);
	void ResetLogSkeltalMeshArray();
	void PrintLogSkeltalMeshArrayCSVRow(TArray<class USkeletalMeshComponent*> MeshArray, float DeltaSeconds);
	void Print(const struct FString& String, bool bAddReturn);
	void EndLogger();
	void AddReturn();
};


// Class JackGame.JackDebugMenu
// 0x0048 (0x03E0 - 0x0398)
class AJackDebugMenu : public AActor
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0398(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenu");
		return ptr;
	}

};


// Class JackGame.JackDebugMenuVariable
// 0x0050 (0x0088 - 0x0038)
class UJackDebugMenuVariable : public UObject
{
public:
	struct FString                                     Name;                                                     // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0048(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariable");
		return ptr;
	}


	void SetTooltip(const struct FString& Tooltip);
};


// Class JackGame.JackDebugMenuVariableBool
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableBool : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableBool");
		return ptr;
	}


	void SetBool(bool NewValue);
	bool GetBool();
};


// Class JackGame.JackDebugMenuVariableByte
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableByte : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableByte");
		return ptr;
	}


	void SetByte(unsigned char NewValue);
	unsigned char GetByte();
};


// Class JackGame.JackDebugMenuVariableCommand
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableCommand : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableCommand");
		return ptr;
	}

};


// Class JackGame.JackDebugMenuVariableFloat
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableFloat : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableFloat");
		return ptr;
	}


	void SetFloat(float NewValue);
	float GetFloat();
};


// Class JackGame.JackDebugMenuVariableInt
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableInt : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableInt");
		return ptr;
	}


	void SetInt(int NewValue);
	int GetInt();
};


// Class JackGame.JackDebugMenuVariableLinearColor
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableLinearColor : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableLinearColor");
		return ptr;
	}


	void SetLinearColor(const struct FLinearColor& NewValue);
	struct FLinearColor GetLinearColor();
};


// Class JackGame.JackDebugMenuVariableMenu
// 0x0000 (0x0088 - 0x0088)
class UJackDebugMenuVariableMenu : public UJackDebugMenuVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableMenu");
		return ptr;
	}

};


// Class JackGame.JackDebugMenuVariableRotator
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableRotator : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableRotator");
		return ptr;
	}


	void SetRotator(const struct FRotator& NewValue);
	struct FRotator GetRotator();
};


// Class JackGame.JackDebugMenuVariableVector
// 0x0010 (0x0098 - 0x0088)
class UJackDebugMenuVariableVector : public UJackDebugMenuVariable
{
public:
	struct FScriptMulticastDelegate                    ValueChanged;                                             // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDebugMenuVariableVector");
		return ptr;
	}


	void SetVector(const struct FVector& NewValue);
	struct FVector GetVector();
};


// Class JackGame.JackDepthOfFieldQualityTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDepthOfFieldQualityTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDepthOfFieldQualityTrack");
		return ptr;
	}

};


// Class JackGame.JackDepthOfFieldQualityTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackDepthOfFieldQualityTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDepthOfFieldQualityTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDestructibleActor
// 0x0138 (0x04D0 - 0x0398)
class AJackDestructibleActor : public AActor
{
public:
	TWeakObjectPtr<class UStaticMeshComponent>         BeforeStaticMeshComponent;                                // 0x0398(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UDestructibleComponent>       DestructibleComponent;                                    // 0x03A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              HitSkipSec;                                               // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TouchCollideSkipSec;                                      // 0x03AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DestructObjectClearSec;                                   // 0x03B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              HitToDestructTimerSec;                                    // 0x03B4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                HitPoint;                                                 // 0x03B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ImpulseStrength;                                          // 0x03BC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DamageAmount;                                             // 0x03C0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DamageRadius;                                             // 0x03C4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bHitCheckAnotherTouch;                                    // 0x03C8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	float                                              HitImpulseSize;                                           // 0x03CC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                NoWakeUpFrameCount;                                       // 0x03D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bWakeUpStatic;                                            // 0x03D4(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	float                                              AllowPlayerHitSec;                                        // 0x03D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              EmargencyDestructSec;                                     // 0x03DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF0];                                      // 0x03E0(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDestructibleActor");
		return ptr;
	}


	bool TryStartStaticMeshWakeUp(class AActor* OtherActor, class UPrimitiveComponent* OtherCompo);
	void TouchCollide(const struct FHitResult& HitResult);
	void SetVisibleDestructibleMesh(bool bOn);
	void SetStatckMeshSleep();
	void SetDitherHiddenActor(TEnumAsByte<EJackCharacterHiddenPurpose> InPurpose, bool bNewHidden, class UCurveBase* Curve, float InRequiredSeconds);
	void SetDebugKiraId(const struct FName& KiraId);
	void OnTouchCollide(const struct FHitResult& HitResult);
	void OnDestruct();
	bool IsInScreen();
	int GetStaticMeshWakeupFrame();
	void AddHit(float NowDamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float NowImpulseStrength, float ForceImpulseDirLength, bool bNoSetSkipTimer);
};


// Class JackGame.JackDestructibleVehicleMonster
// 0x0048 (0x0400 - 0x03B8)
class AJackDestructibleVehicleMonster : public ADestructibleActor
{
public:
	TEnumAsByte<EJackVehicle>                          VehicleType;                                              // 0x03B8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B9(0x0003) MISSED OFFSET
	float                                              DestructDegree;                                           // 0x03BC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bAdditionalRadialForce;                                   // 0x03C0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03C1(0x0003) MISSED OFFSET
	float                                              AdditionalRadialForceStrength;                            // 0x03C4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AdditionalRadialForceRadius;                              // 0x03C8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AdditionalRadialForceSec;                                 // 0x03CC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x03D0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDestructibleVehicleMonster");
		return ptr;
	}


	void RemoveOverlappedComponent(class UPrimitiveComponent* OtherComp);
	void OnHitStaticMesh(class AActor* InActor, const struct FVector& HitLocation, bool bForceHit);
	void OnDestruct(const struct FVector& HitLocation, const struct FVector& ImpluseDir);
	bool IsDestructibleVelocity(class AActor* Actor);
	struct FVector GetImpactLocation(const struct FVector& StartLocation);
	struct FVector GetHitLocation(class AActor* Actor);
	struct FVector GetHitDir(class AActor* Actor);
	void ForceDestruct(class AActor* Actor);
	void AddOverlappedComponent(class UPrimitiveComponent* OtherComp);
};


// Class JackGame.JackDisableDesiredMaxDrawDistanceTrack
// 0x0008 (0x00B0 - 0x00A8)
class UJackDisableDesiredMaxDrawDistanceTrack : public UJackToggleBaseTrack
{
public:
	struct FName                                       TargetActorTag;                                           // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDisableDesiredMaxDrawDistanceTrack");
		return ptr;
	}

};


// Class JackGame.JackDisableDesiredMaxDrawDistanceTrackInst
// 0x0010 (0x0050 - 0x0040)
class UJackDisableDesiredMaxDrawDistanceTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDisableDesiredMaxDrawDistanceTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDisableDynamicResolutionTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackDisableDynamicResolutionTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDisableDynamicResolutionTrack");
		return ptr;
	}

};


// Class JackGame.JackDisableDynamicResolutionTrackInst
// 0x0008 (0x0048 - 0x0040)
class UJackDisableDynamicResolutionTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDisableDynamicResolutionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDispersionManager
// 0x0070 (0x00A8 - 0x0038)
class UJackDispersionManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0038(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDispersionManager");
		return ptr;
	}


	void Unregister(class UObject* TargetObject);
	void Register(class UObject* TargetObject, EJackDisperisonLayer Layer, const struct FName& GroupName);
	bool IsExecutable(class UObject* TargetObject);
	bool STATIC_IsDispersionExecutable(class UObject* TargetObject);
};


// Class JackGame.JackDistributionExponentTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDistributionExponentTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDistributionExponentTrack");
		return ptr;
	}

};


// Class JackGame.JackDistributionExponentTrackInst
// 0x0010 (0x0048 - 0x0038)
class UJackDistributionExponentTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDistributionExponentTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDitherHideComponent
// 0x00C8 (0x01F0 - 0x0128)
class UJackDitherHideComponent : public UActorComponent
{
public:
	struct FString                                     MaterialName;                                             // 0x0128(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0138(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDitherHideComponent");
		return ptr;
	}


	bool SetDitherHidden(TEnumAsByte<EJackHideCompoHiddenPurpose> InPurpose, bool bInHidden, class UCurveBase* Curve, float InRequiredSeconds, bool bForceApplyParameter);
};


// Class JackGame.JackDPICustomScalingRule
// 0x0000 (0x0038 - 0x0038)
class UJackDPICustomScalingRule : public UDPICustomScalingRule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDPICustomScalingRule");
		return ptr;
	}

};


// Class JackGame.JackDR_DecreasesResolutionMaxCountTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_DecreasesResolutionMaxCountTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_DecreasesResolutionMaxCountTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_DecreasesResolutionMaxCountTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_DecreasesResolutionMaxCountTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_DecreasesResolutionMaxCountTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDR_DecreasesResolutionTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_DecreasesResolutionTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_DecreasesResolutionTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_DecreasesResolutionTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_DecreasesResolutionTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_DecreasesResolutionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDR_MaxTimeBudgetTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_MaxTimeBudgetTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_MaxTimeBudgetTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_MaxTimeBudgetTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_MaxTimeBudgetTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_MaxTimeBudgetTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDR_MinTimeBudgetTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_MinTimeBudgetTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_MinTimeBudgetTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_MinTimeBudgetTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_MinTimeBudgetTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_MinTimeBudgetTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDR_ScreenPercentageTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_ScreenPercentageTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_ScreenPercentageTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_ScreenPercentageTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_ScreenPercentageTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_ScreenPercentageTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDR_WaitFramesToLowerResolutionTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_WaitFramesToLowerResolutionTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_WaitFramesToLowerResolutionTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_WaitFramesToLowerResolutionTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_WaitFramesToLowerResolutionTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_WaitFramesToLowerResolutionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDR_WaitFramesToUpperResolutionTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDR_WaitFramesToUpperResolutionTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_WaitFramesToUpperResolutionTrack");
		return ptr;
	}

};


// Class JackGame.JackDR_WaitFramesToUpperResolutionTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackDR_WaitFramesToUpperResolutionTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDR_WaitFramesToUpperResolutionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackDressupCoordinateManager
// 0x00F0 (0x0128 - 0x0038)
class UJackDressupCoordinateManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0038(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDressupCoordinateManager");
		return ptr;
	}

};


// Class JackGame.JackDynamicShadowDistanceMovableLightTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackDynamicShadowDistanceMovableLightTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDynamicShadowDistanceMovableLightTrack");
		return ptr;
	}

};


// Class JackGame.JackDynamicShadowDistanceMovableLightTrackInst
// 0x0010 (0x0048 - 0x0038)
class UJackDynamicShadowDistanceMovableLightTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDynamicShadowDistanceMovableLightTrackInst");
		return ptr;
	}

};


// Class JackGame.JackEffectManager
// 0x0000 (0x0398 - 0x0398)
class AJackEffectManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEffectManager");
		return ptr;
	}

};


// Class JackGame.JackEncountTriggerCapsuleComponent
// 0x0020 (0x07A0 - 0x0780)
class UJackEncountTriggerCapsuleComponent : public UJackCapsuleComponent
{
public:
	unsigned char                                      UnknownData00[0x9];                                       // 0x0780(0x0009) MISSED OFFSET
	bool                                               bDispRandomEncountDistance;                               // 0x0789(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bRandomEncountImmediately;                                // 0x078A(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x078B(0x0001) MISSED OFFSET
	int                                                SplashWeight;                                             // 0x078C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                SplashDiffLevel;                                          // 0x0790(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0794(0x0004) MISSED OFFSET
	float                                              SplashSpeed;                                              // 0x0798(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x079C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEncountTriggerCapsuleComponent");
		return ptr;
	}


	void OnEncountTriggerComponentBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class JackGame.JackEquipmentControlComponentSettings
// 0x0060 (0x0098 - 0x0038)
class UJackEquipmentControlComponentSettings : public UObject
{
public:
	struct FJackEquipmentClassificationInfoDict        DefaultEquipmentClassificationInfoDict;                   // 0x0038(0x0050) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FJackEquipmentClassificationInfoDict> EquipmentClassificationInfoDict;                          // 0x0088(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEquipmentControlComponentSettings");
		return ptr;
	}

};


// Class JackGame.JackEquipmentControlComponent
// 0x0210 (0x03B0 - 0x01A0)
class UJackEquipmentControlComponent : public UJackCharacterComponent
{
public:
	class UClass*                                      EquipmentControlComponentSettings;                        // 0x01A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJackEquipmentClassificationInfoDict        DefaultEquipmentClassificationInfoDict;                   // 0x01A8(0x0050) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FJackEquipmentClassificationInfoDict> EquipmentClassificationInfoDict;                          // 0x01F8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bUnsheathed;                                              // 0x0208(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0209(0x0007) MISSED OFFSET
	TArray<class AJackWeaponBase*>                     EquippedItems;                                            // 0x0210(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst)
	TArray<class AJackWeaponBase*>                     EquippedSubItems;                                         // 0x0220(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData01[0x180];                                     // 0x0230(0x0180) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEquipmentControlComponent");
		return ptr;
	}


	void SetWeaponHiddenInGame(TEnumAsByte<EJackEquipmentHiddenPurpose> Purpose, bool bNewHiddenInGame);
	void SetWeaponBodyHiddenInGame(TEnumAsByte<EJackEquipmentHiddenPurpose> Purpose, bool bNewHiddenInGame);
	void SetWeaponAccessoryHiddenInGame(TEnumAsByte<EJackEquipmentHiddenPurpose> Purpose, bool bNewHiddenInGame);
	void OnBattleStart();
	void OnBattleEnd();
	struct FJackEquipmentClassificationInfoDict K2_GetEquipmentClassificationInfoDict(TEnumAsByte<EJackItem_Classification> InType);
	bool IsWeaponBodyHiddenInGame();
	bool IsWeaponAccessoryHiddenInGame();
	bool IsLeftHandedness();
	bool IsHandWeaponEquipmentInGame();
	class AJackWeaponBase* GetWeaponAccessary(TEnumAsByte<EJackEquippedHand> EquippedHand);
	class AJackWeaponBase* GetWeapon(TEnumAsByte<EJackEquippedHand> EquippedHand);
};


// Class JackGame.JackEventBattleInfo
// 0x01E0 (0x0218 - 0x0038)
class UJackEventBattleInfo : public UObject
{
public:
	struct FName                                       EventBattleID;                                            // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bLoadComplete_MonsterMain;                                // 0x0040(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bLoadComplete_MonsterVoice;                               // 0x0041(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bLoadComplete_MonsterVoiceReload;                         // 0x0042(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0043(0x0005) MISSED OFFSET
	class UJackStreamObjectsHolder*                    StreamObjectsHolder;                                      // 0x0048(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	class UJackStreamObjectsHolder*                    VoiceStreamObjectsHolder;                                 // 0x0050(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FJackDataTableEventBattle                   DataTableRow;                                             // 0x0058(0x0148) (Edit, EditConst)
	bool                                               bBattleField_Valid;                                       // 0x01A0(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	struct FVector                                     BattleField_Location;                                     // 0x01A4(0x000C) (Edit, EditConst, IsPlainOldData)
	struct FVector                                     BattleField_Direction;                                    // 0x01B0(0x000C) (Edit, EditConst, IsPlainOldData)
	struct FJackEventBattlePlayerInfo                  PlayerInfo;                                               // 0x01BC(0x001C) (Edit, EditConst)
	TArray<struct FJackEventBattleMonsterInfo>         MonsterInfoArray;                                         // 0x01D8(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData02[0x10];                                      // 0x01E8(0x0010) MISSED OFFSET
	struct FVector                                     MonsterTroopLocation;                                     // 0x01F8(0x000C) (Edit, EditConst, IsPlainOldData)
	struct FVector                                     Appear_Direction;                                         // 0x0204(0x000C) (Edit, EditConst, IsPlainOldData)
	bool                                               bAppearDirectionUse;                                      // 0x0210(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bInitialUnsheathe;                                        // 0x0211(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0212(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEventBattleInfo");
		return ptr;
	}


	void SetSyuurenjouInfo(const struct FName& SirenID, int BattleIndex);
	void SetPlayerInfo(const struct FVector& BattleStartLocation, const struct FVector& BattleStartDirection);
	void SetMonsterTroopInfo(const struct FVector& TroopLocation);
	void SetMonsterInfo(int EventBattleMonsterIndex, const struct FVector& BattleStartLocation, const struct FVector& BattleStartDirection);
	void SetInitialUnsheathe(bool bUnsheathe);
	void SetBattleFieldInfo(const struct FVector& BattleFieldLocation, const struct FVector& BattleFieldDirection);
	void SetAppearInfo(const struct FVector& AppearDirection);
	TEnumAsByte<EJackFadeColor> GetStartFadeColor();
	TEnumAsByte<EJackFadeColor> GetEndFadeColor();
};


// Class JackGame.JackEventBattleManager
// 0x0050 (0x03E8 - 0x0398)
class AJackEventBattleManager : public AActor
{
public:
	TMap<struct FName, class UJackEventBattleInfo*>    EventBattleInfoMap;                                       // 0x0398(0x0050) (Edit, ExportObject, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEventBattleManager");
		return ptr;
	}


	bool UnloadEventBattle(const struct FName& EventBattleID);
	bool StartEventBattle(class UJackEventBattleInfo* EventBattleInfo, const struct FLatentActionInfo& LatentInfo);
	class UJackEventBattleInfo* LoadEventBattle(const struct FName& EventBattleID, const struct FLatentActionInfo& LatentInfo);
	class UJackEventBattleInfo* GetEventBattleInfo(const struct FName& EventBattleID);
};


// Class JackGame.JackExtraNPCCapsuleComponent
// 0x0010 (0x0770 - 0x0760)
class UJackExtraNPCCapsuleComponent : public UCapsuleComponent
{
public:
	struct FName                                       AttachSocket;                                             // 0x0760(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0768(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackExtraNPCCapsuleComponent");
		return ptr;
	}


	void OnHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
};


// Class JackGame.JackEyeCloseRateTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackEyeCloseRateTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEyeCloseRateTrack");
		return ptr;
	}

};


// Class JackGame.JackEyeLookAtComponent
// 0x0120 (0x02C0 - 0x01A0)
class UJackEyeLookAtComponent : public UJackCharacterComponent
{
public:
	float                                              CurrentHorizontalValue;                                   // 0x01A0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              CurrentVerticalValue;                                     // 0x01A4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              HorizontalValue;                                          // 0x01A8(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              VerticalValue;                                            // 0x01AC(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       SourceSocket;                                             // 0x01B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       TargetSocket;                                             // 0x01B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEyeLookAtEnable;                                         // 0x01C0(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01C1(0x0003) MISSED OFFSET
	float                                              TransitionSpeed;                                          // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ACharacter*                                  TargetCharacter;                                          // 0x01C8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class USceneComponent*                             TargetSceneComponent;                                     // 0x01D0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FVector                                     TargetLocation;                                           // 0x01D8(0x000C) (Edit, EditConst, IsPlainOldData)
	bool                                               bSynchronizedEyeLookAt;                                   // 0x01E4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xDB];                                      // 0x01E5(0x00DB) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEyeLookAtComponent");
		return ptr;
	}


	void SetTransitionSpeed(float Speed);
	void SetTargetSceneComponent(class USceneComponent* InSceneComponent, const struct FName& InSocketName);
	void SetTargetLocation(const struct FVector& InLocation);
	void SetTargetCharacter(class ACharacter* InCharacter, const struct FName& InSocketName);
	void SetSynchronizedEyeLookAt(bool bNew);
	void SetEyeLookAtEnable(bool bNew);
	void OnSynchronizedEyeLookAtChanged();
	void OnEyeLookAtEnableChanged();
	bool IsEyeLookAtRunning();
	float GetTransitionSpeed();
	struct FName GetTargetSocketName();
	class USceneComponent* GetTargetSceneComponent();
	struct FVector GetTargetLocation();
	class ACharacter* GetTargetCharacter();
	bool GetSynchronizedEyeLookAt();
	bool GetEyeLookAtEnable();
	float GetCurrentVerticalValue();
	float GetCurrentHorizontalValue();
	void ClearEyeLookAtParameters();
};


// Class JackGame.JackEyeLookAtTrack
// 0x0028 (0x00D0 - 0x00A8)
class UJackEyeLookAtTrack : public UJackToggleBaseTrack
{
public:
	struct FName                                       LookAtGroupName;                                          // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LookAtBoneName;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PositionThreshold;                                        // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FJackEyeLookAtTrackInfo>             LookAtInfos;                                              // 0x00C0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEyeLookAtTrack");
		return ptr;
	}

};


// Class JackGame.JackEyeLookAtTrackInst
// 0x0010 (0x0050 - 0x0040)
class UJackEyeLookAtTrackInst : public UJackToggleBaseTrackInst
{
public:
	bool                                               bLookAtEnable;                                            // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bDefaultAutoLookAt;                                       // 0x0041(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	float                                              IntrpSec;                                                 // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NowKeyIndex;                                              // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEyeLookAtTrackInst");
		return ptr;
	}

};


// Class JackGame.JackFacialControlComponent
// 0x0B30 (0x0CD0 - 0x01A0)
class UJackFacialControlComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x558];                                     // 0x01A0(0x0558) MISSED OFFSET
	float                                              FacialModeChangeDuration;                                 // 0x06F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SelectedPoseChangeDuration;                               // 0x06FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SelectedUpperFacePose;                                    // 0x0700(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SelectedLowerFacePose;                                    // 0x0708(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Tone;                                                     // 0x0710(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Emotion;                                                  // 0x0714(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EJackEyeControl                                    EyeControlType;                                           // 0x0718(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0719(0x0003) MISSED OFFSET
	float                                              EyeClosingByBlinkTime;                                    // 0x071C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              EyeClosingByBlinkRemainingTime;                           // 0x0720(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              BlinkDurationTimeFromOpenToClose;                         // 0x0724(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlinkDurationTimeFromCloseToOpen;                         // 0x0728(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           EyeCurveFromCloseToOpen;                                  // 0x072C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           EyeCurveFromOpenToClose;                                  // 0x072D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xA];                                       // 0x072E(0x000A) MISSED OFFSET
	float                                              RandomBlinkRemainingTime;                                 // 0x0738(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FVector2D                                   RandomBlinkTimeRange;                                     // 0x073C(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0744(0x0004) MISSED OFFSET
	struct FName                                       RandomBlinkCurveName;                                     // 0x0748(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               RandomBlinkTargetAnim;                                    // 0x0750(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	EJackVowel                                         LastPhraseVowel;                                          // 0x0758(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0759(0x0003) MISSED OFFSET
	float                                              TalkingSpeed;                                             // 0x075C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LipSyncTime;                                              // 0x0760(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LipSyncBlendTime;                                         // 0x0764(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LipSyncBlendWeight;                                       // 0x0768(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LipSyncMasterBlendWeight_UpTime;                          // 0x076C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LipSyncMasterBlendWeight_DownTime;                        // 0x0770(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0774(0x0004) MISSED OFFSET
	struct FJackVowelSetting                           VowelSettings[0xB];                                       // 0x0778(0x0018) (Edit)
	float                                              VowelElapsedTime;                                         // 0x0880(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bRandomLipSyncRunning;                                    // 0x0884(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData06[0x23];                                      // 0x0885(0x0023) MISSED OFFSET
	struct FName                                       RandomMouthCurveName;                                     // 0x08A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimSequence*                               RandomMouthTargetAnim;                                    // 0x08B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	EJackRandomLipSyncMode                             RandomLipSyncMode;                                        // 0x08B8(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x08B9(0x0007) MISSED OFFSET
	class UDataTable*                                  FacePoseSequenceDataTable;                                // 0x08C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  AnimDataTable;                                            // 0x08C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           FadeInEasingFunc;                                         // 0x08D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           FadeOutEasingFunc;                                        // 0x08D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x08D2(0x0006) MISSED OFFSET
	class UMaterialInterface*                          FaceMaterial;                                             // 0x08D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                FaceMaterialIndex;                                        // 0x08E0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x08E4(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    MaterialInstanceDynamic;                                  // 0x08E8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                MaxBlendCount;                                            // 0x08F0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EJackUpperFacialState                              UpperFacialAnimState;                                     // 0x08F4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EJackLowerFacialState                              LowerFacialAnimState;                                     // 0x08F5(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseEyeBallPositionOffset;                                // 0x08F6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x08F7(0x0001) MISSED OFFSET
	float                                              BlinkPoseEyeOffset;                                       // 0x08F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x08FC(0x0004) MISSED OFFSET
	TArray<struct FJackEyeCloseFacialPose>             BlinkFacialPoses;                                         // 0x0900(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData12[0xA0];                                      // 0x0910(0x00A0) MISSED OFFSET
	struct FName                                       DefaultFacialPoseName;                                    // 0x09B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       CurrentFacialPoseName;                                    // 0x09B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              R;                                                        // 0x09C0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   UVClampRange;                                             // 0x09C4(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x114];                                     // 0x09CC(0x0114) MISSED OFFSET
	bool                                               bControlEnabled;                                          // 0x0AE0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0AE1(0x0003) MISSED OFFSET
	int                                                ControlEnabledMaxLODLevel;                                // 0x0AE4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0xD0];                                      // 0x0AE8(0x00D0) MISSED OFFSET
	float                                              EyelidLength;                                             // 0x0BB8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x0BBC(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  DoubleEyelidMaterials;                                    // 0x0BC0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData17[0x100];                                     // 0x0BD0(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFacialControlComponent");
		return ptr;
	}


	void SetUpperFacialAnimStateEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetUpperFacialAnimState(EJackUpperFacialState NewState, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetToneEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetTone(float InTone, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetTalkingSpeedEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetTalkingSpeed(float NewTalkingSpeed, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetSelectedUpperFacePoseEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetSelectedUpperFacePose(const struct FName& InPoseName, TEnumAsByte<EJackFacialControlLayer> Layer, float Weight);
	void SetSelectedLowerFacePoseEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetSelectedLowerFacePose(const struct FName& InPoseName, TEnumAsByte<EJackFacialControlLayer> Layer, float Weight);
	void SetSelectedFacePoseChangeDurationEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetSelectedFacePoseChangeDuration(float Value, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetRandomPhrase();
	void SetRandomLipSyncModeEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetRandomLipSyncMode(EJackRandomLipSyncMode InMode, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetRandomBlinkModeEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetRandomBlinkMode(EJackRandomBlinkMode InMode, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetOverridePhraseVowelEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetOverridePhraseVowel(EJackVowel InLastPhraseVowel, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetManualLipSyncModeVowelBlendWeight(EJackVowel Vowel, float VowelWeight, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetManualLipSyncModeEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetManualLipSyncModeBlendWeight(float Weight, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLowerFacialAnimStateEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLowerFacialAnimState(EJackLowerFacialState NewState, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLipSyncTime(float InTime);
	void SetLipSyncBlendWeightScaleEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLipSyncBlendWeightScale(float InScale, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLipSyncBlendWeightEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLipSyncBlendWeight(float InWeight, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLipSyncBlendTimeEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLipSyncBlendTime(float InTime, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetLastPhraseVowel(EJackVowel InLastPhraseVowel);
	void SetForceClosedEyesEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetForceClosedEyes(bool bValue, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetFacialModeChangeDuration(float InDuration);
	void SetEyeCurveTimeFromOpenToCloseEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEyeCurveTimeFromOpenToClose(TEnumAsByte<EEasingFunc> EasingFunc, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEyeCurveFromCloseToOpenEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEyeCurveFromCloseToOpen(TEnumAsByte<EEasingFunc> EasingFunc, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEyeCloseRateEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEyeCloseRate(float Rate, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEmotionEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetEmotion(float InEmotion, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetBlinkDurationTimeFromOpenToCloseEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetBlinkDurationTimeFromOpenToClose(float Time, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetBlinkDurationTimeFromCloseToOpenEnable(bool bEnable, TEnumAsByte<EJackFacialControlLayer> Layer);
	void SetBlinkDurationTimeFromCloseToOpen(float Time, TEnumAsByte<EJackFacialControlLayer> Layer);
	void ResetRandomBlinkRemaingTime();
	void OnTalkingSpeedChanged();
	bool IsUpperFacialAnimState(EJackUpperFacialState State);
	bool IsRandomLipSyncRunning();
	bool IsOpenedEyesByBlink();
	bool IsLowerFacialAnimState(EJackLowerFacialState State);
	bool IsClosedEyesByBlink();
	bool IsClosedEyes();
	float GetVowelSecondNoteBlendWeight();
	EJackUpperFacialState GetUpperFacialAnimState();
	void GetUpperBlendInfo(TArray<struct FJackFacialAnimationBlendInfo>* OutBlendInfo);
	float GetTone();
	float GetTalkingSpeed();
	struct FName GetSelectedUpperFacePoseByLayer(TEnumAsByte<EJackFacialControlLayer> Layer);
	float GetSelectedUpperFacePoseBlendWeight();
	struct FName GetSelectedUpperFacePose();
	struct FName GetSelectedLowerFacePoseByLayer(TEnumAsByte<EJackFacialControlLayer> Layer);
	float GetSelectedLowerFacePoseBlendWeight();
	struct FName GetSelectedLowerFacePose();
	float GetSelectedFacePoseChangeDuration();
	float GetRightEyeBlinkPoseWeight();
	EJackRandomLipSyncMode GetRandomLipSyncMode();
	EJackRandomBlinkMode GetRandomBlinkMode();
	EJackLowerFacialState GetLowerFacialAnimState();
	void GetLowerBlendInfo(TArray<struct FJackFacialAnimationBlendInfo>* OutBlendInfo);
	float GetLipSyncTime();
	float GetLipSyncBlendWeightScale(TEnumAsByte<EJackFacialControlLayer> Layer);
	float GetLipSyncBlendWeight();
	float GetLipSyncBlendTime();
	float GetLeftEyeBlinkPoseWeight();
	EJackVowel GetLastPhraseVowel();
	bool GetInterruptFacePoseIndexInCurveNames(EJackFacialAnimCategory InCategory, int* OutSelectedSequenceIndex, TArray<struct FName>* OutCurveNames);
	bool GetForceClosedEyes();
	float GetFacialModeChangeDuration();
	float GetFacialAnimSequenceFrame(const struct FName& Name);
	bool GetFacialAnimCurve(const struct FName& Name, struct FJackDataTableFacialAnimCurve* OutCurve);
	TEnumAsByte<EEasingFunc> GetEyeCurveTimeFromOpenToClose();
	TEnumAsByte<EEasingFunc> GetEyeCurveTimeFromCloseToOpen();
	float GetEyeCloseRate();
	float GetEmotion();
	class USkeletalMeshComponent* GetCharacterMesh();
	class UAnimInstance* GetCharacterAnimInstance();
	struct FVector GetBlinkPoseEyeOffset();
	float GetBlinkDurationTimeFromOpenToClose();
	float GetBlinkDurationTimeFromCloseToOpen();
	void CallOnPredictedLODLevelChanged(class USkinnedMeshComponent* SkinndMeshComponent, int NewLODLevel, int MaxLODLevel);
};


// Class JackGame.JackFacialInfo
// 0x0020 (0x0058 - 0x0038)
class UJackFacialInfo : public UObject
{
public:
	TArray<struct FJackFacialInfo_Eye>                 Eye;                                                      // 0x0038(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackFacialInfo_Mouth>               Mouth;                                                    // 0x0048(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFacialInfo");
		return ptr;
	}

};


// Class JackGame.JackFacialPresetTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackFacialPresetTrack : public UInterpTrack
{
public:
	class UDataTable*                                  PresetTable;                                              // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackFacialPresetTrackKey>           KeyArray;                                                 // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFacialPresetTrack");
		return ptr;
	}

};


// Class JackGame.JackFacialPresetTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackFacialPresetTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFacialPresetTrackInst");
		return ptr;
	}

};


// Class JackGame.JackFacilityManager
// 0x0038 (0x0070 - 0x0038)
class UJackFacilityManager : public UObject
{
public:
	class UDataTable*                                  ShopDataTable;                                            // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  InnDataTable;                                             // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ChurchDataTable;                                          // 0x0048(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  BankDataTable;                                            // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BasePrice_Revive;                                         // 0x0058(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BasePrice_PoisonTreatment;                                // 0x005C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BasePrice_CurseRelease;                                   // 0x0060(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BasePrice_TokugiReset;                                    // 0x0064(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFacilityManager");
		return ptr;
	}


	bool GetShopDataTable(const struct FName& ShopId, struct FJackDataTableShop* OutShopTable);
	bool GetInnDataTable(const struct FName& InnID, struct FJackDataTableInn* OutInnTable);
	bool GetChurchDataTable(const struct FName& ChurchId, struct FJackDataTableChurch* OutChurchTable);
	bool GetBankDataTable(const struct FName& BankID, struct FJackDataTableBank* OutBankTable);
};


// Class JackGame.JackFieldAttackManager
// 0x0098 (0x00D0 - 0x0038)
class UJackFieldAttackManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	class UClass*                                      DamageCollideEffects[0x10];                               // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFieldAttackManager");
		return ptr;
	}

};


// Class JackGame.JackFieldPlayerNakamaKaiwaController
// 0x0020 (0x03B8 - 0x0398)
class AJackFieldPlayerNakamaKaiwaController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0398(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFieldPlayerNakamaKaiwaController");
		return ptr;
	}

};


// Class JackGame.JackFieldPlayerUmaRaceController
// 0x0010 (0x0B40 - 0x0B30)
class AJackFieldPlayerUmaRaceController : public AJackFieldPlayerController
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0B30(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFieldPlayerUmaRaceController");
		return ptr;
	}


	void OnOpenGiveUpWindowEvent();
	void Initialize(class AJackPlayableCharacter* PlayableCharacter);
	void Finalize();
};


// Class JackGame.JackPlayableCharacter
// 0x0350 (0x1440 - 0x10F0)
class AJackPlayableCharacter : public AJackCharacter
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x10F0(0x0010) MISSED OFFSET
	class UJackInteractorComponent*                    InteractorComponent;                                      // 0x1100(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackAnimMontageWaiterComponent*             CachedAnimMontageWaiterComponent;                         // 0x1108(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	float                                              AutoRunFlexibility;                                       // 0x1110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementInputRate;                                        // 0x1114(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x1118(0x0018) MISSED OFFSET
	struct FRotator                                    TurnRotationRate;                                         // 0x1130(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x113C(0x0014) MISSED OFFSET
	class UJackPlayerCameraComponent*                  PlayerCamera;                                             // 0x1150(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<struct FJackCameraDataDict>                 CameraDataClasses;                                        // 0x1158(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData03[0x4];                                       // 0x1168(0x0004) MISSED OFFSET
	float                                              BaseTurnRate;                                             // 0x116C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x1170(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1A4];                                     // 0x1174(0x01A4) MISSED OFFSET
	bool                                               bCanAutoRun;                                              // 0x1318(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanStopAutoRunOnCancelButton;                            // 0x1319(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanControlPlayerCondition;                               // 0x131A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x131B(0x0001) MISSED OFFSET
	float                                              BattleStartCameraArmLength;                               // 0x131C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BattleStartCameraBasePitch;                               // 0x1320(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BattleStartCameraYawOffset;                               // 0x1324(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BattleMaxMoveSpeed;                                       // 0x1328(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BattleIgnoreLockOnTargetCharacterDistance;                // 0x132C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x18];                                      // 0x1330(0x0018) MISSED OFFSET
	TEnumAsByte<EJackVehicle>                          ControlGuideUIType;                                       // 0x1348(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x1349(0x0003) MISSED OFFSET
	float                                              SimpleNavigationDefaultMovementSpeed;                     // 0x134C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimpleNavigationDefaultRotationSpeed;                     // 0x1350(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x1C];                                      // 0x1354(0x001C) MISSED OFFSET
	struct FJackLDT_NPCList                            UniqueID;                                                 // 0x1370(0x0010) (Edit, DisableEditOnInstance)
	TEnumAsByte<EJackPipipiType>                       PipipiType;                                               // 0x1380(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreWeaponStyleWhenAttack;                             // 0x1381(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInteractionCapsuleOverride;                              // 0x1382(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0xD];                                       // 0x1383(0x000D) MISSED OFFSET
	struct FTransform                                  InteractionCapsuleRelativeTransform;                      // 0x1390(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractionCapsuleHalfHeight;                             // 0x13C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InteractionCapsuleRadius;                                 // 0x13C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x5A];                                      // 0x13C8(0x005A) MISSED OFFSET
	bool                                               bCameraFollowingInJump;                                   // 0x1422(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bJumpOnPressCancelButton;                                 // 0x1423(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InterpJumpEyeViewLocationZ;                               // 0x1424(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpZLocationInterpRateOnGroundSec;                       // 0x1428(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bFPSEnableInJump;                                         // 0x142C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bMugenJump;                                               // 0x142D(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowToOpenMainMenuInTheAir;                             // 0x142E(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowToOpenWorldMapInTheAir;                             // 0x142F(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowToBenriButtonActionInTheAir;                        // 0x1430(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0xF];                                       // 0x1431(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableCharacter");
		return ptr;
	}


	void SimpleAutoNavigationWithEasingTo(const struct FVector& InLocation, const struct FRotator& InRotation, float InSeconds, TEnumAsByte<EEasingFunc> EasingFunc);
	void SetNowIdle(bool bInIdle);
	void PushCameraData(class UClass* CameraDataClass, float InterpSpeed);
	void PopCameraData(float InterpSpeed);
	void OnTeleportSucceededSignature__DelegateSignature();
	void OnReleaseJumpButton();
	void OnPressJumpButton();
	void OnMoveInputDisableChanged(bool bNewCondition);
	void OnInputDisableChanged(bool bNewCondition);
	void OnEndTalk(class AActor* OtherActor);
	void OnChangePlayableMovementDefault(TEnumAsByte<EJackPlayableMovementDefault> Prev, TEnumAsByte<EJackPlayableMovementDefault> Next);
	void OnBeginTalk(class AActor* OtherActor);
	void Latent_RootMotionEverything(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float TimeOutSec);
	void Latent_NowIdling(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float TimeOutSec);
	void Latent_NonWalking(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Latent_FallingOnGround(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Latent_Falling(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bFallingOnGround);
	bool IsPlayableMovementType(TEnumAsByte<EJackPlayableMovement> Type);
	bool IsNowIdle();
	bool IsEncountable();
	bool IsAutoRun();
	class UJackPlayerCameraComponent* GetPlayerCamera();
	TEnumAsByte<EJackPlayableMovement> GetPlayableMovementType();
	class UJackAnimMontageWaiterComponent* GetJackAnimMontageWaiterComponent();
};


// Class JackGame.JackFishPlayerCharacter
// 0x0000 (0x1440 - 0x1440)
class AJackFishPlayerCharacter : public AJackPlayableCharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFishPlayerCharacter");
		return ptr;
	}

};


// Class JackGame.JackFlagJumperTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackFlagJumperTrack : public UInterpTrack
{
public:
	TArray<struct FJackFlagJumperKeyValue>             KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFlagJumperTrack");
		return ptr;
	}

};


// Class JackGame.JackFloatMaterialParameterTrack
// 0x0008 (0x00D0 - 0x00C8)
class UJackFloatMaterialParameterTrack : public UInterpTrackFloatMaterialParam
{
public:
	bool                                               bApplyToAllMaterial;                                      // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFloatMaterialParameterTrack");
		return ptr;
	}

};


// Class JackGame.JackFloatMaterialParameterTrackInst
// 0x0030 (0x00A0 - 0x0070)
class UJackFloatMaterialParameterTrackInst : public UInterpTrackInstFloatMaterialParam
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstancesToAll;                                   // 0x0070(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloatsToAll;                                         // 0x0080(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefsToAll;                               // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFloatMaterialParameterTrackInst");
		return ptr;
	}

};


// Class JackGame.JackFootIKComponent
// 0x0300 (0x04A0 - 0x01A0)
class UJackFootIKComponent : public UJackCharacterComponent
{
public:
	bool                                               bFootIKEnabled;                                           // 0x01A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bAdjustHeightEnabled;                                     // 0x01A1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bFitHighestOnAdjuestHeight;                               // 0x01A2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x01A3(0x0001) MISSED OFFSET
	float                                              AdjustHeightMin;                                          // 0x01A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AdjustHeightMax;                                          // 0x01A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	TArray<struct FJackFootIKDict>                     FootIKs;                                                  // 0x01B0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FixMeUpSpeed;                                             // 0x01C0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              FixMeDownSpeed;                                           // 0x01C4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AdjustHeightMoveRateMaxVelocity;                          // 0x01C8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              IKAlphaMoveRateMaxVelocity;                               // 0x01CC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MeshRootRelativeLocation;                                 // 0x01D0(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	bool                                               bFourFootIK;                                              // 0x01DC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bFourFootIKForInterruptIK;                                // 0x01DD(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x232];                                     // 0x01DE(0x0232) MISSED OFFSET
	float                                              TraceLocationThreshould;                                  // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseHitResultNormal;                                      // 0x0414(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0415(0x0002) MISSED OFFSET
	bool                                               bCalcAdjustHeightBlendWeight_ManualSetting;               // 0x0417(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CalcAdjustHeightBlendWeight_MovementSpeedMax;             // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CalcAdjustHeigthBlendWeight_MovementSpeedBlendWeightMax;  // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           CalcAdjustHeightBlendWeight_MovementSpeedBlendCurve;      // 0x0420(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0421(0x0003) MISSED OFFSET
	float                                              CalcAdjustHeightBlendWeight_GroundDegreeMax;              // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CalcAdjustHeigthBlendWeight_GroundDegreeBlendWeightMax;   // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           CalcAdjustHeightBlendWeight_GroundDegreeBlendCurve;       // 0x042C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x5B];                                      // 0x042D(0x005B) MISSED OFFSET
	bool                                               bShowTraceFootIK;                                         // 0x0488(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x17];                                      // 0x0489(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFootIKComponent");
		return ptr;
	}


	void SetFootIKDisable(bool bDisable, TEnumAsByte<EJackFootIKControlPurpose> Purpose);
	void SetAdjustMeshHeightZero(bool bOn);
	void SetAdjustMeshHeightDisable(bool bDisable, TEnumAsByte<EJackFootIKControlPurpose> Purpose);
	void ResetRelativeLocationDefault();
	class USceneComponent* GetMeshRootComponent();
};


// Class JackGame.JackFootIKTrack
// 0x0008 (0x00B0 - 0x00A8)
class UJackFootIKTrack : public UJackToggleBaseTrack
{
public:
	bool                                               bIsKeepFootLock;                                          // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFootIKTrack");
		return ptr;
	}

};


// Class JackGame.JackFootSoundTrack
// 0x0020 (0x00B0 - 0x0090)
class UJackFootSoundTrack : public UInterpTrack
{
public:
	TArray<struct FJackFootSoundTrackKey>              KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)
	struct FName                                       AttachGroupName;                                          // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPlayOnMASTS;                                             // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFootSoundTrack");
		return ptr;
	}

};


// Class JackGame.JackFootSoundTrackInst
// 0x0010 (0x0048 - 0x0038)
class UJackFootSoundTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UJackAnimNotify_FootstepSoundType*           Notify;                                                   // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFootSoundTrackInst");
		return ptr;
	}

};


// Class JackGame.JackForcedLODForParticleTrack
// 0x0008 (0x00B8 - 0x00B0)
class UJackForcedLODForParticleTrack : public UInterpTrackFloatBase
{
public:
	struct FName                                       TargetActorTag;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForcedLODForParticleTrack");
		return ptr;
	}

};


// Class JackGame.JackForcedLODForParticleTrackInst
// 0x0018 (0x0050 - 0x0038)
class UJackForcedLODForParticleTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForcedLODForParticleTrackInst");
		return ptr;
	}

};


// Class JackGame.JackForcedLODTrack
// 0x0008 (0x00B8 - 0x00B0)
class UJackForcedLODTrack : public UInterpTrackFloatBase
{
public:
	bool                                               bApplyToChildren;                                         // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForcedLODTrack");
		return ptr;
	}

};


// Class JackGame.JackForcedLODTrackInst
// 0x0018 (0x0050 - 0x0038)
class UJackForcedLODTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForcedLODTrackInst");
		return ptr;
	}

};


// Class JackGame.JackForceLoadReductionDisableForOuterNPCTrack
// 0x0010 (0x00B8 - 0x00A8)
class UJackForceLoadReductionDisableForOuterNPCTrack : public UJackToggleBaseTrack
{
public:
	TArray<struct FName>                               TargetNPCList;                                            // 0x00A8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForceLoadReductionDisableForOuterNPCTrack");
		return ptr;
	}

};


// Class JackGame.JackForceLoadReductionDisableForOuterNPCTrackInst
// 0x0010 (0x0050 - 0x0040)
class UJackForceLoadReductionDisableForOuterNPCTrackInst : public UJackToggleBaseTrackInst
{
public:
	TArray<TWeakObjectPtr<class AJackScheduledNPC>>    TargetNPCInstance;                                        // 0x0040(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForceLoadReductionDisableForOuterNPCTrackInst");
		return ptr;
	}

};


// Class JackGame.JackForceUpdateAnimationInMatineeTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackForceUpdateAnimationInMatineeTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForceUpdateAnimationInMatineeTrack");
		return ptr;
	}

};


// Class JackGame.JackForceUpdateAnimationInMatineeTrackInst
// 0x0008 (0x0048 - 0x0040)
class UJackForceUpdateAnimationInMatineeTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackForceUpdateAnimationInMatineeTrackInst");
		return ptr;
	}

};


// Class JackGame.JackFPSCameraData
// 0x0058 (0x0098 - 0x0040)
class UJackFPSCameraData : public UJackCameraData
{
public:
	struct FVector                                     CameraStartOffset;                                        // 0x0040(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    CameraRotationMax;                                        // 0x004C(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    CameraRotationMin;                                        // 0x0058(0x000C) (Edit, IsPlainOldData)
	float                                              MoveLimitRadiusXY;                                        // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveLimitZMax;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveLimitZMin;                                            // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveCameraSpeed;                                          // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraCollideRadius;                                      // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CameraCollisionChannel;                                   // 0x0078(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              MaxZoomFov;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinZoomFov;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomMaxSpeed;                                             // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomMinSpeed;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUpSpeedRate;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDownSpeedRate;                                        // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFPSCameraData");
		return ptr;
	}

};


// Class JackGame.JackFriendAIController
// 0x0668 (0x0BE8 - 0x0580)
class AJackFriendAIController : public AJackAIController
{
public:
	unsigned char                                      UnknownData00[0x648];                                     // 0x0580(0x0648) MISSED OFFSET
	class UAnimMontage*                                PlayAnimMontage;                                          // 0x0BC8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0BD0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendAIController");
		return ptr;
	}

};


// Class JackGame.JackFriendAnimationSMComponent
// 0x0010 (0x01B0 - 0x01A0)
class UJackFriendAnimationSMComponent : public UJackCharacterComponent
{
public:
	class UJackFriendAnimationStateMachine*            StateMachine;                                             // 0x01A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      StateMachineClass;                                        // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendAnimationSMComponent");
		return ptr;
	}

};


// Class JackGame.JackFriendAnimationStateMachine
// 0x00A8 (0x00E0 - 0x0038)
class UJackFriendAnimationStateMachine : public UObject
{
public:
	struct FName                                       DefaultState;                                             // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       DamageState;                                              // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              DamageBlendRate;                                          // 0x0048(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bDead;                                                    // 0x004C(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bDamaging;                                                // 0x004D(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSpecialMove;                                             // 0x004E(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	int                                                MontagePlayCount;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                BlendRateCount;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       OddEffectMotionID;                                        // 0x0058(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0060(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendAnimationStateMachine");
		return ptr;
	}

};


// Class JackGame.JackPlayableAnimInstance
// 0x0100 (0x0CE0 - 0x0BE0)
class UJackPlayableAnimInstance : public UJackAnimInstance
{
public:
	float                                              MovementYaw;                                              // 0x0BE0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnimationPlayRate;                                // 0x0BE4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInTheAir;                                              // 0x0BE8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0BE9(0x0003) MISSED OFFSET
	float                                              DamageAnimationApplyRate;                                 // 0x0BEC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              JumpUpperBodyAnimationWeight;                             // 0x0BF0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              JumpLowerBodyAnimationWeight;                             // 0x0BF4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bJumpEndEnabled;                                          // 0x0BF8(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0BF9(0x0003) MISSED OFFSET
	float                                              MovementRateInterpSpeed;                                  // 0x0BFC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpEndAnimationLength;                                   // 0x0C00(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpExpUpperMovementRateScale;                            // 0x0C04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpLinearUpperMovementRateScale;                         // 0x0C08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpExpUpperExp;                                          // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpExpLowerMovementRateScale;                            // 0x0C10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpLinearLowerMovementRateScale;                         // 0x0C14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpExpLowerOffset;                                       // 0x0C18(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpExpLowerScale;                                        // 0x0C1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JumpExpLowerExp;                                          // 0x0C20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasTorch;                                                // 0x0C24(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0C25(0x0003) MISSED OFFSET
	float                                              JumpTimer;                                                // 0x0C28(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              JumpAddMotionblendWeight;                                 // 0x0C2C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MovementAnimationTranslationMultiplier;                   // 0x0C30(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7C];                                      // 0x0C34(0x007C) MISSED OFFSET
	float                                              MoveMotionRateWalkSpeed;                                  // 0x0CB0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootMotionMultiChangeSpeed;                               // 0x0CB4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootMotionMultiLimitMin;                                  // 0x0CB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootMotionMultiThreshold;                                 // 0x0CBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WaitColliderMultiplier;                                   // 0x0CC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x0CC4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableAnimInstance");
		return ptr;
	}


	void SetMovementRateDirectly(float InMovementRate);
	void ResetJumpTimer();
	bool IsWeaponStyleChanging();
	bool IsSkipAnimOpenWeapon();
};


// Class JackGame.JackFriendAnimInstance
// 0x0010 (0x0CF0 - 0x0CE0)
class UJackFriendAnimInstance : public UJackPlayableAnimInstance
{
public:
	float                                              RunAnimationSpeed;                                        // 0x0CE0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RunAnimationRateInBlend;                                  // 0x0CE4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackFriendAnimation>                  FriendAnimationType;                                      // 0x0CE8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0CE9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendAnimInstance");
		return ptr;
	}


	bool IsSlippingOff();
	struct FJackArmIKResult GetRightArmIKReslt();
	TEnumAsByte<EJackPlayableMovement> GetPlayableMovementType();
	struct FJackArmIKResult GetLeftArmIKReslt();
};


// Class JackGame.JackFriendCharacter
// 0x0090 (0x14D0 - 0x1440)
class AJackFriendCharacter : public AJackPlayableCharacter
{
public:
	class UJackEquipmentControlComponent*              EquipmentControlComponent;                                // 0x1440(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackLookAtComponent*                        LookAtComponent;                                          // 0x1448(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackFriendAnimationSMComponent*             AnimSMComponent;                                          // 0x1450(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharacterType;                                            // 0x1458(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x1459(0x0007) MISSED OFFSET
	struct FName                                       FieldProp;                                                // 0x1460(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x1468(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendCharacter");
		return ptr;
	}


	void InitializePartyTalkControl(class AActor* SayActor, const struct FJackPartyTalkDescription& InDescription);
	struct FJackPartyTalkDescription GetPartyTalkDescription();
	void FinalizePartyTalkControl();
};


// Class JackGame.JackGameCharacter
// 0x0618 (0x0650 - 0x0038)
class UJackGameCharacter : public UObject
{
public:
	struct FName                                       ID;                                                       // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FString                                     Name;                                                     // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	struct FString                                     DisplayName;                                              // 0x0050(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	struct FString                                     ListName;                                                 // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	TEnumAsByte<EJackGender>                           Gender;                                                   // 0x0070(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EJackJob>                              Job;                                                      // 0x0071(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EJackMight>                            Might;                                                    // 0x0072(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EJackPosition>                         Position;                                                 // 0x0073(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EJackGambit>                           Gambit;                                                   // 0x0074(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharacterType;                                            // 0x0075(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0076(0x0002) MISSED OFFSET
	int                                                Level;                                                    // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                HP;                                                       // 0x007C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                MP;                                                       // 0x0080(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Tikara;                                                   // 0x0084(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Minomamori;                                               // 0x0088(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Subayasa;                                                 // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Kiyousa;                                                  // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Miryoku;                                                  // 0x0094(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                KougekiMaryoku;                                           // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                KaifukuMaryoku;                                           // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                MaxHP;                                                    // 0x00A0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                MaxMP;                                                    // 0x00A4(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                ZoneKeepRemainTurn;                                       // 0x00A8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                ZoneKeepRemainBattle;                                     // 0x00AC(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Exp;                                                      // 0x00B0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                TokugiPoint;                                              // 0x00B4(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                ConsumedTokugiPoint;                                      // 0x00B8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIncreaseTokugiPoint;                                     // 0x00BC(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bAcquiredAtariPanel;                                      // 0x00BD(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00BE(0x0002) MISSED OFFSET
	int                                                NameIdentifier;                                           // 0x00C0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                TroopIndex;                                               // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                GroupIndex;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                DropExp;                                                  // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                DropGold;                                                 // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF4];                                      // 0x00D4(0x00F4) MISSED OFFSET
	TArray<float>                                      BaseAttributeParams;                                      // 0x01C8(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	class UJackBattleCharacterInfo*                    BattleCharacterInfo;                                      // 0x01D8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	struct FJackAttackInfo                             AttackInfo;                                               // 0x01E0(0x0180) (Edit, DisableEditOnTemplate)
	class UJackOddEffectExecHolder*                    OddEffectExecHolder;                                      // 0x0360(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData)
	class UJackZonePointControl*                       ZonePointControl;                                         // 0x0368(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2E0];                                     // 0x0370(0x02E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameCharacter");
		return ptr;
	}


	struct FJackGameCharacterParameters STATIC_MakeJackGameCharacterParameters();
	bool IsPosition(TEnumAsByte<EJackPosition> InPosition);
	bool IsPlayer();
	bool IsOperationalWithIgnoreOddEffectIDs(TArray<struct FName> IgnoreOddEffectIDs);
	bool IsOperational();
	bool IsOddEffect(const struct FName& OddEffectID);
	bool IsNitouryuu();
	bool IsMovementEnabled();
	bool IsMonster();
	bool IsLeader();
	bool IsJob(TEnumAsByte<EJackJob> InJob);
	bool IsInTroop(int InTroopIndex);
	bool IsInMight(TEnumAsByte<EJackMight> InMight);
	bool IsInGroup(int InGroupIndex);
	bool IsIncreaseTokugiPoint();
	bool IsGuestNPC();
	bool IsGender(TEnumAsByte<EJackGender> InGender);
	bool IsGambit(TEnumAsByte<EJackGambit> InGambit);
	bool IsFriend();
	bool IsEquippedShield();
	bool IsDefending();
	bool IsConsumableMP(int InMP);
	bool IsCharacterType(TEnumAsByte<EJackCharacter> InCharacterType);
	bool IsBossMonster();
	bool IsActiveWeaponStyleAction(const struct FName& ActionID, TEnumAsByte<EJackEquippedWeaponStyle> WeaponStyle, bool bEquippedShield);
	bool IsAcquiredNitouryuu();
	bool IsAcquiredNitouNoGokui();
	bool IsAcquiredAtariPanel();
	int IncreaseSeedCorrectMiryoku(int InIncrease);
	int IncreaseSeedCorrectKougekiMaryoku(int InIncrease);
	int IncreaseSeedCorrectKaifukuMaryoku(int InIncrease);
	float GetZonePoint();
	int GetTroopIndex();
	int GetTokugiPoint();
	int GetTikara(bool bHandedness);
	int GetSyubiryoku();
	int GetSubayasa();
	struct FJackGameCharacterParameters GetSeedCorrectParameters();
	struct FString GetRawName();
	struct FString GetRawDisplayName(bool ListFlag);
	TEnumAsByte<EJackPosition> GetPosition();
	struct FJackGameCharacterParameters GetPassiveCorrectParameters();
	float GetMPRate();
	int GetMP();
	int GetMiryoku();
	int GetMinomamori();
	TEnumAsByte<EJackMight> GetMight();
	int GetMaxMP();
	int GetMaxHP();
	int GetLevel();
	int GetKougekiryoku(bool bHandedness, bool bIncludeOddEffect);
	int GetKougekiMaryoku();
	int GetKiyousa();
	int GetKaifukuMaryoku();
	TEnumAsByte<EJackJob> GetJob();
	class AJackCharacter* GetJackCharacter();
	struct FName GetId();
	float GetHPRate();
	int GetHP();
	int GetGroupIndex();
	TEnumAsByte<EJackGender> GetGender();
	TEnumAsByte<EJackGambit> GetGambit();
	int GetExp();
	TArray<struct FName> GetExecutablePassiveTokugis(TEnumAsByte<EJackPassiveTokugiType> ExtractType);
	TArray<struct FName> GetExecutableActiveTokugis();
	TEnumAsByte<EJackEquippedWeaponStyle> GetEquippedWeaponStyle();
	struct FJackGameCharacterParameters GetEquippedParametersWith(TArray<struct FJackGameCharacterEquippedItem> InEquipmentItems, bool bRequestChangeParametersOnly, bool bHandedness);
	struct FJackGameCharacterParameters GetEquippedParameters(bool bHandedness);
	TArray<struct FJackGameCharacterEquippedItem> GetEquippedItems();
	TArray<TEnumAsByte<EJackMight>> GetEnemyMightsBP();
	struct FName GetEffectiveCoordinateID();
	int GetDropGold();
	int GetDropExp();
	struct FString GetDisplayName(bool ListFlag);
	int GetDisplayExp();
	EJackDataTableReferType GetDataTableReferType();
	struct FName GetCoordinateID(TEnumAsByte<EJackCharacterCoordinateLayer> Layer);
	int GetConsumedTokugiPoint();
	TEnumAsByte<EJackCharacter> GetCharacterType();
	struct FJackGameCharacterParameters GetBasedParameters(bool bHandedness);
	TArray<struct FName> GetAcquiredPassiveTokugis();
	TArray<struct FName> GetAcquiredJumons();
	TArray<struct FName> GetAcquiredActiveTokugis();
	void ForceFullRecover(bool bRevive, bool bSHowHud, bool bSkipSpawnCharacter);
};


// Class JackGame.JackFriendGameCharacter
// 0x0080 (0x06D0 - 0x0650)
class UJackFriendGameCharacter : public UJackGameCharacter
{
public:
	TEnumAsByte<EJackItem_Bag>                         Bag;                                                      // 0x0650(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bFriend;                                                  // 0x0651(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bGuest;                                                   // 0x0652(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsLeaving;                                               // 0x0653(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsSubjectOfAttack;                                       // 0x0654(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsGetExp;                                                // 0x0655(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsMenuDisp;                                              // 0x0656(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsPartyTalk;                                             // 0x0657(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsReturnToBag;                                           // 0x0658(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsReturnToBagExceptEquip;                                // 0x0659(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bIsNotGuestDisp;                                          // 0x065A(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x065B(0x0005) MISSED OFFSET
	struct FName                                       BattleAI_ID;                                              // 0x0660(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                GambitRate;                                               // 0x0668(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x066C(0x0004) MISSED OFFSET
	struct FName                                       BaseParameterID;                                          // 0x0670(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                TalkSituation;                                            // 0x0678(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                FieldDokuDamage;                                          // 0x067C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DokuLeftSec;                                              // 0x0680(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0684(0x0004) MISSED OFFSET
	float                                              FieldExp;                                                 // 0x0688(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x068C(0x0014) MISSED OFFSET
	class UJackStreamObjectsHolder*                    CharacterAssetHolder;                                     // 0x06A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackStreamObjectsHolder*                    CoordinateAssetHolder;                                    // 0x06A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x20];                                      // 0x06B0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendGameCharacter");
		return ptr;
	}


	bool UpdateDokuLeftSec(float DeltaSec, float PoisonDamageInterval);
	void SetTalkSituation(int InTalkSituation);
	void SetSubjectOfAttack(bool bInSubjectOfAttack);
	void SetReturnToBagExceptEquip(bool bInReturnToBagExceptEquip);
	void SetReturnToBag(bool bInReturnToBag);
	void SetPartyTalk(bool bInPartyTalk);
	void SetNotGuestDisp(bool bInNotGuestDisp);
	void SetMenuDisp(bool bInMenuDisp);
	void SetLeaving(bool bInLeaving);
	void SetGuest(bool bInGuest);
	void SetGetExp(bool bInGetExp);
	void SetGambitRate(int InGambitRate);
	void SetFriend(bool bInFriend);
	void SetExtraEquipmentsCoordinateID(const struct FName& InCoordinateID);
	void SetDokuLeftSecByTurn(int TurnNum);
	void SetDokuLeftSec(float DokuSec);
	void SetBattleAI_ID(const struct FName& InBattleAI_ID);
	void SetBaseParameterID(const struct FName& InBaseParameterID);
	void SetBag(TEnumAsByte<EJackItem_Bag> InBag);
	void JackCharacterResourcesLoadedSignature__DelegateSignature(class UJackFriendGameCharacter* FriendGameCharacter);
	bool IsSubjectOfAttack();
	bool IsReturnToBagExceptEquip();
	bool IsReturnToBag();
	bool IsPartyTalk();
	bool IsNotGuestDisp();
	bool IsMenuDisp();
	bool IsLeaving();
	bool IsGuest();
	bool IsGetExp();
	bool IsFriend();
	bool IsFieldDoku();
	int GetFieldDokuDamage();
	int GetDokuTurn();
	float GetDokuLeftSec();
	struct FName GetBattleAI_ID();
	struct FName GetBaseParameterID();
	TEnumAsByte<EJackItem_Bag> GetBag();
};


// Class JackGame.JackFriendOptimizeComponent
// 0x0060 (0x0200 - 0x01A0)
class UJackFriendOptimizeComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x01A0(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFriendOptimizeComponent");
		return ptr;
	}

};


// Class JackGame.JackFukidasiComponent
// 0x0020 (0x01C0 - 0x01A0)
class UJackFukidasiComponent : public UJackCharacterComponent
{
public:
	struct FName                                       FukidasiSocketName;                                       // 0x01A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       HeadSocketName;                                           // 0x01A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeadRadius;                                               // 0x01B0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFukidasiComponent");
		return ptr;
	}

};


// Class JackGame.JackFukkatunojumonManager
// 0x0060 (0x0098 - 0x0038)
class UJackFukkatunojumonManager : public UObject
{
public:
	class UDataTable*                                  FukkatunojumonScenarioProgressDataTable;                  // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	class UDataTable*                                  FukkatunojumonRestartPointDataTable;                      // 0x0048(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0050(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFukkatunojumonManager");
		return ptr;
	}


	void SetSelectedScenarioId(const struct FName& InScenarioID);
	void GetTenseiScenarioTexture();
	struct FString GetTenseiScenarioDescription(const struct FName& InScenarioID);
	struct FName GetSelectedScenarioId();
	void GetScenarioTexture();
	int GetScenarioProgress();
	struct FString GetScenarioDescription(const struct FName& InScenarioID);
	void GetCleaedScenarioList(TArray<struct FString>* OutScenarioTitleList, TArray<struct FName>* OutScenarioIdList);
	void FukkatunojumonRun(const struct FJackDecodeInfo& InDecodeInfo);
	bool FukkatunojumonEncode(const struct FName& InChurchId, struct FString* OutStr);
	void FukkatunojumonDecodeInfoResetting(const struct FJackScenarioTitleInfo& InScenarioTitleInfo, const struct FJackDecodeInfo& InDecodeInfo, struct FJackDecodeInfo* OutDecodeInfo);
	bool FukkatunojumonDecode(const struct FString& InStr, struct FJackDecodeInfo* OutDecodeInfo, TArray<struct FJackScenarioTitleInfo>* OutScenarioTitleInfoList);
	bool ChangeClearedSecondPlaythrough();
};


// Class JackGame.JackFusigiKaziGameAction
// 0x00F8 (0x0130 - 0x0038)
class UJackFusigiKaziGameAction : public UObject
{
public:
	TWeakObjectPtr<class UJackUMGAccessorFusigiKazi>   KaziAccessor;                                             // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector2D                                   FrameSize;                                                // 0x0040(0x0008) (Edit, EditConst, IsPlainOldData)
	struct FVector2D                                   CursorPos;                                                // 0x0048(0x0008) (Edit, EditConst, IsPlainOldData)
	struct FVector2D                                   MoveLimit;                                                // 0x0050(0x0008) (Edit, EditConst, IsPlainOldData)
	struct FName                                       ActionCategory;                                           // 0x0058(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       SelectActionName;                                         // 0x0060(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FJackDataTableKaziAction                    SelectActionDataRow;                                      // 0x0068(0x0060) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C8(0x0028) MISSED OFFSET
	TArray<class UJackUMGItemData*>                    KaziActionList;                                           // 0x00F0(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<class UJackUMGItemData*>                    KaziHissatuList;                                          // 0x0100(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FName>                               ActionDataNameList;                                       // 0x0110(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FName>                               HissatuDataNameList;                                      // 0x0120(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFusigiKaziGameAction");
		return ptr;
	}


	struct FName UpdateCursorInput(class UJackUMGAccessorFusigiKazi* Accessor, TEnumAsByte<EJackKeys> KeyType);
	void SettingSelectActionInfo(const struct FName& ActionName);
	void SetSelectActionCategoryName(const struct FName& CategoryName);
	bool MoveCursorInfo(int MoveX, int MoveY);
	void InitActionData(class UJackUMGManager* InUMGManager, TEnumAsByte<EJackFusigiKaziKanagata> KanagataType);
	struct FVector2D GetMoveLimit();
	TArray<class UJackUMGItemData*> GetKaziActionList();
	int GetKaziActionKnockNum(const struct FName& ActionName);
	struct FVector2D GetKaziActionCursorPos(const struct FName& ActionName, int CursorIndex, const struct FVector2D& BasePos);
	struct FVector2D GetKaziActionCursorGaugePos(const struct FName& ActionName, int CursorIndex, const struct FVector2D& BasePos);
	struct FName GetActionID(TEnumAsByte<EJackFusigiKaziGameTokugi> TokugiType);
	struct FName GetActionDataNameForIndex(int Index);
	struct FName GetActionCategoryName(const struct FName& ItemID);
};


// Class JackGame.JackFusigiKaziGameMain
// 0x0238 (0x05D0 - 0x0398)
class AJackFusigiKaziGameMain : public AActor
{
public:
	unsigned char                                      UnknownData00[0x238];                                     // 0x0398(0x0238) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFusigiKaziGameMain");
		return ptr;
	}


	bool UpdateChangeMaterialParameter(float DeltaTime);
	void SetMaterialParameter(const struct FJackFusigiKaziMaterialParameter& Param);
	float RequestChangeMaterialParameter(const struct FJackFusigiKaziMaterialParameter& Param, float ChangeTime);
	struct FJackFusigiKaziMaterialParameter GetMaterialParameter();
};


// Class JackGame.JackFusigiKaziItemController
// 0x0000 (0x0398 - 0x0398)
class AJackFusigiKaziItemController : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFusigiKaziItemController");
		return ptr;
	}

};


// Class JackGame.JackFusigiKaziItemCountList
// 0x0108 (0x0140 - 0x0038)
class UJackFusigiKaziItemCountList : public UObject
{
public:
	unsigned char                                      UnknownData00[0x108];                                     // 0x0038(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFusigiKaziItemCountList");
		return ptr;
	}

};


// Class JackGame.JackFusigiKaziManager
// 0x0000 (0x0398 - 0x0398)
class AJackFusigiKaziManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFusigiKaziManager");
		return ptr;
	}

};


// Class JackGame.JackFusigiKaziQualityAnalysis
// 0x0008 (0x0040 - 0x0038)
class UJackFusigiKaziQualityAnalysis : public UObject
{
public:
	TWeakObjectPtr<class UJackUMGAccessorFusigiKazi>   KaziAccessor;                                             // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFusigiKaziQualityAnalysis");
		return ptr;
	}

};


// Class JackGame.JackGameCharacterManager
// 0x0010 (0x0048 - 0x0038)
class UJackGameCharacterManager : public UObject
{
public:
	TArray<class UJackGameCharacter*>                  GameCharacters;                                           // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameCharacterManager");
		return ptr;
	}

};


// Class JackGame.JackGameDatabase
// 0x0020 (0x0058 - 0x0038)
class UJackGameDatabase : public UObject
{
public:
	class UJackActionDatabase*                         ActionDatabase;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackOddEffectDatabase*                      OddEffectDatabase;                                        // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackMonsterDatabase*                        MonsterDatabase;                                          // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackActionCameraDatabase*                   ActionCameraDatabase;                                     // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameDatabase");
		return ptr;
	}


	struct FVector FindParameterVectorChecked(const struct FName& InName);
	struct FVector FindParameterVector(const struct FName& InName, bool* bOutResult);
	struct FName FindParameterTextChecked(const struct FName& InName);
	struct FName FindParameterText(const struct FName& InName, bool* bOutResult);
	int FindParameterIntChecked(const struct FName& InName);
	int FindParameterInt(const struct FName& InName, bool* bOutResult);
	float FindParameterFloatChecked(const struct FName& InName);
	float FindParameterFloat(const struct FName& InName, bool* bOutResult);
};


// Class JackGame.JackGameEngine
// 0x0010 (0x0CF0 - 0x0CE0)
class UJackGameEngine : public UGameEngine
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0CE0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameEngine");
		return ptr;
	}

};


// Class JackGame.JackGameEvent
// 0x0000 (0x0398 - 0x0398)
class AJackGameEvent : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameEvent");
		return ptr;
	}


	void SetMonsterGeneratorDisabled(bool bDisable);
	void AllDead();
};


// Class JackGame.JackGameFlag
// 0x0040 (0x0078 - 0x0038)
class UJackGameFlag : public UObject
{
public:
	TArray<struct FJackGameFlagDefinitionTableDic>     FlagDefinitionList;                                       // 0x0038(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  RelationalGameFlagConfig;                                 // 0x0048(0x0008) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ScenarioFlagInfo;                                         // 0x0050(0x0008) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAssertNonExistentFlag;                                   // 0x0058(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bAssertNonExistentFlagOnlyFirstTime;                      // 0x0059(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bTypeCheckingEnabled;                                     // 0x005A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x005B(0x0005) MISSED OFFSET
	TArray<class UJackGameFlagDataBase*>               FlagDataList;                                             // 0x0060(0x0010) (ZeroConstructor)
	class UJackGameFlagDebugger*                       Debugger;                                                 // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlag");
		return ptr;
	}


	void InitAllFlagDataToSecondPlaythrough();
};


// Class JackGame.JackGameFlagDataBase
// 0x0108 (0x0140 - 0x0038)
class UJackGameFlagDataBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0038(0x00A8) MISSED OFFSET
	class UJackGameFlagListBase*                       FlagDefinitions;                                          // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x58];                                      // 0x00E8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDataBase");
		return ptr;
	}

};


// Class JackGame.JackGameFlagDataBoukenGuide
// 0x0050 (0x0190 - 0x0140)
class UJackGameFlagDataBoukenGuide : public UJackGameFlagDataBase
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0140(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDataBoukenGuide");
		return ptr;
	}

};


// Class JackGame.JackGameFlagDataCutScene
// 0x0000 (0x0140 - 0x0140)
class UJackGameFlagDataCutScene : public UJackGameFlagDataBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDataCutScene");
		return ptr;
	}

};


// Class JackGame.JackGameFlagDataMapVisit
// 0x0000 (0x0140 - 0x0140)
class UJackGameFlagDataMapVisit : public UJackGameFlagDataBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDataMapVisit");
		return ptr;
	}

};


// Class JackGame.JackGameFlagDataScenario
// 0x0000 (0x0140 - 0x0140)
class UJackGameFlagDataScenario : public UJackGameFlagDataBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDataScenario");
		return ptr;
	}

};


// Class JackGame.JackGameFlagDataTalkCounter
// 0x0000 (0x0140 - 0x0140)
class UJackGameFlagDataTalkCounter : public UJackGameFlagDataBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDataTalkCounter");
		return ptr;
	}

};


// Class JackGame.JackGameFlagDebugger
// 0x00F8 (0x0130 - 0x0038)
class UJackGameFlagDebugger : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0038(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagDebugger");
		return ptr;
	}

};


// Class JackGame.JackGameFlagListBase
// 0x0000 (0x0038 - 0x0038)
class UJackGameFlagListBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagListBase");
		return ptr;
	}

};


// Class JackGame.JackGameFlagListByBoukenGuide
// 0x0008 (0x0040 - 0x0038)
class UJackGameFlagListByBoukenGuide : public UJackGameFlagListBase
{
public:
	class UDataTable*                                  BoukenGuideDataTable;                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagListByBoukenGuide");
		return ptr;
	}

};


// Class JackGame.JackGameFlagListByDataTable
// 0x00A8 (0x00E0 - 0x0038)
class UJackGameFlagListByDataTable : public UJackGameFlagListBase
{
public:
	class UDataTable*                                  DataTable;                                                // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0040(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagListByDataTable");
		return ptr;
	}

};


// Class JackGame.JackGameFlagListByMapInfo
// 0x0008 (0x0040 - 0x0038)
class UJackGameFlagListByMapInfo : public UJackGameFlagListBase
{
public:
	class UDataTable*                                  MapInfoDataTable;                                         // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagListByMapInfo");
		return ptr;
	}

};


// Class JackGame.JackGameFlagListBySerifuData
// 0x0000 (0x0038 - 0x0038)
class UJackGameFlagListBySerifuData : public UJackGameFlagListBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameFlagListBySerifuData");
		return ptr;
	}

};


// Class JackGame.JackGameInstance
// 0x0770 (0x0870 - 0x0100)
class UJackGameInstance : public UGameInstance
{
public:
	class UJackSaveData*                               SaveData;                                                 // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackGameFlag*                               GameFlag;                                                 // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackSystemData*                             SystemData;                                               // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackGameDatabase*                           GameDatabase;                                             // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackCharacterSystem*                        CharacterSystem;                                          // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackGamePlayer*                             GamePlayer;                                               // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackItemManager*                            ItemManager;                                              // 0x0130(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackItemPresentManager*                     ItemPresentManager;                                       // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackRecipeBookManager*                      RecipeBookManager;                                        // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackMedalManager*                           MedalManager;                                             // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackCoinManager*                            CoinManager;                                              // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackFacilityManager*                        FacilityManager;                                          // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackTokugiManager*                          TokugiManager;                                            // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackAchievementManager*                     AchievementManager;                                       // 0x0168(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackSibariManager*                          SibariManager;                                            // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackFukkatunojumonManager*                  FukkatunojumonManager;                                    // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackSQEXNGWordManager*                      SQEXNGWordManager;                                        // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackOddEffectManager*                       OddEffectManager;                                         // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackWorldTime*                              WorldTime;                                                // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackWorldWeather*                           WorldWeather;                                             // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackKiraManager*                            KiraManager;                                              // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackDispersionManager*                      DispersionManager;                                        // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackTextManager*                            TextManager;                                              // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackStreamableManager*                      StreamableManager;                                        // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackPreloadMapManager*                      PreloadMapManager;                                        // 0x01C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackSoundManager*                           SoundManager;                                             // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackMusicManager*                           MusicManager;                                             // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackMiniGameManager*                        MiniGameManager;                                          // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackSaveLoadManager*                        SaveLoadManager;                                          // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackShareManager*                           ShareManager;                                             // 0x01E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackInstallManager*                         InstallManager;                                           // 0x01F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackGarbageCollectionManager*               GarbageCollectionManager;                                 // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUIMapManager*                           UIMapManager;                                             // 0x0200(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackLocalizationManager*                    LocalizationManager;                                      // 0x0208(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackStoreManager*                           StoreManager;                                             // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackImeManager*                             ImeManager;                                               // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackTextMacroReplaceManager*                TextMacroReplaceManager;                                  // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackCharacterCaptureCameraCharacterClassLoadManager* CharacterCaptureCameraCharacterClassLoadManager;          // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackModeChangeManager*                      ModeChangeManager;                                        // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackOLSManager*                             OLSManager;                                               // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackPairingManager*                         PairingManager;                                           // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0248(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.SaveDataClass
	unsigned char                                      UnknownData01[0x18];                                      // 0x0260(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.GameFlagClass
	unsigned char                                      UnknownData02[0x18];                                      // 0x0278(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.SystemDataClass
	unsigned char                                      UnknownData03[0x18];                                      // 0x0290(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.GameDatabaseClass
	unsigned char                                      UnknownData04[0x18];                                      // 0x02A8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.CharacterSystemClass
	unsigned char                                      UnknownData05[0x18];                                      // 0x02C0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.GamePlayerClass
	unsigned char                                      UnknownData06[0x18];                                      // 0x02D8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.ItemManagerClass
	unsigned char                                      UnknownData07[0x18];                                      // 0x02F0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.ItemPresentManagerClass
	unsigned char                                      UnknownData08[0x18];                                      // 0x0308(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.RecipeBookManagerClass
	unsigned char                                      UnknownData09[0x18];                                      // 0x0320(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.MedalManagerClass
	unsigned char                                      UnknownData10[0x18];                                      // 0x0338(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.CoinManagerClass
	unsigned char                                      UnknownData11[0x18];                                      // 0x0350(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.FacilityManagerClass
	unsigned char                                      UnknownData12[0x18];                                      // 0x0368(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.TokugiManagerClass
	unsigned char                                      UnknownData13[0x18];                                      // 0x0380(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.AchievementManagerClass
	unsigned char                                      UnknownData14[0x18];                                      // 0x0398(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.SibariManagerClass
	unsigned char                                      UnknownData15[0x18];                                      // 0x03B0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.FukkatunojumonManagerClass
	unsigned char                                      UnknownData16[0x18];                                      // 0x03C8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.SQEXNGWordManagerClass
	unsigned char                                      UnknownData17[0x18];                                      // 0x03E0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.OddEffectManagerClass
	unsigned char                                      UnknownData18[0x18];                                      // 0x03F8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.WorldTimeClass
	unsigned char                                      UnknownData19[0x18];                                      // 0x0410(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.WorldWeatherClass
	unsigned char                                      UnknownData20[0x18];                                      // 0x0428(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.KiraManagerClass
	unsigned char                                      UnknownData21[0x18];                                      // 0x0440(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.TextManagerClass
	unsigned char                                      UnknownData22[0x18];                                      // 0x0458(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.SoundManagerClass
	unsigned char                                      UnknownData23[0x18];                                      // 0x0470(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.MiniGameManagerClass
	unsigned char                                      UnknownData24[0x18];                                      // 0x0488(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.SaveLoadManagerClass
	unsigned char                                      UnknownData25[0x18];                                      // 0x04A0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.ShareManagerClass
	unsigned char                                      UnknownData26[0x18];                                      // 0x04B8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.InstallManagerClass
	unsigned char                                      UnknownData27[0x18];                                      // 0x04D0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.GarbageCollectionManagerClass
	unsigned char                                      UnknownData28[0x18];                                      // 0x04E8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.UIMapManagerClass
	unsigned char                                      UnknownData29[0x18];                                      // 0x0500(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.LocalizationManagerClass
	unsigned char                                      UnknownData30[0x18];                                      // 0x0518(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.StoreManagerClass
	unsigned char                                      UnknownData31[0x18];                                      // 0x0530(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.ImeManagerClass
	unsigned char                                      UnknownData32[0x18];                                      // 0x0548(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.TextMacroReplaceManagerClass
	unsigned char                                      UnknownData33[0x18];                                      // 0x0560(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackGameInstance.PairingManagerClass
	TArray<struct FString>                             DebugBatchCSSceneName;                                    // 0x0578(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	bool                                               bDebugBatchCSMode;                                        // 0x0588(0x0001) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData34[0x7];                                       // 0x0589(0x0007) MISSED OFFSET
	TArray<class UObject*>                             ResidentObjects;                                          // 0x0590(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              ResidentClasses;                                          // 0x05A0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<class UObjectLibrary*>                      ResidentObjectLibraries;                                  // 0x05B0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData35[0x1A0];                                     // 0x05C0(0x01A0) MISSED OFFSET
	bool                                               bIgnoreReturnToAutoSaveVolume;                            // 0x0760(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnorePlayerMakerUpdateOnTeleport;                       // 0x0761(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x86];                                      // 0x0762(0x0086) MISSED OFFSET
	TArray<struct FJackScreenPercentageSetting>        ScreenPercentageSettings;                                 // 0x07E8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FJackScreenPercentageSetting>        DynamicResolutionScreenPercentageSettings;                // 0x07F8(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData37[0x68];                                      // 0x0808(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameInstance");
		return ptr;
	}


	struct FString PopDebugBatchCSSceneName();
	struct FString PollingBatchCheck();
	void JackGameModeDelegate__DelegateSignature();
	void JackGameInstanceDelegateCameraAndPlayerMarkerCollisionIgnored__DelegateSignature(bool bIgnored);
	bool HasDebugBatchCSSceneName();
	struct FString CheckEndBatchLoop();
};


// Class JackGame.JackGameModeBase
// 0x0180 (0x0608 - 0x0488)
class AJackGameModeBase : public AGameMode
{
public:
	class AJackCaptionTrackExecutor*                   CaptionTrackExecutor;                                     // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackCutSceneController*                     CutSceneController;                                       // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackCommandDispatcher*                      CommandDispatcher;                                        // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackDebugMenu*                              DebugMenu;                                                // 0x04A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x04A8(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    PrepareMapChangeDelegate;                                 // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MapChangeReadyDelegate;                                   // 0x04D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NewMapBeginPlayDelegate;                                  // 0x04E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MapChangeFinishedDelegate;                                // 0x04F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0508(0x0078) MISSED OFFSET
	bool                                               bFlushEnlightenCommandsAfterMapJump;                      // 0x0580(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x87];                                      // 0x0581(0x0087) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameModeBase");
		return ptr;
	}


	void MapChangeFinishedPreloadStart();
	void MapChangeFinishedPlayableStart();
	void MapChangeFinishedBeforeFading();
	void MapChangeFinishedAfterFading();
	class UJackSystemData* GetSystemData();
	class UJackSaveData* GetSaveData();
	class UJackGameFlag* GetGameFlag();
	class AJackCutSceneController* GetCutSceneController();
	class UJackCommandDispatcher* GetCommandDispatcher();
	class AJackCaptionTrackExecutor* GetCaptionTrackExecutor();
};


// Class JackGame.JackGameMode
// 0x0848 (0x0E50 - 0x0608)
class AJackGameMode : public AJackGameModeBase
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0608(0x0068) MISSED OFFSET
	class UClass*                                      GameEventClass;                                           // 0x0670(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PartyManagerClass;                                        // 0x0678(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MonsterPopManagerClass;                                   // 0x0680(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BattleManagerClass;                                       // 0x0688(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BattlePlayerControllerClass;                              // 0x0690(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ActionManagerClass;                                       // 0x0698(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RenkeiManagerClass;                                       // 0x06A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ScheduledNPCManagerClass;                                 // 0x06A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CharacterTickIntervalManagerClass;                        // 0x06B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SafeAreaManagerClass;                                     // 0x06B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CategoryHiddenManagerClass;                               // 0x06C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PlayerMarkerClass;                                        // 0x06C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      LazyMessageManagerClass;                                  // 0x06D0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FieldAttackManagerClass;                                  // 0x06D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PhotoModeManagerClass;                                    // 0x06E0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AJackScheduledNPCManager*                    ScheduledNPCManager;                                      // 0x06E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackCharacterTickIntervalManager*           CharacterTickIntervalManager;                             // 0x06F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackBattleManager*                          BattleManager;                                            // 0x06F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackBattlePlayerController*                 BattleController;                                         // 0x0700(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackEventBattleManager*                     EventBattleManager;                                       // 0x0708(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackActionManager*                          ActionManager;                                            // 0x0710(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackMonsterPopManager*                      MonsterPopManager;                                        // 0x0718(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackGameEvent*                              GameEvent;                                                // 0x0720(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackRenkeiManager*                          RenkeiManager;                                            // 0x0728(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackCharacterManager*                       CharacterManager;                                         // 0x0730(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackInteractiveActorManager*                InteractiveActorManager;                                  // 0x0738(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackBowgunTargetManager*                    BowgunTargetManager;                                      // 0x0740(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackEffectManager*                          EffectManager;                                            // 0x0748(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackSafeAreaManager*                        SafeAreaManager;                                          // 0x0750(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackCategoryHiddenManager*                  CategoryHiddenManager;                                    // 0x0758(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackFieldAttackManager*                     FieldAttackManager;                                       // 0x0760(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackReservedPlayerControlExecutor*          ReservedPlayerControlExecutor;                            // 0x0768(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackPlayerMarker*                           PlayerMarker;                                             // 0x0770(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackMeosiSlotDataManagers*                  MeosiSlotDataManagers;                                    // 0x0778(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackLazyMessageManager*                     LazyMessageManager;                                       // 0x0780(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackPhotoModeManager*                       PhotoModeManager;                                         // 0x0788(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnRuraSuccessDelegate;                                    // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x30];                                      // 0x07A0(0x0030) MISSED OFFSET
	struct FScriptMulticastDelegate                    WorldParticlesChangedDelegate;                            // 0x07D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AJackPartyManager*                           PartyManager;                                             // 0x07E0(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bUseControlledCharacterType;                              // 0x07E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x567];                                     // 0x07E9(0x0567) MISSED OFFSET
	class UMaterialInstanceDynamic*                    MiniMapMID;                                               // 0x0D50(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UMaterialInstanceDynamic*                    MiniMapSymbolMID;                                         // 0x0D58(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UMaterialInstanceDynamic*                    WorldMapMID;                                              // 0x0D60(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UMaterialInstanceDynamic*                    WorldMapSymbolMID;                                        // 0x0D68(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UMaterialInstanceDynamic*                    LocalMapMID;                                              // 0x0D70(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	class UMaterialInstanceDynamic*                    LocalMapSymbolMID;                                        // 0x0D78(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TArray<class UMaterialInstanceDynamic*>            MapTextArrowMIDList;                                      // 0x0D80(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst)
	class UMaterial*                                   MiniMapMaterial;                                          // 0x0D90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterial*                                   MiniMapSymbolMaterial;                                    // 0x0D98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterial*                                   WorldMapMaterial;                                         // 0x0DA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterial*                                   WorldMapSymbolMaterial;                                   // 0x0DA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterial*                                   MapTextArrowBlinkMaterial;                                // 0x0DB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DefaultCharacterCaptureCameraClass;                       // 0x0DB8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AJackCharacterCaptureCamera*                 CharacterCaptureCamera;                                   // 0x0DC0(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnlightenSystemUpdateImmediatelyOnlyInViewFrustum;       // 0x0DC8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x67];                                      // 0x0DC9(0x0067) MISSED OFFSET
	bool                                               bTripleMode;                                              // 0x0E30(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1F];                                      // 0x0E31(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameMode");
		return ptr;
	}


	class AJackCharacter* SpawnDebugFriendCharacter(const struct FVector& InLocation, const struct FRotator& InRotation);
	void SerifuScriptDelegate(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, TEnumAsByte<EJackMessageScriptEventType> DelegateType, const struct FString& StringParam);
	void JackRuraSuccessDelegate__DelegateSignature();
	void JackPlayerMovementModeChangedDelegate__DelegateSignature(class AJackCharacter* JackCharacter, TEnumAsByte<EMovementMode> OldMovementMode, TEnumAsByte<EMovementMode> NewMovementMode);
	class AJackScheduledNPCManager* GetScheduledNPCManager();
	class AJackSafeAreaManager* GetSafeAreaManager();
	class AJackRenkeiManager* GetRenkeiManager();
	class UJackPhotoModeManager* GetPhotoModeManager();
	class AJackMonsterPopManager* GetMonsterPopManager();
	class AJackLazyMessageManager* GetLazyMessageManager();
	class AJackInteractiveActorManager* GetInteractiveActorManager();
	class AJackGameEvent* GetGameEvent();
	class UJackGameDatabase* GetGameDatabase();
	class UJackFieldAttackManager* GetFieldAttackManager();
	class AJackEventBattleManager* GetEventBattleManager();
	class AJackEffectManager* GetEffectManager();
	class AJackCharacterTickIntervalManager* GetCharacterTickIntervalManager();
	class UJackCharacterSystem* GetCharacterSystem();
	class AJackCharacterManager* GetCharacterManager();
	class AJackCategoryHiddenManager* GetCategoryHiddenManager();
	class AJackBowgunTargetManager* GetBowgunTargetManager();
	class AJackBattleManager* GetBattleManager();
	class AJackBattlePlayerController* GetBattleController();
	class AJackActionManager* GetActionManager();
	class UBlueprint* FindWidgetBlueprintChecked(const struct FName& InName);
	class UBlueprint* FindWidgetBlueprint(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindWeaponClassChecked(const struct FName& InName);
	class UClass* FindWeaponClass(const struct FName& InName, bool bWarnIfMissing);
	class UTexture* FindTextureChecked(const struct FName& InName);
	class UTexture* FindTexture(const struct FName& InName, bool bWarnIfMissing);
	class UStaticMesh* FindStaticMeshChecked(const struct FName& InName);
	class UStaticMesh* FindStaticMesh(const struct FName& InName, bool bWarnIfMissing);
	class USoundBase* FindSoundChecked(const struct FName& InName);
	class USoundBase* FindSound(const struct FName& InName, bool bWarnIfMissing);
	class USkeletalMesh* FindSkeletalMeshChecked(const struct FName& InName);
	class USkeletalMesh* FindSkeletalMesh(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindProjectileClassChecked(const struct FName& InName);
	class UClass* FindProjectileClass(const struct FName& InName, bool bWarnIfMissing);
	class UParticleSystem* FindParticleChecked(const struct FName& InName);
	class UParticleSystem* FindParticle(const struct FName& InName, bool bWarnIfMissing);
	class UMaterialParameterCollection* FindMaterialParameterCollectionChecked(const struct FName& InName);
	class UMaterialParameterCollection* FindMaterialParameterCollection(const struct FName& InName, bool bWarnIfMissing);
	class UMaterialInterface* FindMaterialChecked(const struct FName& InName);
	class UMaterialInterface* FindMaterial(const struct FName& InName, bool bWarnIfMissing);
	class UForceFeedbackEffect* FindForceFeedbackChecked(const struct FName& InName);
	class UForceFeedbackEffect* FindForceFeedback(const struct FName& InName, bool bWarnIfMissing);
	class UCurveBase* FindCurveChecked(const struct FName& InName);
	class UCurveBase* FindCurve(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindCollideEffectChecked(const struct FName& InName);
	class UClass* FindCollideEffect(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindCameraShakeChecked(const struct FName& InName);
	class UClass* FindCameraShake(const struct FName& InName, bool bWarnIfMissing);
	class UCameraAnim* FindCameraAnimChecked(const struct FName& InName);
	class UCameraAnim* FindCameraAnim(const struct FName& InName, bool bWarnIfMissing);
	class UClass* FindBlueprintClassChecked(const struct FName& InName);
	class UClass* FindBlueprintClass(const struct FName& InName, bool bWarnIfMissing);
	class UAnimMontage* FindAnimMontageChecked(const struct FName& InName);
	class UAnimMontage* FindAnimMontage(const struct FName& InName, bool bWarnIfMissing);
};


// Class JackGame.JackGamePlayer
// 0x0278 (0x02B0 - 0x0038)
class UJackGamePlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0038(0x0068) MISSED OFFSET
	class UJackGamePlayerCondition*                    GamePlayerCondition;                                      // 0x00A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x00A8(0x0048) MISSED OFFSET
	TArray<class UJackFriendGameCharacter*>            GameCharacters;                                           // 0x00F0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0100(0x0030) MISSED OFFSET
	TArray<class UJackGuestNpcGameCharacter*>          GuestNpcCharacters;                                       // 0x0130(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x70];                                      // 0x0140(0x0070) MISSED OFFSET
	TMap<TEnumAsByte<EJackCharacter>, struct FJackGuestNPCLoadedResourceInfo> GuestNPCLoadedResourceInfos;                              // 0x01B0(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0200(0x0010) MISSED OFFSET
	class UClass*                                      GimmickRuraActor;                                         // 0x0210(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackRuraPurpose>                      RuraMapJumpPurpose;                                       // 0x0218(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	struct FName                                       RuraJumpTag;                                              // 0x0220(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RuraRiremitoJumpTag;                                      // 0x0228(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bRuraRiremitoJumpNonPlayer;                               // 0x0230(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        RuraRiremitoJumpStartCharacter;                           // 0x0231(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7E];                                      // 0x0232(0x007E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGamePlayer");
		return ptr;
	}


	void WithdrawGold(int InGold);
	void OnGameModeBeginPlay();
	bool IsSufficientGold(int InGold);
	bool IsPartyTalking();
	bool IsAllDead();
	int IncreaseGold(int InGold, bool bReflectTotalGold);
	class UJackFriendGameCharacter* GetPlayerGameCharacter();
	TArray<class UJackFriendGameCharacter*> GetPartyMembers(bool bIncludeStandbyMember, TEnumAsByte<EJackFriendCharacterQueryFilter> QueryFilter);
	int GetGold();
	TArray<class UJackFriendGameCharacter*> GetFriendGameCharacters();
	int GetDeposit();
	class UJackFriendGameCharacter* GetControlledGameCharacter();
	void DepositGold(int InGold);
	int DecreaseGold(int InGold);
};


// Class JackGame.JackGamePlayerCondition
// 0x01A8 (0x01E0 - 0x0038)
class UJackGamePlayerCondition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x130];                                     // 0x0038(0x0130) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPossessPlayerControlDelegate;                           // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnpossessPlayerControlDelegate;                         // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0188(0x0010) MISSED OFFSET
	float                                              ToherosuLeftSec;                                          // 0x0198(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              SeisuiLeftSec;                                            // 0x019C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ToherosuRange;                                            // 0x01A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ToherosuMaxSec;                                           // 0x01A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ShipToherosuSecRate;                                      // 0x01A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SeisuiMaxSec;                                             // 0x01AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ShipSeisuiSecRate;                                        // 0x01B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x24];                                      // 0x01B4(0x0024) MISSED OFFSET
	TEnumAsByte<EJackVehicle>                          RidingVehicleType;                                        // 0x01D8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackVehicleModelId>                   RidingVehicleModelType;                                   // 0x01D9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackPlayerControlCharacter>           PlayerControlCharacter;                                   // 0x01DA(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<EJackHeroCharacterForm>                HeroCharacterForm;                                        // 0x01DB(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<EJackWhaleCharacterForm>               WhaleCharacterForm;                                       // 0x01DC(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<EJackSenaHairStyle>                    SenaHairStyle;                                            // 0x01DD(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x01DE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGamePlayerCondition");
		return ptr;
	}


	void SetToherosu(bool bOn, bool bNoMessage);
	void SetSeisui(bool bOn, bool bNoMessage);
	void SetMenuCursorOnInpasu(bool bOn);
	void SetCondition(TEnumAsByte<EJackGamePlayerCondition> InCondition, TEnumAsByte<EJackGamePlayerConditionControlPurpose> InPurpose, bool bTrue);
	void OnUnpossessPlayerControlDelegate__DelegateSignature();
	void OnPossessPlayerControlDelegate__DelegateSignature(TEnumAsByte<EJackPlayerControlPossessor> Possessor);
	bool IsToherosu();
	bool IsStealth();
	bool IsSeisui();
	bool IsRideMaidenDoll();
	bool IsOugonNoTsume();
	bool IsCondition(TEnumAsByte<EJackGamePlayerCondition> InCondition);
	void ConditionChangedSignature__DelegateSignature(bool bNewCondition);
};


// Class JackGame.JackGameplayStatics
// 0x0000 (0x0038 - 0x0038)
class UJackGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameplayStatics");
		return ptr;
	}


	bool STATIC_WorldToScreen(class ULocalPlayer* InLocalPlayer, const struct FVector& InWorldLocation, struct FVector2D* OutScreenLocation);
	void STATIC_WaitSaveLoad(class UObject* WorldContextObject);
	void STATIC_WaitMonsterGeneratorStable(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void STATIC_WaitLoadingCharacterCoordinate(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class AJackCharacter* InJackCharacter);
	void STATIC_WaitLoadingAllCharactersCoordinate(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void STATIC_WaitInitializingAllScheduledNPCForMatinee(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void STATIC_WaitCompleteChangeSchedulePatternScheduledNPC(class UObject* WorldContextObject, class AJackScheduledNPC* NPC, const struct FName& EventName, const struct FLatentActionInfo& LatentInfo);
	void STATIC_WaitCompleteChangeSchedulePatternAllScheduledNPC(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void STATIC_WaitCameraFade(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void STATIC_UpdateNavOctreeByComponent(class UActorComponent* Comp);
	void STATIC_UpdateNavOctreeByActor(class AActor* Actor);
	void STATIC_UpdateNavOctreeAll(class AActor* Actor, bool bUpdateAttachedActors);
	void STATIC_UpdateNavOctreeAfterMove(class USceneComponent* Comp);
	void STATIC_UpdateLevelStreamingStatus(class UObject* WorldContextObject, const struct FName& CurrentMapStart, const struct FJackTravelMapInfo& TravelMapInfo);
	void STATIC_UpdateFriendGuestBehaviorState(class UObject* WorldContextObject);
	void STATIC_UpdateFollowingFriendCharacters(class UObject* WorldContextObject, bool bRelocation);
	void STATIC_UpdateAchievedSibariPlayFlag(class UObject* WorldContextObject);
	void STATIC_UnpossessPlayerControl(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerControlPossessor> Possessor);
	void STATIC_UnmountVehicleAndStoreVehicleRideStatus(class UObject* WorldContextObject, bool bAutoHidden, class AJackVehicle** OutVehicle);
	void STATIC_UnlockDressupCoordinate(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType, TEnumAsByte<EJackDressupCoordinateLockReason> Reason);
	void STATIC_UnloadStreamLevels(class UObject* WorldContextObject, TArray<struct FName> LevelNames, const struct FLatentActionInfo& LatentInfo);
	void STATIC_UnloadAllFriendGameCharacters(class UObject* WorldContextObject);
	void STATIC_TriggerMapChange(class UObject* WorldContextObject, const struct FName& NextMapStart, const struct FJackMapJumpVolumeInfo& MapJumpVolumeInfo);
	void STATIC_TravelMap(class UObject* WorldContextObject, const struct FName& NextMapStart, const struct FName& NextMapID, const struct FName& TravelMapName);
	void STATIC_TransferPlayerControl(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerControlPossessor> NewPossessor);
	bool STATIC_ToggleGameFlagBool(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	bool STATIC_TimeChangePostNative(TArray<class APostProcessVolume*> PostProcessVolume, int PostTime, TArray<float> BroomIntensity, bool bOverrideBloomIntensity, TArray<float> BloomThreshold, bool bOverrideBloomThreshold, TArray<float> BroomDirtMaskIntensity, bool bOverrideDirtMaskIntensity, TArray<struct FLinearColor> BloomDirtMaskTint, bool bOverrideDirtMaskTint, TArray<float> AutoExposeMinBrightness, bool bOverrideAutoExposeMinBrightness, TArray<float> AutoExposeMaxBrightness, bool bOverrideAutoExposeMaxBrightness, TArray<float> AmbientOcclusionIntensity, bool bOverrideAmbientOcclusionIntensity, TArray<float> AmbientOcclusionRadius, bool bOverrideAmbientOcclusionRadius, TArray<float> AmbientOcclusionPower, bool bOverrideAmbientOcclusionPower, TArray<struct FLinearColor> SceneColorSceneColorTint, bool bOverrideSceneColorSceneColorTint, TArray<struct FLinearColor> AmbientCubemapTint, bool bOverrideAmbientCubemapTint, TArray<float> AmbientCubemapIntensity, bool bOverrideAmbientCubemapIntensity, TArray<float> IndirectLightingIntensity, bool bOverrideIndirectLightingIntensity, TArray<struct FLinearColor> IndirectLightingColor, bool bOverrideIndirectLightingColor, TArray<struct FLinearColor> LinearColor_ColorGradingGlobalGain, bool bOverrideColorGradingGlobalGain);
	void STATIC_TickGridPlaceOptimize(class UObject* WorldContextObject, TArray<class USkeletalMeshComponent*> InAgentArray);
	bool STATIC_TickGridPlaceLookAt(class UObject* WorldContextObject, TArray<class USceneComponent*> InAgentArray, class AActor* LookAtObj, float OrientOffset);
	void STATIC_TextHyphenationForTextBlock(class UObject* WorldContextObject, const struct FString& Text, class UTextBlock* TextBlock, TArray<struct FString>* OutLineTextArray);
	void STATIC_TextHyphenation(class UObject* WorldContextObject, const struct FString& Text, const struct FSlateFontInfo& FontInfo, float ContentSize, int MaxLines, TArray<struct FString>* OutLineTextArray);
	bool STATIC_TakeFieldDamage(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType, int Damage, int MaxLow);
	bool STATIC_SuspendBGM(class UObject* WorldContextObject, float FadeOutTime);
	void STATIC_StopPartyTalkVoiceDirect(class AJackCharacter* InPlayVoice);
	bool STATIC_StopMEForEmergency(class UObject* WorldContextObject, float FOTime);
	bool STATIC_StopMaterialUpdaterHandle(class UObject* WorldContextObject, class UJackMaterialUpdaterHandle* Handle, float FadeOutTime);
	bool STATIC_StopMaterialUpdate(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Mid, const struct FName& ParameterName);
	bool STATIC_StopMaterialParameterCollectionUpdate(class UObject* WorldContextObject, class UMaterialParameterCollection* MPC, const struct FName& ParameterName);
	void STATIC_StopLoadingScreen(class UObject* WorldContextObject, bool bSkipFlushStreaming);
	void STATIC_StopEnvSound(class UObject* WorldContextObject, float InDuration);
	bool STATIC_StopCSBGM(class UObject* WorldContextObject, float InFadeOutTime, bool bDontResumeOldBGM);
	void STATIC_StopCrossFade(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Mid, class APostProcessVolume* PostProcessVolume);
	bool STATIC_StopComponentMaterialUpdate(class UObject* WorldContextObject, class UPrimitiveComponent* Component, const struct FName& ParameterName);
	bool STATIC_StopBGM(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float FadeOutTime, bool bDontResumeOldBGM);
	bool STATIC_StopAllBGM(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float FadeOutTime);
	bool STATIC_StopActorMaterialUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FName& ParameterName);
	bool STATIC_StopActorMaterialCharacterUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FJackLDT_CharacterMaterialUpdater& AnimationName);
	void STATIC_StartPostProcessAutoExposureBiasFromCharacter(class AJackCharacter* Character, const struct FName& CurveName);
	void STATIC_StartPostProcessAutoExposureBias(class UObject* WorldContextObject, class UCurveFloat* Curve);
	class UJackMaterialUpdaterVector* STATIC_StartMaterialVectorUpdate(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Mid, const struct FName& ParameterName, const struct FLinearColor& DesiredValue, float Duration);
	class UJackMaterialUpdaterScalar* STATIC_StartMaterialScalarUpdate(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Mid, const struct FName& ParameterName, float DesiredValue, float Duration);
	class UJackMaterialUpdaterVector* STATIC_StartMaterialParameterCollectionVectorUpdate(class UObject* WorldContextObject, class UMaterialParameterCollection* MPC, const struct FName& ParameterName, const struct FLinearColor& DesiredValue, float Duration);
	class UJackMaterialUpdaterScalar* STATIC_StartMaterialParameterCollectionScalarUpdate(class UObject* WorldContextObject, class UMaterialParameterCollection* MPC, const struct FName& ParameterName, float DesiredValue, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartMaterialParameterCollectionCurveUpdate(class UObject* WorldContextObject, class UMaterialParameterCollection* MPC, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartMaterialParameterCollectionCurveAlphaUpdate(class UObject* WorldContextObject, class UMaterialParameterCollection* MPC, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartMaterialCurveUpdate(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Mid, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartMaterialCurveAlphaUpdate(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Mid, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	void STATIC_StartLoadingScreen(class UObject* WorldContextObject, bool bAutoCompleteWhenLoadingCompletes);
	class UMaterialInstanceDynamic* STATIC_StartCrossFade(class UObject* WorldContextObject, class APostProcessVolume* PostProcessVolume);
	class UJackMaterialUpdaterVector* STATIC_StartComponentMaterialVectorUpdate(class UObject* WorldContextObject, class UPrimitiveComponent* Component, const struct FName& ParameterName, const struct FLinearColor& DesiredValue, float Duration);
	class UJackMaterialUpdaterScalar* STATIC_StartComponentMaterialScalarUpdate(class UObject* WorldContextObject, class UPrimitiveComponent* Component, const struct FName& ParameterName, float DesiredValue, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartComponentMaterialCurveUpdate(class UObject* WorldContextObject, class UPrimitiveComponent* Component, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartComponentMaterialCurveAlphaUpdate(class UObject* WorldContextObject, class UPrimitiveComponent* Component, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterVector* STATIC_StartActorMaterialVectorUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FName& ParameterName, const struct FLinearColor& DesiredValue, float Duration);
	class UJackMaterialUpdaterScalar* STATIC_StartActorMaterialScalarUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FName& ParameterName, float DesiredValue, float Duration);
	class UJackMaterialUpdaterHandle* STATIC_StartActorMaterialLoopedCurveUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FName& ParameterName, class UCurveBase* StartCurve, class UCurveBase* LoopCurve, float ValueScale, class UJackMaterialUpdaterHandle* Handle);
	class UJackMaterialUpdaterCurve* STATIC_StartActorMaterialCurveUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterCurve* STATIC_StartActorMaterialCurveAlphaUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FName& ParameterName, class UCurveBase* Curve, float Duration);
	class UJackMaterialUpdaterDT* STATIC_StartActorMaterialCharacterUpdate(class UObject* WorldContextObject, class AActor* Actor, const struct FJackLDT_CharacterMaterialUpdater& AnimationName);
	void STATIC_SpecificTriggerMapChange(class UObject* WorldContextObject, const struct FName& NextMapStart, TEnumAsByte<EJackFadeColor> FadeColor, TEnumAsByte<EJackFadeTime> FadeTime, TEnumAsByte<EJackBGMControl> BGMControl, TEnumAsByte<EJackFadeTime> BGMFadeTime, bool bPlayMapChangeAnimation, bool bUnmountVehicle, TEnumAsByte<EJackMapChangeSound> PlayMapChangeSound);
	bool STATIC_SpecificLevelRemoteEventWithIgnoreActor(class UObject* WorldContextObject, const struct FName& EventName, TArray<struct FName> TargetLevelNames, bool bLevelBlueprint, bool bActorBlueprint, TArray<class AActor*> IgnoreActors);
	bool STATIC_SpecificLevelRemoteEvent(class UObject* WorldContextObject, const struct FName& EventName, TArray<struct FName> TargetLevelNames, bool bLevelBlueprint, bool bActorBlueprint, class AActor* IgnoreActor);
	class AJackWeaponBase* STATIC_SpawnWeaponCase(class AActor* OwnerActor, const struct FName& ItemID, TEnumAsByte<EJackEquippedHand> Hand);
	class AJackWeaponBase* STATIC_SpawnWeaponBody(class AActor* OwnerActor, const struct FName& ItemID, TEnumAsByte<EJackEquippedHand> Hand);
	class AJackVehicle* STATIC_SpawnVehicle(class UObject* WorldContextObject, TEnumAsByte<EJackVehicleModelId> ID);
	void STATIC_SpawnCollideEffectFromHitResult(class UObject* WorldContextObject, class UClass* Effect, const struct FHitResult& HitResult, float EffectBumpOffset, float DecalAddSize, bool bOverrideAttachInfo, bool bOverrideAttached, const struct FName& OverrideSocketName, TEnumAsByte<EAttachLocation> InOverrideAttachLocationType, const struct FVector& InOverrideOffsetLocation, const struct FRotator& InOverrideOffsetRotation, float InOverrideEffectLifeSpan);
	void STATIC_SpawnCollideEffectAtLocation(class UObject* WorldContextObject, class UClass* Effect, const struct FHitResult& HitResult, const struct FVector& HitLocation, const struct FRotator& HitRotation, const struct FVector& HitNormal, float EffectBumpOffset, float DecalAddSize, bool bOverrideAttachInfo, bool bOverrideAttached, const struct FName& OverrideSocketName, TEnumAsByte<EAttachLocation> InOverrideAttachLocationType, const struct FVector& InOverrideOffsetLocation, const struct FRotator& InOverrideOffsetRotation, float InOverrideEffectLifeSpan);
	void STATIC_SpawnCollideEffect(class UObject* WorldContextObject, class UClass* Effect, const struct FHitResult& HitResult, const struct FVector& EffectLocation, const struct FRotator& EffectRotation, const struct FVector& DecalLocation, const struct FRotator& DecalRotation, float DecalAddSize, bool bOverrideAttachInfo, bool bOverrideAttached, const struct FName& OverrideSocketName, TEnumAsByte<EAttachLocation> InOverrideAttachLocationType, const struct FVector& InOverrideOffsetLocation, const struct FRotator& InOverrideOffsetRotation, float InOverrideEffectLifeSpan);
	void STATIC_SpawnAndRideImmidiateIfNeed(class UObject* WorldContextObject);
	void STATIC_SpawnAndMountVehicle(class UObject* WorldContextObject, const struct FVector& InLocation, const struct FRotator& InRotation, TEnumAsByte<EJackVehicleModelId> ModelId);
	bool STATIC_SoundWaitFadeOut(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_SoundPlaybackComplete(class UObject* WorldContextObject, class UAudioComponent* AudioComponent, const struct FLatentActionInfo& LatentInfo);
	void STATIC_SlomoWorld(class UObject* WorldContextObject, TEnumAsByte<EJackWorldTimeDilation> Type, float TimeDilation);
	void STATIC_SlomoCharacters(class UObject* WorldContextObject, TEnumAsByte<EJackCharacterScope> Scope, TEnumAsByte<EJackTimeDilationPurpose> Purpose, float TimeDilation);
	void STATIC_ShowItemGetIconAtPlayerPos(class UObject* WorldContextObject, TEnumAsByte<EJackItemGetIcon> IconType, const struct FName& ItemID);
	void STATIC_SetWhaleCharacterForm(class UObject* WorldContextObject, TEnumAsByte<EJackWhaleCharacterForm> InWhaleCharacterForm);
	void STATIC_SetVisibilityLevelBrushModel(class UObject* WorldContextObject, class ULevel* Level, bool Visibility);
	void STATIC_SetViewOwnerDepthPriorityGroup(class UPrimitiveComponent* PrimitiveComponent, bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup);
	void STATIC_SetVehicleSpawnPoint(class UObject* WorldContextObject, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotator);
	void STATIC_SetUmayobiNoBeruFailCondition(class UObject* WorldContextObject, TEnumAsByte<EJackUmayobiNoBeruFailPurpose> FailPurpose, bool bFail);
	void STATIC_SetTextureCinematicMipLevel(class UTexture* Texture, TEnumAsByte<ETextureGroup> CinematicTextureGroup, float CinematicMipLevelsDuration);
	void STATIC_SetTalkingNPC(class UObject* WorldContextObject, class AJackCharacter* NPC);
	void STATIC_SetSkipNPCTickAtLoadReductionEnabled(class UObject* WorldContextObject, bool bFlag);
	void STATIC_SetSkeletalMeshClothingAssetsStretchLimit(class USkeletalMesh* SkeletalMesh, int Index, float StretchLimit);
	void STATIC_SetSkeletalMeshClothingAssetsShearResistance(class USkeletalMesh* SkeletalMesh, int Index, float ShearResistance);
	void STATIC_SetSkeletalMeshClothingAssetsSelfCollisionThickness(class USkeletalMesh* SkeletalMesh, int Index, float SelfCollisionThickness);
	void STATIC_SetSkeletalMeshClothingAssetsInertiaBlend(class USkeletalMesh* SkeletalMesh, int Index, float InertiaBlend);
	void STATIC_SetSkeletalMeshClothingAssetsGravityScale(class USkeletalMesh* SkeletalMesh, int Index, float GravityScale);
	void STATIC_SetSkeletalMeshClothingAssetsFriction(class USkeletalMesh* SkeletalMesh, int Index, float Friction);
	void STATIC_SetSkeletalMeshClothingAssetsDrag(class USkeletalMesh* SkeletalMesh, int Index, float Drag);
	void STATIC_SetSkeletalMeshClothingAssetsDamping(class USkeletalMesh* SkeletalMesh, int Index, float Damping);
	void STATIC_SetSkeletalMeshClothingAssetsBendResistance(class USkeletalMesh* SkeletalMesh, int Index, float BendResistance);
	void STATIC_SetSkeletalMeshBoneTransformInComponentSpace(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FName& BoneName, const struct FTransform& TransformInComponentSpace);
	void STATIC_SetSenaHairStyle(class UObject* WorldContextObject, TEnumAsByte<EJackSenaHairStyle> NewHairStyle);
	void STATIC_SetRuraForceFailCondition(class UObject* WorldContextObject, TEnumAsByte<EJackRuraFail> FailType, TEnumAsByte<EJackRuraFailPurpose> FailPurpose);
	void STATIC_SetRiremitoJumpTag(class UObject* WorldContextObject, const struct FName& JumpTag);
	void STATIC_SetReserveFirstParadeAnimation(class UObject* WorldContextObject, bool bReserve);
	void STATIC_SetRenkeiDisplayRefresh(class UObject* WorldContextObject);
	void STATIC_SetPS4CheckerboardHistoryBlendWeight(float HistoryBlendWeight);
	void STATIC_SetPropHiddenInGame(class AActor* Actor, const struct FName& PropName, bool bHidden);
	void STATIC_SetPlayerMarkerInTheRoom(class UObject* WorldContextObject, bool bInTheRoom);
	void STATIC_SetParticleSystemComponentAutoDestroy(class UParticleSystemComponent* ParticleSystemComponent, bool bAutoDestroy);
	void STATIC_SetOddEffectInotinoIsiIfHasSelectBag(class UObject* WorldContextObject, TEnumAsByte<EJackItem_Bag> BagType);
	void STATIC_SetOddEffectInotinoIsiIfHas(class UJackGameCharacter* InFriendGameCharacter);
	void STATIC_SetNPCScheduleControlCounter(class UObject* WorldContextObject, int Index, int Counter);
	void STATIC_SetNPCReactionExternalTrigger(class UObject* WorldContextObject, TEnumAsByte<EJackNPCReactionExternalTrigger> Trigger);
	void STATIC_SetNearClippingPlane(class UObject* WorldContextObject, float NearClippingPlane);
	void STATIC_SetMaterialCinematicMipLevel(class UMaterialInterface* Material, TEnumAsByte<ETextureGroup> CinematicTextureGroup, float CinematicMipLevelsDuration);
	void STATIC_SetLoadingScreenType(class UObject* WorldContextObject, TEnumAsByte<EJackLoadingScreen> InLoadingScreenType, TEnumAsByte<EJackLoadingScreenTips> InLoadingScreenTips, const struct FName& InTispId, bool bSetCsFlag);
	void STATIC_SetLightIntensityAndColor(class ALight* Light, float IntensityBase, int Time, float CurveRate, class UCurveFloat* CurveIntensity, class UCurveLinearColor* CurveColor);
	void STATIC_SetLightingChannels(class UPrimitiveComponent* PrimitiveComponent, const struct FLightingChannels& NewLightingChannels);
	void STATIC_SetLevelStreamingVisible(class UObject* WorldContextObject, class ULevelStreaming* LevelStreaming, bool bShouldBeVisible);
	void STATIC_SetLazyTokugiOkMessage(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> InArgs);
	void STATIC_SetLazyTabiNoKokoroeWithFName(class UObject* WorldContextObject, const struct FName& KeyRowName);
	void STATIC_SetLazyTabiNoKokoroe(class UObject* WorldContextObject, const struct FJackLDT_UITabiNoKokoroe& Key);
	void STATIC_SetLazyQuestMessage(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> InArgs);
	void STATIC_SetLazyPartyConditionOffMessage(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> InArgs);
	void STATIC_SetIgnoreTextureGroupLODBias(TEnumAsByte<ETextureGroup> TargetTextureGroup, bool bIgnore);
	void STATIC_SetIgnoreCheatSlomoCommand(class UObject* WorldContextObject, bool bIgnore);
	void STATIC_SetHeroCharacterForm(class UObject* WorldContextObject, TEnumAsByte<EJackHeroCharacterForm> InHeroCharacterForm);
	void STATIC_SetGuestNpcPosition(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType, const struct FVector& Location, const struct FRotator& Rotation);
	void STATIC_SetGuestNpcHiddenByCharacterType(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, TEnumAsByte<EJackGuestNpcHiddenPurpose> InPurpose, bool bInHidden, bool bInFade, bool bInFixedPosi);
	void STATIC_SetGuestNpcHiddenAll(class UObject* WorldContextObject, TEnumAsByte<EJackGuestNpcHiddenPurpose> InPurpose, bool bInHidden, bool bInFade, bool bInFixedPosi);
	void STATIC_SetGamePlayerCondition(class UObject* WorldContextObject, TEnumAsByte<EJackGamePlayerCondition> InCondition, TEnumAsByte<EJackGamePlayerConditionControlPurpose> InPurpose, bool bTrue);
	void STATIC_SetGameFlagString(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name, const struct FString& Value);
	void STATIC_SetGameFlagInt(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name, int Value);
	void STATIC_SetGameFlagFloat(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name, float Value);
	void STATIC_SetGameFlagBool(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name, bool Value);
	void STATIC_SetFriendGuestBehaviorBranch(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType, int InNo);
	void STATIC_SetFootIKDisable(class UObject* WorldContextObject, class AJackCharacter* InCharacter, bool bInDisable, TEnumAsByte<EJackFootIKControlPurpose> InPurpose);
	void STATIC_SetFollowingFriendCharacterHiddenByCharacterType(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, TEnumAsByte<EJackGuestNpcHiddenPurpose> InPurpose, bool bInHidden, bool bInFade, bool bInFixedPosi);
	void STATIC_SetFollowingFriendCharacterHiddenAll(class UObject* WorldContextObject, TEnumAsByte<EJackGuestNpcHiddenPurpose> InPurpose, bool bInHidden, bool bInFade, bool bInFixedPosi);
	void STATIC_SetFixedPartyMembers(class UObject* WorldContextObject, TArray<TEnumAsByte<EJackCharacter>> CharacterTypes);
	void STATIC_SetFieldPlayerCharacterType(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerControlCharacter> InPlayerControlCharacter);
	void STATIC_SetEnlightenUpdateRateFixedFrame(class UObject* WorldContextObject, int UpdateFrame);
	void STATIC_SetEnabledVideoRecording(class UObject* WorldContextObject, bool bEnable, bool bForce);
	void STATIC_SetEnabledSleep(class UObject* WorldContextObject, bool bEnable);
	void STATIC_SetEnabledSharePlay(class UObject* WorldContextObject, bool bEnable, bool bForce);
	void STATIC_SetEnabledScreenShot(class UObject* WorldContextObject, bool bEnable, bool bForce);
	void STATIC_SetEnabledLiveStreaming(class UObject* WorldContextObject, bool bEnable, bool bForce);
	void STATIC_SetEnabledLevelStreamingUpdate(class UObject* WorldContextObject, bool bEnabled);
	void STATIC_SetDressupCoordinate(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType, const struct FJackLDT_EquipmentCoordinate& Coordinate);
	void STATIC_SetDisableJackGameViewportClientVolumetricLightmap(class UObject* WorldContextObject, TEnumAsByte<EJackGameViewportClientControlCategory> Category, bool bDisable);
	void STATIC_SetDisableJackGameViewportClientRendering(class UObject* WorldContextObject, TEnumAsByte<EJackGameViewportClientControlCategory> Category, bool bDisable);
	void STATIC_SetDepthPriorityGroup(class UPrimitiveComponent* PrimitiveComponent, TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup);
	void STATIC_SetDefaultNearClippingPlane(class UObject* WorldContextObject);
	void STATIC_SetDebugMenuVector(class UObject* WorldContextObject, const struct FString& Name, const struct FVector& Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	void STATIC_SetDebugMenuRotator(class UObject* WorldContextObject, const struct FString& Name, const struct FRotator& Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	void STATIC_SetDebugMenuLinearColor(class UObject* WorldContextObject, const struct FString& Name, const struct FLinearColor& Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	void STATIC_SetDebugMenuInt(class UObject* WorldContextObject, const struct FString& Name, int Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	void STATIC_SetDebugMenuFloat(class UObject* WorldContextObject, const struct FString& Name, float Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	bool STATIC_SetDebugMenuCursorLocation(class UObject* WorldContextObject, const struct FString& CursorLocation);
	void STATIC_SetDebugMenuByte(class UObject* WorldContextObject, const struct FString& Name, unsigned char Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	void STATIC_SetDebugMenuBool(class UObject* WorldContextObject, const struct FString& Name, bool Value, const struct FString& MenuTooltip, const struct FString& SubMenuName);
	void STATIC_SetCpuBoostMode(bool bEnable);
	void STATIC_SetControlledCharacterType(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	void STATIC_SetContactShadowLength(class ULightComponent* Component, float Length);
	bool STATIC_SetComponentVisibility(class AActor* Actor, const struct FName& ComponentName, bool bVisibility);
	void STATIC_SetCameraResetRuraMove(class UObject* WorldContextObject, float InterpSec, bool bKeepYaw);
	void STATIC_SetCameraFade(class UObject* WorldContextObject, TEnumAsByte<EJackCameraFadeCategory> Layer, TEnumAsByte<EJackCameraFadeZLayer> ZLayer, float FadeAlpha, float FadeTime, const struct FLinearColor& FadeColor, bool bFadeAudio, bool bHoldWhenFinished);
	void STATIC_SetCameraAndPlayerMarkerCollisionIgnored(class UObject* WorldContextObject, bool bIgnored);
	void STATIC_SetBehaviorDirectBranches(class UObject* WorldContextObject, TArray<struct FName> InBranches);
	void STATIC_SetBehaviorDirectBranch(class UObject* WorldContextObject, const struct FName& InBranch);
	void STATIC_SetActorLightingChannels(class AActor* Actor, const struct FLightingChannels& NewLightingChannels);
	void STATIC_SetActorInputPriority(class AActor* Actor, TEnumAsByte<EJackInputPriority> InputPriority);
	void STATIC_SetActorCoordinate(class AActor* Actor, const struct FName& CoordinateName);
	void STATIC_SetActorCinematicMipLevel(class AActor* Actor, TEnumAsByte<ETextureGroup> CinematicTextureGroup, float CinematicMipLevelsDuration);
	void STATIC_SerifuExecutionStandby(class UObject* WorldContextObject);
	void STATIC_SerifuExecution(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& TextID, TArray<struct FJackMessageArgumentData> TagValueList, const struct FJackSerifuAutomationFlags& AutomationFlags, bool bForceMessageEnd);
	class AJackScheduledNPC* STATIC_SearchNearestNPC(class AActor* BaseActor, float Distance, float Angle);
	void STATIC_SEAD_ZeroOneCtrl_SetValue(class UAudioComponent* AudioComponent, int Slot, float Value);
	struct FName STATIC_SEAD_GetCategoryName(EJackSEADCategory Category);
	void STATIC_SEAD_CategoryCtrl_SuspendAll(float FadeOutTime);
	void STATIC_SEAD_CategoryCtrl_Suspend(EJackSEADCategory Category, float FadeOutTime);
	void STATIC_SEAD_CategoryCtrl_StopAll(float FadeOutTime);
	void STATIC_SEAD_CategoryCtrl_Stop(EJackSEADCategory Category, float FadeOutTime);
	void STATIC_SEAD_CategoryCtrl_SetVolumeAll(float Volume, float FadeTime);
	void STATIC_SEAD_CategoryCtrl_SetVolume(EJackSEADCategory Category, float Volume, float FadeTime);
	void STATIC_SEAD_CategoryCtrl_SetVoiceOptionVolume(float InVolume, float FadeTime, bool bEnableP001Voice);
	void STATIC_SEAD_CategoryCtrl_SetSEOptionVolume(float Volume, float FadeTime);
	void STATIC_SEAD_CategoryCtrl_SetMusicOptionVolume(float Volume, float FadeTime);
	void STATIC_SEAD_CategoryCtrl_SetLayerVolume(EJackSEADCategory Category, EJackSEADCategoryLayer Layer, float Volume, float FadeTime);
	void STATIC_SEAD_CategoryCtrl_ResumeAll(float FadeInTime);
	void STATIC_SEAD_CategoryCtrl_Resume(EJackSEADCategory Category, float FadeInTime);
	void STATIC_SEAD_AutoSeCtrl_SetEnable(bool bEnable);
	void STATIC_ScreenDebugMessage(class UObject* WorldContextObject, const struct FString& Message, float ScreenPositionX, float ScreenPositionY, float LifeTime, bool bDrawTile, bool bUniqMessageColor, const struct FColor& MessageColor);
	void STATIC_SavingBackToThePastInfo(class UObject* WorldContextObject);
	void STATIC_Sample_SetAny(class UObject* WorldContextObject, bool Boolean);
	bool STATIC_Sample_GetAny(class UObject* WorldContextObject);
	void STATIC_Sample_CommentTest4(class UObject* WorldContextObject, int Test);
	void STATIC_Sample_CommentTest3(class UObject* WorldContextObject, int Test);
	void STATIC_Sample_CommentTest2(class UObject* WorldContextObject, int Test);
	void STATIC_Sample_CommentTest1(class UObject* WorldContextObject, int Test);
	void STATIC_Sample_ArgumentTest(class UObject* WorldContextObject, const struct FVector& Vector1, const struct FVector& Vector2, const struct FVector& Vector3, struct FVector* Vector4);
	bool STATIC_ResumeBGM(class UObject* WorldContextObject, float FadeInTime, bool bIgnoreResumeDelay);
	void STATIC_RestoreVehicleRideStatus(class UObject* WorldContextObject);
	void STATIC_ResetMaterialCinematicMipLevel(class UMaterialInterface* Material, TEnumAsByte<ETextureGroup> CinematicTextureGroup);
	void STATIC_ResetGameFlag(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	void STATIC_ResetFixedPartyMembers(class UObject* WorldContextObject);
	void STATIC_ResetDressupCoordinate(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	void STATIC_ResetAllGameFlags(class UObject* WorldContextObject);
	void STATIC_ResetActorCinematicMipLevel(class AActor* Actor, TEnumAsByte<ETextureGroup> CinematicTextureGroup);
	void STATIC_ReservePlayerControlWithFailedEvent(const struct FScriptDelegate& Delegate, class AActor* OtherActor, class AActor* ControlActor, TEnumAsByte<EJackPlayerControlPossessor> Possessor, int MinorPriority, class UPrimitiveComponent* OverlappingIgnoreComponent, const struct FScriptDelegate& FailedDelegate);
	void STATIC_ReservePlayerControl(const struct FScriptDelegate& Delegate, class AActor* OtherActor, class AActor* ControlActor, TEnumAsByte<EJackPlayerControlPossessor> Possessor, int MinorPriority, class UPrimitiveComponent* OverlappingIgnoreComponent);
	void STATIC_RequestPrepareMapChange(class UObject* WorldContextObject, const struct FName& NextMapStart, const struct FName& NextMapID, const struct FJackTravelMapInfo& TravelMapInfo);
	void STATIC_RequestGC(class UObject* WorldContextObject);
	void STATIC_RequestAutoSave(class UObject* WorldContextObject);
	struct FString STATIC_ReplacePlatformSpecificTextTags(const struct FString& inString);
	struct FString STATIC_ReplaceMessageTag(class UObject* WorldContextObject, const struct FString& InText, TArray<struct FJackMessageArgumentData> Args);
	TArray<struct FString> STATIC_ReplaceArrayMessageTag(class UObject* WorldContextObject, TArray<struct FString> InTextArray, TArray<struct FJackMessageArgumentData> Args);
	void STATIC_RemoveUMGWidget(class UObject* WorldContextObject, class UJackUMGWidgetBase* Widget);
	void STATIC_RemoveCategoryHiddenExclusionTag(class UObject* WorldContextObject, const struct FName& InTag);
	void STATIC_RemoveBlendable_PostProcess(class APostProcessVolume* ProcessVolume, const TScriptInterface<class UBlendableInterface>& InBlendableObject);
	void STATIC_RemoveBlendable_PlayerCameraPostProcessSettings(class UCameraComponent* CameraComputer, const TScriptInterface<class UBlendableInterface>& InBlendableObject);
	void STATIC_RemoveAcquiredActiveTokugi(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InTokugi);
	bool STATIC_RemoteEventWithIgnoreActor(class UObject* WorldContextObject, const struct FName& EventName, bool bLevelBlueprint, bool bActorBlueprint, TArray<class AActor*> IgnoreActors);
	bool STATIC_RemoteEvent(class UObject* WorldContextObject, const struct FName& EventName, bool bLevelBlueprint, bool bActorBlueprint, class AActor* IgnoreActor);
	void STATIC_RefreshItemGettableObject(class UObject* WorldContextObject);
	void STATIC_RebuildAutoSave(class UObject* WorldContextObject);
	void STATIC_ReapplyGameCharacterExp(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	TArray<int> STATIC_RandomProbabilityTableArray(TArray<int> ProbabilityTbl);
	int STATIC_RandomProbabilityTable(TArray<int> ProbabilityTbl);
	bool STATIC_RandomBoolRate(float Rate);
	bool STATIC_RandomBoolPercentFloat(float Percent);
	bool STATIC_RandomBoolPercent(int Percent);
	bool STATIC_RandomBoolFraction(int Denominator, int Numerator);
	void STATIC_PreloadVehicleClass(class UObject* WorldContextObject, TEnumAsByte<EJackVehicleModelId> ModelId);
	void STATIC_PreloadStopWatchStop(class UObject* WorldContextObject, const struct FName& KeyName);
	void STATIC_PreloadStopWatchStart(class UObject* WorldContextObject, const struct FName& KeyName);
	void STATIC_PreloadMemoryOutPut(class UObject* WorldContextObject);
	void STATIC_PreloadMap(class UObject* WorldContextObject, const struct FName& MapStartName);
	struct FName STATIC_PreloadGetName(class UObject* WorldContextObject);
	void STATIC_PostQuestComplete(class UObject* WorldContextObject, const struct FName& QuestFlagName);
	void STATIC_PossessPlayerControl(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerControlPossessor> Possessor);
	bool STATIC_PlaySoundAttached_PlaybackComplete(class UObject* WorldContextObject, class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FLatentActionInfo& LatentInfo, const struct FName& AttachPointName, const struct FVector& Location, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	bool STATIC_PlaySoundAtLocation_PlaybackComplete(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	bool STATIC_PlaySound2D_PlaybackComplete(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	void STATIC_PlayPresetShake(class UObject* WorldContextObject, const struct FJackLDT_PresetCameraShake& PresetCameraShake, const struct FJackLDT_PresetForceFeedback& PresetForceFeedback, class UClass* OverrideCameraShakeClass, class UForceFeedbackEffect* OverrideForceFeedback);
	void STATIC_PlayPartyTalkVoiceDirect(class AJackCharacter* InPlayVoice, const struct FName& InVoiceID, bool bRandomLip);
	bool STATIC_PlayMinigameMEFromMEID(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& MeId, float FadeOutTime, float FadeInTime, bool bDontResumeBGM);
	bool STATIC_PlayMEFromMEIDByMEType(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& MeId, EJackMEType InMEType, float FadeOutTime, float FadeInTime, bool bDontResumeBGM);
	bool STATIC_PlayMEFromMEID(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& MeId, float FadeOutTime, float FadeInTime, bool bDontResumeBGM);
	bool STATIC_PlayEnvSoundFromMapID(class UObject* WorldContextObject, const struct FName& InMapId, bool bNightTime, TEnumAsByte<EJackWorldWeather> InWeatherType, TEnumAsByte<EJackWorldWindLevel> InWindLevelType, float InDuration);
	bool STATIC_PlayEnvSoundFromAsset(class UObject* WorldContextObject, class USoundBase* Asset, float InDuration);
	class UJackMaterialUpdaterCurve* STATIC_PlayDamageMaterialAnimation(class AActor* Actor, const struct FJackLDT_DamageMaterialAnimation& AnimationName);
	bool STATIC_PlayBGMFromMapID(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& MapId, bool bNightTime, float FadeOutTime, float FadeInTime, float StartTime, bool bPushMusic);
	bool STATIC_PlayBGMFromCSID(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& CSID, bool bNightTime, float FadeOutTime, float FadeInTime, float StartTime, bool bPushMusic);
	bool STATIC_PlayBGMFromBGMID(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& BGMID, bool bNightTime, float FadeOutTime, float FadeInTime, float PregapTime, bool bPushMusic);
	bool STATIC_PlayBGMFromAssetRef(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FSoftObjectPath& MusicAssetRef, float FadeOutTime, bool bForceNewPlay, bool bPushMusic);
	bool STATIC_PlayBGMFromAsset(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USoundBase* Asset, TEnumAsByte<EJackBGMControl> Control, float FadeOutTime, float FadeInTime, float StartTime);
	bool STATIC_PlayBGM(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EJackBGMControl> Control, float FadeOutTime, float FadeInTime, float StartTime, bool bPushMusic);
	void STATIC_PartyResurrection(class UObject* WorldContextObject, bool bSetHP1, TEnumAsByte<EJackCharacter> CharacterType);
	void STATIC_PartyRecovery(class UObject* WorldContextObject, TEnumAsByte<EJackCharacterRecover> Type);
	void STATIC_ParameterSettingWhenBackToThePast(class UObject* WorldContextObject);
	void STATIC_ParameterSettingPowerAwakening(class UObject* WorldContextObject);
	void STATIC_OutputLogMessage(class UObject* WorldContextObject, const struct FString& Message);
	void STATIC_OpenFukidasi(class UObject* WorldContextObject, class AJackCharacter* Target, const struct FString& FukidasiID, bool bCheckPlayerDistance);
	void STATIC_MultiSetTextureCinematicMipLevel(class UTexture* Texture, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups, float CinematicMipLevelsDuration);
	void STATIC_MultiSetMaterialCinematicMipLevel(class UMaterialInterface* Material, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups, float CinematicMipLevelsDuration);
	void STATIC_MultiSetIgnoreTextureGroupLODBias(TArray<TEnumAsByte<ETextureGroup>> TargetTextureGroups, bool bIgnore);
	void STATIC_MultiSetActorCinematicMipLevel(class AActor* Actor, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups, float CinematicMipLevelsDuration);
	void STATIC_MultiResetMaterialCinematicMipLevel(class UMaterialInterface* Material, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups);
	void STATIC_MultiResetActorCinematicMipLevel(class AActor* Actor, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups);
	void STATIC_MergeCharacterItem(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	void STATIC_MergeCharacterBagToCommonBag(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType);
	struct FVector2D STATIC_MeasureText(class UObject* WorldContextObject, const struct FString& Text, const struct FSlateFontInfo& FontInfo);
	void STATIC_Matinee_UnEquipItemOnlyLooks(class AActor* InActor, TEnumAsByte<EJackEquipmentRegion> InRegion);
	void STATIC_Matinee_RestoreEquipmentItem(class AActor* InActor);
	void STATIC_Matinee_EquipItemOnlyLooks(class AActor* InActor, TEnumAsByte<EJackEquipmentRegion> InRegion, const struct FName& ItemID);
	void STATIC_Matinee_AddAcquiredTokugi(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InTokugi);
	void STATIC_Matinee_AddAcquiredJumon(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InJumon);
	void STATIC_MapJumpBySavedGame(class UObject* WorldContextObject);
	struct FRotator STATIC_MakeRotation(const struct FVector& Direction);
	struct FJackMessageArgumentData STATIC_MakeJackMessageArgumentDataAtIntValue(const struct FString& ArgumentName, int ArgumentValue);
	struct FJackMessageArgumentData STATIC_MakeJackMessageArgumentDataAtGameCharacterType(class UObject* WorldContextObject, const struct FString& ArgumentName, TEnumAsByte<EJackCharacter> CharacterType);
	struct FJackMessageArgumentData STATIC_MakeJackMessageArgumentDataAtGameCharacter(const struct FString& ArgumentName, class UJackGameCharacter* GameCharacter);
	struct FJackMessageArgumentData STATIC_MakeJackMessageArgumentDataAtFloatValue(const struct FString& ArgumentName, float ArgumentValue);
	void STATIC_LogLevelStreamingStatus(class UObject* WorldContextObject, const struct FName& NewMapStart);
	void STATIC_LockDressupCoordinate(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType, TEnumAsByte<EJackDressupCoordinateLockReason> Reason);
	void STATIC_LoadStreamLevels(class UObject* WorldContextObject, TArray<struct FName> LevelNames, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_LineTraceSingleByCollisionChannel(class UObject* WorldContextObject, TEnumAsByte<ECollisionChannel> CollisionChannel, const struct FVector& Start, const struct FVector& End, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	bool STATIC_LineTraceSingleByCharacterCollisionChannel(class AJackCharacter* JackCharacter, const struct FVector& Start, const struct FVector& End, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FHitResult* OutHit);
	int STATIC_Limits_Int8_Min();
	int STATIC_Limits_Int8_Max();
	int STATIC_Limits_Int32_Min();
	int STATIC_Limits_Int32_Max();
	float STATIC_Limits_Float_Min();
	float STATIC_Limits_Float_Max();
	void STATIC_LatentPossessPlayerControl(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EJackPlayerControlPossessor> Possessor);
	bool STATIC_IsValidUMGManager(class UObject* WorldContextObject);
	bool STATIC_IsTripleRunning(class UObject* WorldContextObject);
	bool STATIC_IsTrial();
	bool STATIC_IsTravelMapGame(class UObject* WorldContextObject);
	bool STATIC_IsTaughtTabiNoKokoroe(class UObject* WorldContextObject, const struct FJackLDT_UITabiNoKokoroe& Key);
	bool STATIC_IsSkipNPCTickAtLoadReductionEnabled(class UObject* WorldContextObject);
	bool STATIC_IsShowingLoadingScreen(class UObject* WorldContextObject);
	bool STATIC_IsSenaShortHairCoordinate(class UObject* WorldContextObject);
	bool STATIC_IsScenarioFlagLessThan(class UObject* WorldContextObject, const struct FName& Lhs, bool bEquals, const struct FName& Rhs);
	bool STATIC_IsScenarioFlagGreaterThan(class UObject* WorldContextObject, const struct FName& Lhs, bool bEquals, const struct FName& Rhs);
	bool STATIC_IsScenarioFlagBetween(class UObject* WorldContextObject, const struct FName& Lower, bool bLowerEquals, const struct FName& Value, bool bEqualsUpper, const struct FName& Upper);
	bool STATIC_IsResidentDataLoadCompleted(class UObject* WorldContextObject);
	bool STATIC_IsPreloadVehicleClassComplete(class UObject* WorldContextObject, TEnumAsByte<EJackVehicleModelId> ModelId);
	bool STATIC_IsPreloading(class UObject* WorldContextObject);
	bool STATIC_IsPossessedPlayerControl(class UObject* WorldContextObject);
	bool STATIC_IsPIE(class UObject* WorldContextObject);
	bool STATIC_IsPartyMember(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType);
	bool STATIC_IsOpenSerifuWindow(class UObject* WorldContextObject);
	bool STATIC_IsOpenedDressupCoordinate(class UObject* WorldContextObject, const struct FJackLDT_EquipmentCoordinate& Coordinate);
	bool STATIC_IsOnAsyncFixupCharacterLooks(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	bool STATIC_IsOnAsyncFixupAnyCharacterLooks(class UObject* WorldContextObject);
	bool STATIC_IsNavSystemBusy(class UObject* WorldContextObject);
	bool STATIC_IsMatineeControlled(class AActor* InActor);
	bool STATIC_IsMainGameMode(class UObject* WorldContextObject);
	bool STATIC_IsLevelLoading(class UObject* WorldContextObject, const struct FName& LevelName);
	bool STATIC_IsInputActionKeyDown(class AJackPlayerController* Controller, const struct FName& ActionName);
	bool STATIC_IsGottenFromGettableObject(class UObject* WorldContextObject, const struct FName& GetFlag);
	bool STATIC_IsGameWorld(class UObject* WorldContextObject);
	bool STATIC_IsGamePlayerCondition(class UObject* WorldContextObject, TEnumAsByte<EJackGamePlayerCondition> InCondition);
	bool STATIC_IsFadeAnimationRunning(class UObject* WorldContextObject);
	bool STATIC_IsExistsGameFlag(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	bool STATIC_IsExchangeEnterButton();
	bool STATIC_IsEnableFading(class UObject* WorldContextObject);
	bool STATIC_IsEnabledSleep(class UObject* WorldContextObject);
	bool STATIC_IsEnabledLevelStreamingUpdate(class UObject* WorldContextObject);
	bool STATIC_IsEnabledLevelDebugFeature();
	bool STATIC_IsEnabledLevelDebugDisplay();
	bool STATIC_IsDisableChangePlayBGM(class UObject* WorldContextObject);
	bool STATIC_IsCategoryHidden(class UObject* WorldContextObject, TEnumAsByte<EJackCategoryHiddenType> InType);
	bool STATIC_IsCaravan();
	bool STATIC_IsCameraAndPlayerMarkerCollisionIgnored(class UObject* WorldContextObject);
	bool STATIC_IsBattleSimpleCameraMode(class UObject* WorldContextObject);
	bool STATIC_IsAttachedPropTo(class AActor* Actor, const struct FName& PropName);
	bool STATIC_IsActorPlayerMarker(class AActor* Actor);
	bool STATIC_IsActorControlledByPlayer(class AActor* Actor);
	bool STATIC_IsAcquiredJumonInPartyMember(class UObject* WorldContextObject);
	bool STATIC_IsAcquiredActiveTokugiInPartyMember(class UObject* WorldContextObject);
	bool STATIC_InteractToComponent(class AActor* InteractorActor, class UJackInteractiveActorComponent* InteractiveActorComponent);
	bool STATIC_InteractToActor(class AActor* InteractorActor, class AActor* InteractiveActor);
	bool STATIC_HasLazyMessage(class UObject* WorldContextObject);
	void STATIC_GuestNpcLeaveAll(class UObject* WorldContextObject);
	void STATIC_GuestNpcLeave(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType);
	void STATIC_GuestNpcJoin(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType, const struct FVector& Location, const struct FRotator& Rotation);
	float STATIC_GetYawLocationToLocation(const struct FVector& FromLocation, const struct FVector& ToLocation);
	class UJackWorldWeather* STATIC_GetWorldWeather(class UObject* WorldContextObject);
	class UJackWorldTime* STATIC_GetWorldTime(class UObject* WorldContextObject);
	TArray<struct FJackWorldParticleContainer> STATIC_GetWorldParticles(class UObject* WorldContextObject);
	TEnumAsByte<EJackWhaleCharacterForm> STATIC_GetWhaleCharacterForm(class UObject* WorldContextObject);
	class UJackWeatherAffectComponent* STATIC_GetWeatherAffectComponent(class UObject* WorldContextObject);
	struct FString STATIC_GetVehicleDisplayName(class UObject* WorldContextObject, TEnumAsByte<EJackVehicleModelId> ID);
	int STATIC_GetUnacquiredCountFromGettable_TreasureBox(class UObject* WorldContextObject, class UDataTable* TreasureBoxTable, const struct FName& MapVolumeID);
	int STATIC_GetUnacquiredCountFromGettable_Common(class UObject* WorldContextObject, class UDataTable* CommonTable, const struct FName& MapVolumeID, TEnumAsByte<EJackGettableCommonPurpose> Purpose, TEnumAsByte<EJackGettableCommonPurpose> ExclusivePurpose);
	class UJackUMGManager* STATIC_GetUMGManager(class UObject* WorldContextObject);
	bool STATIC_GetUmayobiNoBeruFailConditionWithPurpose(class UObject* WorldContextObject, TEnumAsByte<EJackUmayobiNoBeruFailPurpose> FailPurpose);
	bool STATIC_GetUmayobiNoBeruFailCondition(class UObject* WorldContextObject);
	EJackUIPlatformType STATIC_GetUIPlatformType(class UObject* WorldContextObject);
	class UJackUIMapManager* STATIC_GetUIMapManager(class UObject* WorldContextObject);
	class UJackTokugiManager* STATIC_GetTokugiManager(class UObject* WorldContextObject);
	float STATIC_GetTimeFloatNative(TArray<float> FloatTable, int Time);
	struct FLinearColor STATIC_GetTimeColorNative(TArray<struct FLinearColor> ColorTable, int Time);
	class UJackTextManager* STATIC_GetTextManager(class UObject* WorldContextObject);
	class UJackTextMacroReplaceManager* STATIC_GetTextMacroReplaceManager(class UObject* WorldContextObject);
	struct FString STATIC_GetTextForName(class UObject* WorldContextObject, const struct FName& TextID);
	struct FString STATIC_GetText(class UObject* WorldContextObject, const struct FName& TextID);
	struct FName STATIC_GetTalkingNPCUniqueID(class UObject* WorldContextObject);
	class AJackCharacter* STATIC_GetTalkingNPC(class UObject* WorldContextObject);
	class UJackSystemData* STATIC_GetSystemData(class UObject* WorldContextObject);
	TArray<class ULevelStreaming*> STATIC_GetStreamLevels(class UObject* WorldContextObject);
	class UJackStoreManager* STATIC_GetStoreManager(class UObject* WorldContextObject);
	class UJackSQEXNGWordManager* STATIC_GetSQEXNGWordManager(class UObject* WorldContextObject);
	class UJackSoundManager* STATIC_GetSoundManager(class UObject* WorldContextObject);
	bool STATIC_GetSkeletalMeshRefPoseBoneTransform(class USkeletalMeshComponent* SkeletalMeshComponent, const struct FName& BoneName, struct FTransform* OutTransform);
	float STATIC_GetSkeletalMeshClothingAssetsStretchLimit(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsShearResistance(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsSelfCollisionThickness(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsInertiaBlend(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsGravityScale(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsFriction(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsDrag(class USkeletalMesh* SkeletalMesh, int Index);
	float STATIC_GetSkeletalMeshClothingAssetsDamping(class USkeletalMesh* SkeletalMesh, int Index);
	int STATIC_GetSkeletalMeshClothingAssetsCount(class USkeletalMesh* SkeletalMesh);
	float STATIC_GetSkeletalMeshClothingAssetsBendResistance(class USkeletalMesh* SkeletalMesh, int Index);
	TArray<struct FName> STATIC_GetSkeletalMeshClothingAssetNames(class USkeletalMesh* SkeletalMesh);
	class UJackSibariManager* STATIC_GetSibariManager(class UObject* WorldContextObject);
	TEnumAsByte<EJackSenaHairStyle> STATIC_GetSenaHairStyle(class UObject* WorldContextObject);
	int STATIC_GetSelectedIndexBySerifuExecution(class UObject* WorldContextObject);
	void STATIC_GetScreenDebugMessageFontSize(class UObject* WorldContextObject, float* CharSizeHalfWidthX, float* CharSizeFullWidthX, float* CharSizeY);
	void STATIC_GetScenarioInfo(class UObject* WorldContextObject, EJackScenarioPlaythrough Playthrough, const struct FName& ScenarioFlag, TEnumAsByte<EJackScenarioID>* ScenarioID, int* ScenarioFlagIndex);
	struct FName STATIC_GetScenarioBGMIDFromMapID(class UObject* WorldContextObject, const struct FName& InMapId);
	class UJackSaveData* STATIC_GetSaveData(class UObject* WorldContextObject);
	class AJackSafeAreaManager* STATIC_GetSafeAreaManager(class UObject* WorldContextObject);
	TEnumAsByte<EJackRuraFail> STATIC_GetRuraAreaFailType(class UObject* WorldContextObject, const struct FVector& Location, float SphereRadius);
	void STATIC_GetRidableVehicleArray(class UObject* WorldContextObject, TArray<class AJackVehicle*>* OutVehicleArray);
	class AJackRenkeiManager* STATIC_GetRenkeiManager(class UObject* WorldContextObject);
	TEnumAsByte<EJackRegion> STATIC_GetRegionType();
	class UJackRecipeBookManager* STATIC_GetRecipeBookManager(class UObject* WorldContextObject);
	class UJackWeatherAffectComponent* STATIC_GetPlayerWeatherAffectComponent(class UObject* WorldContextObject);
	TEnumAsByte<EJackVehicle> STATIC_GetPlayerRidingVehicleType(class UObject* WorldContextObject);
	TEnumAsByte<EJackVehicleModelId> STATIC_GetPlayerRidingVehicleModelId(class UObject* WorldContextObject);
	class APawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerController> ControllerType);
	struct FString STATIC_GetPlayerGameCharacterName(class UObject* WorldContextObject);
	class UJackGameCharacter* STATIC_GetPlayerGameCharacter(class UObject* WorldContextObject);
	TEnumAsByte<EJackPlayerControlPossessor> STATIC_GetPlayerControlPossessor(class UObject* WorldContextObject);
	class APlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerController> ControllerType);
	class ACharacter* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerController> ControllerType);
	struct FRotator STATIC_GetPlayerCameraRotation(class UObject* WorldContextObject);
	class APlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerController> ControllerType);
	struct FVector STATIC_GetPlayerCameraLocation(class UObject* WorldContextObject);
	float STATIC_GetPlayerCameraFov(class UObject* WorldContextObject);
	struct FName STATIC_GetPlayBGMIDFromMapID(class UObject* WorldContextObject, const struct FName& InMapId);
	struct FString STATIC_GetPersistentLevelPackageName(class UObject* WorldContextObject, bool bRemovePIEPrefix);
	struct FString STATIC_GetPersistentLevelName(class UObject* WorldContextObject);
	TArray<class AJackCharacter*> STATIC_GetPartyCharacters(class UObject* WorldContextObject, bool bIgnoreVehicle);
	struct FVector STATIC_GetPartyCharacterHomeLocation(int Index, const struct FTransform& LeaderTransform);
	class UJackPairingManager* STATIC_GetPairingManager(class UObject* WorldContextObject);
	class UJackOddEffectManager* STATIC_GetOddEffectManager(class UObject* WorldContextObject);
	class UJackOddEffectDatabase* STATIC_GetOddEffectDatabase(class UObject* WorldContextObject);
	int STATIC_GetNPCScheduleControlCounter(class UObject* WorldContextObject, int Index);
	TEnumAsByte<EJackNPCImportance> STATIC_GetNPCImportanceFromScenarioText(class UObject* WorldContextObject, const struct FJackSerifuAutomationFlags& SerifuAutomationFlags, const struct FName& TextID);
	TArray<class AJackNPC*> STATIC_GetNPCCharacters(class UObject* WorldContextObject);
	int STATIC_GetNowWorldTime(class UObject* WorldContextObject);
	class UJackMusicManager* STATIC_GetMusicManager(class UObject* WorldContextObject);
	class UJackMonsterDatabase* STATIC_GetMonsterDatabase(class UObject* WorldContextObject);
	TArray<class AJackMonsterCharacter*> STATIC_GetMonsterCharacters(class UObject* WorldContextObject);
	class UJackModeChangeManager* STATIC_GetModeChangeManager(class UObject* WorldContextObject);
	class UJackMiniGameManager* STATIC_GetMiniGameManager(class UObject* WorldContextObject);
	class UJackMedalManager* STATIC_GetMedalManager(class UObject* WorldContextObject);
	TArray<struct FName> STATIC_GetMapVolumeIDFromGettable_Common(class UObject* WorldContextObject, class UDataTable* CommonTable, TEnumAsByte<EJackGettableCommonPurpose> Purpose, TEnumAsByte<EJackGettableCommonPurpose> ExclusivePurpose);
	int STATIC_GetMapStartCameraNo(class UObject* WorldContextObject, const struct FName& MapStartName);
	class UJackLocalizationManager* STATIC_GetLocalizationManager(class UObject* WorldContextObject);
	TArray<class ULevel*> STATIC_GetLoadedLevelsByName(class UObject* WorldContextObject, TArray<struct FName> LevelNames);
	TArray<class ULevel*> STATIC_GetLoadedLevelsByLevelPackageName(class UObject* WorldContextObject, TArray<struct FName> LevelNames);
	TArray<class ULevel*> STATIC_GetLoadedLevels(class UObject* WorldContextObject);
	class ULevel* STATIC_GetLoadedLevelByName(class UObject* WorldContextObject, const struct FName& LevelName);
	class ULevel* STATIC_GetLoadedLevelByLevelPackageName(class UObject* WorldContextObject, const struct FName& LevelName);
	struct FLightingChannels GetLightingChannelsDefaultValue(bool bEnableDefaultLighting, bool bEnableCharacterLighting, bool bEnableOffscreenRenderingLighting);
	TArray<class UWorld*> STATIC_GetLevelWorlds(class UObject* WorldContextObject);
	TArray<struct FString> STATIC_GetLevelPackageNames(class UObject* WorldContextObject, bool bRemovePIEPrefix);
	TArray<struct FString> STATIC_GetLevelNames(class UObject* WorldContextObject);
	TArray<class AActor*> STATIC_GetLevelActorsByName(class UObject* WorldContextObject, const struct FName& LevelName);
	TEnumAsByte<EJackLanguage> STATIC_GetLanguageType();
	class UJackKiraManager* STATIC_GetKiraManager(class UObject* WorldContextObject);
	class AJackPlayerController* STATIC_GetJackPlayerController(class UObject* WorldContextObject);
	class AJackCharacter* STATIC_GetJackPlayerCharacter(class UObject* WorldContextObject, bool bIgnoreVehicle);
	class AJackPlayerCameraManager* STATIC_GetJackPlayerCameraManager(class UObject* WorldContextObject);
	class UJackGamePlayer* STATIC_GetJackGamePlayer(class UObject* WorldContextObject);
	class AJackGameModeBase* STATIC_GetJackGameModeBase(class UObject* WorldContextObject);
	class AJackGameMode* STATIC_GetJackGameMode(class UObject* WorldContextObject);
	class UJackGameInstance* STATIC_GetJackGameInstance(class UObject* WorldContextObject);
	class UJackCharacterSystem* STATIC_GetJackCharacterSystem(class UObject* WorldContextObject);
	class UJackItemPresentManager* STATIC_GetItemPresentManager(class UObject* WorldContextObject);
	class UJackItemManager* STATIC_GetItemManager(class UObject* WorldContextObject);
	struct FRotator STATIC_GetInverseRotator(const struct FRotator& Rotation);
	class UJackImeManager* STATIC_GetImeManager(class UObject* WorldContextObject);
	TEnumAsByte<EJackHeroCharacterForm> STATIC_GetHeroCharacterForm(class UObject* WorldContextObject);
	TArray<class UJackGuestNpcGameCharacter*> STATIC_GetGuestNpcGameCharacters(class UObject* WorldContextObject);
	TArray<class AJackCharacter*> STATIC_GetGuestNPCCharacters(class UObject* WorldContextObject);
	class UJackGuestNpcGameCharacter* STATIC_GetGuestNPCCharacter(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType);
	struct FVector STATIC_GetGroundLocationWithBool(class UObject* WorldContextObject, const struct FVector& InLocation, bool bDownOnly, float SphereRadius, float SweepDistance, bool* OutOnGround);
	struct FVector STATIC_GetGroundLocation(class UObject* WorldContextObject, const struct FVector& InLocation, bool bDownOnly, float SphereRadius, float SweepDistance);
	class APostProcessVolume* STATIC_GetGlobalPostProcessVolume(class UObject* WorldContextObject);
	struct FString STATIC_GetGameFlagString(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	int STATIC_GetGameFlagInt(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	float STATIC_GetGameFlagFloat(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	bool STATIC_GetGameFlagBool(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category, const struct FName& Name);
	class UJackGameFlag* STATIC_GetGameFlag(class UObject* WorldContextObject);
	class UJackGameCharacter* STATIC_GetGameCharacter(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> Character);
	class UJackFukkatunojumonManager* STATIC_GetFukkatunojumonManager(class UObject* WorldContextObject);
	TArray<class AJackCharacter*> STATIC_GetFollowingFriendCharacters(class UObject* WorldContextObject);
	TArray<class AJackCharacter*> STATIC_GetFollowingCharacters(class UObject* WorldContextObject);
	class UJackInteractiveActorComponent* STATIC_GetFocusedInteractiveActorComponent(class UObject* WorldContextObject);
	TEnumAsByte<EJackPlayerControlCharacter> STATIC_GetFieldPlayerCharacterType(class UObject* WorldContextObject);
	struct FName STATIC_GetFieldActionMessageTextId(class UObject* WorldContextObject, const struct FName& ActionID, EJackActionFieldTextType Timing);
	float STATIC_GetFadeTime(class UObject* WorldContextObject, TEnumAsByte<EJackFadeTime> FadeTimeType);
	struct FLinearColor STATIC_GetFadeColor(class UObject* WorldContextObject, TEnumAsByte<EJackFadeColor> FadeColorType);
	class UJackFacilityManager* STATIC_GetFacilityManager(class UObject* WorldContextObject);
	struct FName STATIC_GetEventBattleMonsterId(class UObject* WorldContextObject, const struct FName& EventBattleID, int MonsterIndex);
	struct FString STATIC_GetEventBattleMonsterDisplayName(class UObject* WorldContextObject, const struct FName& EventBattleID, int MonsterIndex);
	class AJackEventBattleManager* STATIC_GetEventBattleManager(class UObject* WorldContextObject);
	int STATIC_GetEnvironmentTextureGroups();
	int STATIC_GetEffectTextureGroups();
	class AJackEffectManager* STATIC_GetEffectManager(class UObject* WorldContextObject);
	TEnumAsByte<EJackEdition> STATIC_GetEditionType();
	class UJackDispersionManager* STATIC_GetDispersionManager(class UObject* WorldContextObject);
	class UObject* STATIC_GetDefaultObject(class UClass* ObjectClass);
	float STATIC_GetDefaultFPS();
	float STATIC_GetDefaultDeltaTime();
	struct FVector STATIC_GetDebugMenuVector(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	struct FRotator STATIC_GetDebugMenuRotator(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	struct FLinearColor STATIC_GetDebugMenuLinearColor(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	class UJackDebugMenuVariableMenu* STATIC_GetDebugMenuItemByPath(class UObject* WorldContextObject, const struct FString& MenuPath);
	int STATIC_GetDebugMenuInt(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	float STATIC_GetDebugMenuFloat(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	struct FString STATIC_GetDebugMenuCursorLocation(class UObject* WorldContextObject);
	unsigned char STATIC_GetDebugMenuByte(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	bool STATIC_GetDebugMenuBool(class UObject* WorldContextObject, const struct FString& Name, const struct FString& SubMenuName);
	class AJackCutSceneController* STATIC_GetCutSceneController(class UObject* WorldContextObject);
	class USoundBase* STATIC_GetCurrentBGMAsset(class UObject* WorldContextObject);
	struct FName STATIC_GetCorrectedTokugiID(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InTokugi);
	TEnumAsByte<EJackCharacter> STATIC_GetControlledCharacterType(class UObject* WorldContextObject);
	class UJackCommandDispatcher* STATIC_GetCommandDispatcher(class UObject* WorldContextObject);
	class UJackCoinManager* STATIC_GetCoinManager(class UObject* WorldContextObject);
	struct FVector STATIC_GetClosestSplinePoint(class USplineComponent* InSplineComponent, const struct FVector& InWorldLocation, float* OutClosestTime);
	class AJackCharacter* STATIC_GetClosestMonsterToCharacter(class AJackCharacter* Character, bool bDropZ, bool bIgnoreDeath, float* OutDistance);
	struct FString STATIC_GetClassName();
	struct FName STATIC_GetClassFName();
	void STATIC_GetClassAssetIDFromName(const struct FString& ClassName);
	void STATIC_GetClassAssetIDFromFName(const struct FName& ClassName);
	void STATIC_GetClassAssetIDFromClass(class UClass* Class);
	int STATIC_GetCinematicTextureGroups();
	class UStaticMeshComponent* STATIC_GetCharacterWeaponMeshComponent(class UObject* WorldContextObject, class AActor* Character, TEnumAsByte<EJackEquippedHand> Type);
	class UStaticMeshComponent* STATIC_GetCharacterWeaponAccessaryMeshComponent(class UObject* WorldContextObject, class AActor* Character, TEnumAsByte<EJackEquippedHand> Type);
	int STATIC_GetCharacterTextureGroups();
	TArray<class AJackCharacter*> STATIC_GetCharacters(class UObject* WorldContextObject);
	class AJackCharacterCaptureCamera* STATIC_GetCharacterCaptureCamera(class UObject* WorldContextObject);
	bool STATIC_GetCameraFadeInfo(class UObject* WorldContextObject, TEnumAsByte<EJackCameraFadeCategory> Category, TEnumAsByte<EJackCameraFadeZLayer>* OutFadeLayer, struct FLinearColor* OutFadeColor, float* OutFadeAlpha);
	struct FBoneReference STATIC_GetBoneReferenceByName(const struct FName& BoneName, class UAnimInstance* AnimInstance);
	struct FBoneReference STATIC_GetBoneReference(int BoneIndex);
	struct FName STATIC_GetBlueprintName(class UObject* WorldContextObject);
	struct FName STATIC_GetBGMIDFromMapID(const struct FName& MapId);
	struct FName STATIC_GetBGMIDFromCSID(const struct FName& CSID);
	bool STATIC_GetBGMFromBGMID(const struct FName& BGMID, bool bNightTime, TEnumAsByte<EJackBGMControl>* OutBGMControl);
	void STATIC_GetBGMAssetNameFromBGMID(const struct FName& BGMID, bool bNightTime, bool IsOrchestra, bool IsDQ8);
	class AJackBattleManager* STATIC_GetBattleManager(class UObject* WorldContextObject);
	class AJackBattlePlayerController* STATIC_GetBattleController(class UObject* WorldContextObject);
	class UJackBattleCharacterManager* STATIC_GetBattleCharacterManager(class UObject* WorldContextObject);
	struct FString STATIC_GetAssetName();
	void STATIC_GetAssetIDFromObject(class UObject* Object);
	void STATIC_GetAssetIDFromName(const struct FString& AssetName);
	void STATIC_GetAssetIDFromFName(const struct FName& AssetName);
	struct FName STATIC_GetAssetFName();
	struct FString STATIC_GetAsciiDecText(int Val, int Digit, bool bZeroAlign, bool bInsertComma);
	float STATIC_GetAnimSequenceLength(class UAnimSequenceBase* InAnimSequenceBase);
	class UAnimMontage* STATIC_GetAnimMontageHasName(class AJackCharacter* Character, class UAnimMontage* InMontage, const struct FName& MontageName, bool bIsNullCheckInMontage);
	TArray<class UAnimMontage*> STATIC_GetAnimMontageArratsHasNames(class AJackCharacter* Character, TArray<class UAnimMontage*> InMontageArray, TArray<struct FName> MontageNameArray, bool bIsEmptyCheckInMontageArray);
	struct FVector STATIC_GetAlongFloorCharacter(class AJackCharacter* Character, const struct FVector& ArrangeCenter, float ArrangeHalfLength, bool bSweepOnlyUnder, bool bIgnoreCheckToNormal);
	struct FVector STATIC_GetAlongFloor(class UPrimitiveComponent* PrimCompo, const struct FVector& ArrangeCenter, float ArrangeHalfLength, bool bSweepOnlyUnder, bool bIgnoreCheckToNormal);
	int STATIC_GetAllTextureGroups();
	TArray<class AActor*> STATIC_GetActorsByTags(class UObject* WorldContextObject, TArray<struct FName> TargetTags, bool* bSuccess);
	TArray<class AActor*> STATIC_GetActorsByTag(class UObject* WorldContextObject, const struct FName& TargetTag, bool* bSuccess);
	class ULevel* STATIC_GetActorLevel(class AActor* Actor);
	void STATIC_GetActorEyesViewPoint(class AActor* Actor, struct FVector* OutLocation, struct FRotator* OutRotation);
	class AJackActionManager* STATIC_GetActionManager(class UObject* WorldContextObject);
	class UJackActionDatabase* STATIC_GetActionDatabase(class UObject* WorldContextObject);
	class UJackAchievementManager* STATIC_GetAchievementManager(class UObject* WorldContextObject);
	struct FString STATIC_Get2ByteDecText(int Val, int Digit, bool bZeroAlign, bool bInsertComma);
	void STATIC_FriendLeave(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType, bool bKeepItems);
	void STATIC_FriendJoin(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InType);
	void STATIC_ForceSetTextureCinematicMipLevel(class UTexture* Texture, TEnumAsByte<ETextureGroup> CinematicTextureGroup, bool bForceCinematicMipLevelsToBeResident);
	void STATIC_ForceSetMaterialCinematicMipLevel(class UMaterialInterface* Material, TEnumAsByte<ETextureGroup> CinematicTextureGroup, bool bForceCinematicMipLevelsToBeResident);
	void STATIC_ForceSetActorCinematicMipLevel(class AActor* Actor, TEnumAsByte<ETextureGroup> CinematicTextureGroup, bool bForceCinematicMipLevelsToBeResident);
	void STATIC_ForceMultiSetTextureCinematicMipLevel(class UTexture* Texture, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups, bool bForceCinematicMipLevelsToBeResident);
	void STATIC_ForceMultiSetMaterialCinematicMipLevel(class UMaterialInterface* Material, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups, bool bForceCinematicMipLevelsToBeResident);
	void STATIC_ForceMultiSetActorCinematicMipLevel(class AActor* Actor, TArray<TEnumAsByte<ETextureGroup>> CinematicTextureGroups, bool bForceCinematicMipLevelsToBeResident);
	void STATIC_ForceGottenFromGettableObject(class UObject* WorldContextObject, const struct FName& GetFlag);
	void STATIC_FixupCharacterLooks(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	void STATIC_FixupAllCharactersLooks(class UObject* WorldContextObject);
	struct FVector STATIC_FindParameterVectorChecked(class UObject* WorldContextObject, const struct FName& InName);
	struct FVector STATIC_FindParameterVector(class UObject* WorldContextObject, const struct FName& InName);
	struct FName STATIC_FindParameterTextChecked(class UObject* WorldContextObject, const struct FName& InName);
	struct FName STATIC_FindParameterText(class UObject* WorldContextObject, const struct FName& InName);
	int STATIC_FindParameterIntChecked(class UObject* WorldContextObject, const struct FName& InName);
	int STATIC_FindParameterInt(class UObject* WorldContextObject, const struct FName& InName);
	float STATIC_FindParameterFloatChecked(class UObject* WorldContextObject, const struct FName& InName);
	float STATIC_FindParameterFloat(class UObject* WorldContextObject, const struct FName& InName);
	class UJackDebugLoggerComponent* STATIC_FindOrAddDebugLoggerComponents(class AActor* InOwner);
	TArray<class UJackGameCharacter*> STATIC_FindAllBattleMonsterGameCharacters(class UObject* WorldContextObject, const struct FName& MonsterID, bool bOnlyOperational, bool bOnlyMovementEnabled);
	void FadeOutAllSounds(class UObject* WorldContextObject, float FadeOutTime, bool bIgnoreBGM);
	void STATIC_EnhancingTokugiForAllPartyMember(class UObject* WorldContextObject, const struct FName& InTokugi, const struct FName& InEnhancedTokugi);
	void STATIC_EnhancingTokugi(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InTokugi, const struct FName& InEnhancedTokugi);
	void STATIC_EffectFieldBaseSuperTickNative(float DeltaTime, class UJackOverlappedActorComponent* InOverlappedActorComponent, class UClass* InEffect, class UParticleSystem* ParticleSystem, float InCallTimer, const struct FVector& InOffsetLocation, float SpawnEffectVelocity);
	void STATIC_EditorNotification(class UObject* WorldContextObject, const struct FText& Message, float ExpireDuration);
	void STATIC_DumpStatUnit(class UObject* WorldContextObject);
	class UJackUMGAccessorCommon* STATIC_DisplayTabiNoKokoroe(class UObject* WorldContextObject, const struct FJackLDT_UITabiNoKokoroe& Key);
	class UJackUMGSerifuWindowController* STATIC_DisplaySerifuWindowAtTextID(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	class UJackUMGSerifuWindowController* STATIC_DisplaySerifuWindowAtFixedMessage(class UObject* WorldContextObject, const struct FString& Message, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	class UJackUMGSerifuWindowController* STATIC_DisplayMovieMessageByTextID(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args);
	class UJackUMGSerifuWindowController* STATIC_DisplayFieldMessageAtTextID(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args);
	class UJackUMGSerifuWindowController* STATIC_DisplayBattleMessageAtTextID(class UObject* WorldContextObject, const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void STATIC_DetachPropFrom(class AActor* Actor, const struct FName& PropName);
	void STATIC_DestroyCharacterCaptureCamera(class UObject* WorldContextObject);
	void STATIC_DestroyAllVehicle(class UObject* WorldContextObject, bool bIgnoreNowRiding);
	void STATIC_DebugSpawnAllPartyCharacters(class UObject* WorldContextObject);
	class AJackCharacterCaptureCamera* STATIC_CreateCharacterCaptureCameraWith(class UObject* WorldContextObject, class UClass* CharacterCaptureCameraClass);
	class AJackCharacterCaptureCamera* STATIC_CreateCharacterCaptureCamera(class UObject* WorldContextObject);
	void STATIC_CopyBrushComponent(class UBrushComponent* BrushComponent0, class UBrushComponent* BrushComponent1);
	TArray<TEnumAsByte<ETextureGroup>> STATIC_ConvertTextureGroupValueToTextureGroupArray(int TextureGroups);
	int STATIC_ConvertTextureGroupToTextureGroupValue(TEnumAsByte<ETextureGroup> TextureGroup);
	int STATIC_ConvertTextureGroupArrayToTextureGroupValue(TArray<TEnumAsByte<ETextureGroup>> TextureGroupArray);
	TArray<struct FName> STATIC_ConvertStringArrayToNameArray(TArray<struct FString> StringArray);
	TArray<struct FString> STATIC_ConvertNameArrayToStringArray(TArray<struct FName> NameArray);
	void STATIC_ComponentOverlapActorsByChannel(class UPrimitiveComponent* PrimComp, TArray<TEnumAsByte<ECollisionChannel>> TraceChannel, class UClass* ClassFilter, TArray<class AActor*>* OutOverlaps);
	class UJackUMGSerifuWindowController* STATIC_CloseSerifuWindow(class UObject* WorldContextObject);
	class UJackUMGSerifuWindowController* STATIC_CloseMovieMessageWindow(class UObject* WorldContextObject);
	void STATIC_CloseFukidasi(class UObject* WorldContextObject, class AJackCharacter* Target);
	class UJackUMGSerifuWindowController* STATIC_CloseFieldMessageWindow(class UObject* WorldContextObject);
	class UJackUMGSerifuWindowController* STATIC_CloseBattleMessageWindow(class UObject* WorldContextObject);
	void STATIC_ClearRegistLoadFlagStore(class UObject* WorldContextObject, TEnumAsByte<EJackGameFlagCategory> Category);
	void STATIC_ClearPreloadMap(class UObject* WorldContextObject);
	void STATIC_ClearFontCache(class UObject* WorldContextObject);
	void STATIC_ClearAllRegistLoadFlagStore(class UObject* WorldContextObject);
	void STATIC_CheckToDisplayTabiNoKokoroe(class UObject* WorldContextObject, const struct FJackLDT_UITabiNoKokoroe& Key, bool bOnlyFlagSet, bool* bOutIsDisplayed, class UJackUMGAccessorCommon** OutAccessor);
	void STATIC_ChangeVisibleLevelsForEditor(class UObject* WorldContextObject, TArray<struct FString> VisibleLevels);
	void STATIC_ChangeCharacterItem(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType);
	bool STATIC_Change2DMode(class UObject* WorldContextObject, const struct FName& InModeChangeType);
	void STATIC_CategoryHidden(class UObject* WorldContextObject, TEnumAsByte<EJackCategoryHiddenType> InType, TEnumAsByte<EJackCategoryHiddenLayer> Layer, bool bInHidden);
	bool STATIC_CanPossessPlayerControl(class UObject* WorldContextObject, TEnumAsByte<EJackPlayerControlPossessor> Possessor);
	bool STATIC_CallFunction(class UObject* TargetObject, const struct FName& FunctionName);
	int STATIC_BitShiftRight(int Bit, int Shift);
	int STATIC_BitShiftLeft(int Bit, int Shift);
	EJackBGMVolumeResult STATIC_BGMVolumeEndOverlap(class UObject* WorldContextObject, const struct FName& VolumeID);
	void STATIC_BGMVolumeClearOverlap(class UObject* WorldContextObject);
	EJackBGMVolumeResult STATIC_BGMVolumeBeginOverlap(class UObject* WorldContextObject, const struct FName& VolumeID);
	bool STATIC_BGMChangeDisableEndOverlap(class UObject* WorldContextObject, const struct FName& InVolumeID);
	void STATIC_BGMChangeDisableClearOverlap(class UObject* WorldContextObject);
	bool STATIC_BGMChangeDisableBeginOverlap(class UObject* WorldContextObject, const struct FName& InVolumeID);
	void STATIC_AttachPropTo(class AActor* Actor, const struct FName& PropName);
	void STATIC_AsyncUMGMenuWidget(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool IsNewPage, bool IsFocus);
	void STATIC_AsyncLoadPartyMenmberResources(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void STATIC_AsyncLoadCharacterCoordinate(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EJackCharacter> InCharacterType);
	void STATIC_AsyncFixupCharacterLooks(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType, bool bBattleCharacterOnly);
	void STATIC_AsyncFixupAllCharactersLooks(class UObject* WorldContextObject);
	bool STATIC_ApplySplashMonsterFromVehicle(class AJackMonsterCharacter* Monster, class AJackVehicleMonster* PlayerVehicle, const struct FName& CollideEffectName, bool bIsAngry, bool bReserveBattle, float SplashWeight, bool bAnglyDamage, bool bIgnoreCheckFieldAttackSword);
	void STATIC_ApplyFriendCharacterPreset(class UObject* WorldContextObject, const struct FJackLDT_FriendCharacterPreset& Preset);
	void STATIC_AdjustNavigation(class UObject* Object, const struct FLatentActionInfo& LatentInfo, const struct FVector& LocationStart, const struct FVector& LocationEnd);
	class UJackUMGWidgetBase* STATIC_AddUMGRootWidget(class UObject* WorldContextObject, class UClass* WidgetType, const struct FJackUMGAnimSet& AnimSet, bool ToVisible);
	class UJackUMGWidgetBase* STATIC_AddUMGMenuWidget(class UObject* WorldContextObject, class UClass* WidgetType, bool IsNewPage, bool IsFocus);
	class ULevelStreamingKismet* STATIC_AddDynamicLevelToWorld(class UObject* WorldContextObject, const struct FString& PackageNameToLoad, bool bShouldBeLoaded, bool bShouldBeVisible, bool bShouldBlockOnLoad);
	class UJackDebugMenuVariableVector* STATIC_AddDebugMenuVector(class UObject* WorldContextObject, const struct FString& Name, float Step, float Min, float Max, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableRotator* STATIC_AddDebugMenuRotator(class UObject* WorldContextObject, const struct FString& Name, float Step, float Min, float Max, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableLinearColor* STATIC_AddDebugMenuLinearColor(class UObject* WorldContextObject, const struct FString& Name, float Step, float Min, float Max, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableMenu* STATIC_AddDebugMenuItem(class UObject* WorldContextObject, const struct FString& MenuName, EJackDebugMenuCategory DebugMenuCategory, const struct FString& MenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableInt* STATIC_AddDebugMenuInt(class UObject* WorldContextObject, const struct FString& Name, int Step, int Min, int Max, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableFloat* STATIC_AddDebugMenuFloat(class UObject* WorldContextObject, const struct FString& Name, float Step, float Min, float Max, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableCommand* STATIC_AddDebugMenuCommand(class UObject* WorldContextObject, const struct FString& Command, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableByte* STATIC_AddDebugMenuByte(class UObject* WorldContextObject, const struct FString& Name, unsigned char Step, unsigned char Min, unsigned char Max, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	class UJackDebugMenuVariableBool* STATIC_AddDebugMenuBool(class UObject* WorldContextObject, const struct FString& Name, const struct FString& MenuTooltip, const struct FString& SubMenuName, const struct FString& SubMenuTooltip, class UJackDebugMenuVariableMenu* ParentMenu);
	void STATIC_AddCategoryHiddenExclusionTag(class UObject* WorldContextObject, const struct FName& InTag);
	void STATIC_AddBlendable_PostProcess(class APostProcessVolume* ProcessVolume, const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	class UJackPlayerCameraComponent* STATIC_AddBlendable_PlayerCameraPostProcessSettings(class UObject* WorldContextObject, const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	void STATIC_AddBlendable_CameraPostProcessSettings(class UCameraComponent* CameraComputer, const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
	void STATIC_AddAcquiredActiveTokugi(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InTokugi);
	void STATIC_AddAcquiredActiveJumon(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InJumon);
};


// Class JackGame.JackGameSingleton
// 0x0000 (0x0038 - 0x0038)
class UJackGameSingleton : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameSingleton");
		return ptr;
	}

};


// Class JackGame.JackGameState
// 0x0000 (0x03F8 - 0x03F8)
class AJackGameState : public AGameState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameState");
		return ptr;
	}

};


// Class JackGame.JackGameUserSettings
// 0x00A0 (0x01B8 - 0x0118)
class UJackGameUserSettings : public UGameUserSettings
{
public:
	bool                                               bInversedVerticalCameraControl;                           // 0x0118(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bInversedHorizontalCameraControl;                         // 0x0119(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoFollowCamera;                                        // 0x011A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bMuteAudio;                                               // 0x011B(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LeftStickInputMin;                                        // 0x011C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LeftStickInputMax;                                        // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RightStickInputMin;                                       // 0x0124(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RightStickInputMax;                                       // 0x0128(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ScreenPercentage;                                         // 0x012C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PostProcessAAQuality;                                     // 0x0130(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PostProcessQuality;                                       // 0x0134(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ShadowQuality;                                            // 0x0138(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDecideButtonIsRightSide;                                 // 0x013C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	int                                                UserSelectedKeyboardType;                                 // 0x0140(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                KeyConfigVersion;                                         // 0x0144(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	struct FString                                     KeyConfigNumber;                                          // 0x0148(0x0010) (ZeroConstructor, Config)
	bool                                               bInitGraphicsOption;                                      // 0x0158(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                DisplayGamma;                                             // 0x015C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                BgmVolume;                                                // 0x0160(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                SeVolume;                                                 // 0x0164(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                VoiceVolume;                                              // 0x0168(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x44];                                      // 0x016C(0x0044) MISSED OFFSET
	bool                                               bInversedVerticalDebugCameraControl;                      // 0x01B0(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bInversedHorizontalDebugCameraControl;                    // 0x01B1(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x01B2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameUserSettings");
		return ptr;
	}

};


// Class JackGame.JackGameViewportClient
// 0x00D0 (0x06F0 - 0x0620)
class UJackGameViewportClient : public UGameViewportClient
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0620(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGameViewportClient");
		return ptr;
	}

};


// Class JackGame.JackGarbageCollectionManager
// 0x0038 (0x0070 - 0x0038)
class UJackGarbageCollectionManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0038(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGarbageCollectionManager");
		return ptr;
	}

};


// Class JackGame.JackLocator
// 0x0008 (0x03A0 - 0x0398)
class AJackLocator : public AActor
{
public:
	int                                                LocatorSortPriority;                                      // 0x0398(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLocator");
		return ptr;
	}

};


// Class JackGame.JackGoalMarker
// 0x0008 (0x03A8 - 0x03A0)
class AJackGoalMarker : public AJackLocator
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A0(0x0004) MISSED OFFSET
	float                                              Radius;                                                   // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGoalMarker");
		return ptr;
	}


	float GetRadius();
};


// Class JackGame.JackGroundAffectComponent
// 0x0000 (0x02E0 - 0x02E0)
class UJackGroundAffectComponent : public USceneComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGroundAffectComponent");
		return ptr;
	}

};


// Class JackGame.JackGuestNpcGameCharacter
// 0x0020 (0x06F0 - 0x06D0)
class UJackGuestNpcGameCharacter : public UJackFriendGameCharacter
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x06D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGuestNpcGameCharacter");
		return ptr;
	}

};


// Class JackGame.JackInteractiveActor
// 0x0028 (0x03C0 - 0x0398)
class AJackInteractiveActor : public AActor
{
public:
	bool                                               bNPCReaction;                                             // 0x0398(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	bool                                               bNPCAfterMove;                                            // 0x0399(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x039A(0x0002) MISSED OFFSET
	struct FVector                                     NPCAfterMoveLocation;                                     // 0x039C(0x000C) (Edit, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              NPCAfterMoveSpeed;                                        // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReceiveMessage;                                         // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInteractiveActor");
		return ptr;
	}


	void RemoveInteractiveActor(class AActor* InActor, class UJackInteractiveActorComponent* InInteractiveActorComponent);
	void ReceiveMessageDelegate__DelegateSignature(const struct FString& Message, class AActor* Sender);
	bool OnInteract(class AActor* InActor);
	bool OnEndInteract(class AActor* InActor);
	bool CanInteract();
	void AddInteractiveActor(class AActor* InActor, class UJackInteractiveActorComponent* InInteractiveActorComponent);
};


// Class JackGame.JackHaul
// 0x0000 (0x03C0 - 0x03C0)
class AJackHaul : public AJackInteractiveActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackHaul");
		return ptr;
	}

};


// Class JackGame.JackHighQualityTextureTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackHighQualityTextureTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackHighQualityTextureTrack");
		return ptr;
	}

};


// Class JackGame.JackHighQualityTextureTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackHighQualityTextureTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackHighQualityTextureTrackInst");
		return ptr;
	}

};


// Class JackGame.JackHitStop
// 0x0098 (0x00D0 - 0x0038)
class UJackHitStop : public UObject
{
public:
	TEnumAsByte<EJackWorldTimeDilation>                WorldTimeDilationType;                                    // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FJackHitStopData                            HitStopDatas[0x8];                                        // 0x0040(0x0010) (Edit, IsPlainOldData)
	EJackHitStopType                                   PlayingHitStopType;                                       // 0x00C0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              PlayingTime;                                              // 0x00C4(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	float                                              CurveMaxTime;                                             // 0x00C8(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackHitStop");
		return ptr;
	}

};


// Class JackGame.JackHorseCharacter
// 0x0000 (0x1440 - 0x1440)
class AJackHorseCharacter : public AJackPlayableCharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackHorseCharacter");
		return ptr;
	}

};


// Class JackGame.JackHUD
// 0x01F0 (0x0670 - 0x0480)
class AJackHUD : public AHUD
{
public:
	bool                                               bIsTitleMode;                                             // 0x0480(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIs2DMode;                                                // 0x0481(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x26];                                      // 0x0482(0x0026) MISSED OFFSET
	class UClass*                                      UIInputSettingsClass;                                     // 0x04A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UJackUIInputSettings*                        UIInputSettings;                                          // 0x04B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptDelegate                             LeftAxisDelegate;                                         // 0x04B8(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             RightAxisDelegate;                                        // 0x04C8(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             RightAxisWithButtonDelegate;                              // 0x04D8(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0xE8];                                      // 0x04E8(0x00E8) MISSED OFFSET
	class UJackUIInputManager*                         InputManager;                                             // 0x05D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x05D8(0x0030) MISSED OFFSET
	class UClass*                                      UMGManagerClass;                                          // 0x0608(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UJackUMGManager*                             UMGManager;                                               // 0x0610(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x0618(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDrawHUD;                                                // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0660(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackHUD");
		return ptr;
	}


	void UnbindRightAxisWithButton();
	void UnbindRightAxis();
	void UnbindR3Button();
	void UnbindLeftAxisToButton();
	void UnbindLeftAxis();
	void UnbindL3R3Button();
	void UnbindL3Button();
	void TokugiForceActive(bool IsActive);
	void SpawnPopupBalloon(const struct FVector& InWorldLocation, TEnumAsByte<EJackPopupBalloon> InPopupBalloon, int InNumber, class UJackGameCharacter* InGameCharacter, class USkeletalMeshComponent* InLocalMesh, const struct FName& InSocketName);
	void ShowRestartLocationWindow(const struct FName& InModeName);
	void ShowDebugKeyStatus();
	void SetUpdateInvalidationBox(bool bIsUpdate);
	void SetUIStickToButtonThreshold(float InThreshold);
	void SetUIStickToButtonAngle(float InAngle);
	void SetUIPlatformType(EJackUIPlatformType InUIPlatformType);
	void SetUIListDebug(bool bIsDebug);
	void SetUIGetListOptimize(bool bIsOptimize);
	void SetUIDepthMask(bool bEnabled, float Width, float Height);
	void SetUIASyncLoadMenuDebug();
	void SetMapZoomMapScrollVelocityScale(float InVelocityScale);
	void SetMapScrollAdjustByFrameRate(bool IsAdjust);
	void SetLeftAxisToButtonDisable(bool bInDisable);
	void SetLeftAxisStickMode(EJackUIStickMode InStickMode);
	void SetExternalLeftAxisYToButton(float InLeftAxisY);
	void SetExternalLeftAxisXToButton(float InLeftAxisX);
	void SetEnableExternalLeftAxisToButton(bool bIsEnable);
	void SetCacheInvalidationBox(bool bIsCache);
	void SetBattleTopMenuOpenFlag(bool InFlag);
	void RuraShowAll();
	void RestoreLeftStickToButtonBindState(const struct FJackUIStickToButtonBindState& InStickToButtonState, bool bIsUnbind);
	void OutputWidgetLoadTimeLog();
	void OnEndPreloadMap();
	void OnDontRunWhileLoadingChanged(bool bDisable);
	void OnBeginPreloadMap();
	void MenuForceClose();
	void JackHudInputAxisDelegate__DelegateSignature(const struct FVector2D& InVector2D);
	bool IsUpdateInvalidationBox();
	bool IsUIGetListOptimize();
	bool IsEnterButtonReverse();
	bool IsEnabledUIDepthMask();
	bool IsCacheInvalidationBox();
	bool IsASyncLoadMenuDebug();
	class UJackUMGManager* GetUMGManager();
	EJackUIPlatformType GetUIPlatformType();
	struct FVector2D GetRightStick();
	struct FVector2D GetLeftStick();
	class UJackUIInputManager* GetInputManager();
	void ForceUIMapVisit(bool bIsForceMapVisit);
	void EnterKeyReverse();
	void DisplayUIStickToButtonInfo();
	void DisplayUIEventLog(bool IsShow);
	void ClearKeyStatus();
	void BindRightAxisWithButton(const struct FScriptDelegate& InDelegate);
	void BindRightAxis(const struct FScriptDelegate& InDelegate);
	void BindR3Button();
	void BindLeftAxisToButton();
	void BindLeftAxis(const struct FScriptDelegate& InDelegate);
	void BindL3R3Button();
	void BindL3Button();
	bool AllocLeftStickToButtonBindState(bool bIsNoBind, struct FJackUIStickToButtonBindState* OutStickToButtonState);
};


// Class JackGame.JackImeManager
// 0x0008 (0x0040 - 0x0038)
class UJackImeManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackImeManager");
		return ptr;
	}


	void OpenNameEntry(struct FString* EntryStr);
	bool IsOpenDialog();
	struct FString GetEntryString();
};


// Class JackGame.JackInstallManager
// 0x0108 (0x0140 - 0x0038)
class UJackInstallManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x108];                                     // 0x0038(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInstallManager");
		return ptr;
	}

};


// Class JackGame.JackInteractiveActorComponent
// 0x02B0 (0x0590 - 0x02E0)
class UJackInteractiveActorComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x02E0(0x0050) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInteract;                                               // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndInteract;                                            // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPropertyChanged;                                        // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bInteractionSoundDisable;                                 // 0x0360(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0361(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData02[0x18];                                      // 0x0361(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackInteractiveActorComponent.InteractionSound
	class USoundBase*                                  InteractionSoundConcrete;                                 // 0x0380(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bInteractionSound2D;                                      // 0x0388(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0389(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPressButton;                                            // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x03A0(0x0010) MISSED OFFSET
	bool                                               bInteractDisable;                                         // 0x03B0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bResponseDisable;                                         // 0x03B1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIgnoreTrace;                                             // 0x03B2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreOwnerWhenTrace;                                    // 0x03B3(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bPauseWithAllComponentsDefault;                           // 0x03B4(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x03B5(0x0001) MISSED OFFSET
	bool                                               bInteractDisableWhenInteractorBasedOnOwnerActor;          // 0x03B6(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x03B7(0x0001) MISSED OFFSET
	TArray<TEnumAsByte<EJackInteractor>>               AllowInteractorTypes;                                     // 0x03B8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<TEnumAsByte<EJackInteractor>>               DenyInteractorTypes;                                      // 0x03C8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	bool                                               bNPCReaction;                                             // 0x03D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bNPCAfterMove;                                            // 0x03D9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x03DA(0x0002) MISSED OFFSET
	struct FVector                                     NPCAfterMoveLocation;                                     // 0x03DC(0x000C) (BlueprintVisi, IsPlainOldData)
	float                                              NPCAfterMoveSpeed;                                        // 0x03E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SimpleCylinderRadius;                                     // 0x03EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimpleCylinderHalfHeight;                                 // 0x03F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x03F4(0x000C) MISSED OFFSET
	struct FName                                       DisplayUISocketName;                                      // 0x0400(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       DisplayUIFukidasiSocketName;                              // 0x0408(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       DisplayUINamePlateSocketName;                             // 0x0410(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       DisplayUIEmotionSocketName;                               // 0x0418(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       HiddenCheckSocketName;                                    // 0x0420(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HiddenCheckRadius;                                        // 0x0428(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UpdateUIDisplayLocationRadius;                            // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpdateUIDisplayLocationSpeed;                             // 0x0430(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     UIDisplayLocationOffsetInComponentSpace;                  // 0x0434(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x78];                                      // 0x0440(0x0078) MISSED OFFSET
	TEnumAsByte<EJackActionCursor>                     ActionCursorType;                                         // 0x04B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackActionGuide>                      ActionGuideType;                                          // 0x04B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bControlActionGuideVisibility;                            // 0x04BA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0xC5];                                      // 0x04BB(0x00C5) MISSED OFFSET
	class AVolume*                                     ActionGuideVolume;                                        // 0x0580(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bAllowUsingInpasu;                                        // 0x0588(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowUsingMovementRootMotion;                            // 0x0589(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData11[0x6];                                       // 0x058A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInteractiveActorComponent");
		return ptr;
	}


	void SetResponseDisable(bool bDisable);
	void SetPauseWithAllComponents(bool bPause);
	void SetInteractDisable(bool bDisable);
	void SetActionCursorVisibliltyWhileInteraction(bool bNewVisibility);
	bool IsInInteraction();
	bool IsAllowUsingInpasu();
	bool HasActionGuideVolume();
	class UJackInteractorComponent* GetInteractorComponent();
	bool EndInteract();
	void ComponentPropertyChangedSignature__DelegateSignature();
	void ComponentInteractSignature__DelegateSignature(class AActor* OtherActor);
	void ComponentInteractInputSignature__DelegateSignature(TEnumAsByte<EJackKeys> Key);
	void ComponentEndInteractSignature__DelegateSignature(class AActor* OtherActor);
	void CompleteInteraction();
	bool CanInteract();
	void ActionGuideVolume_OnEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void ActionGuideVolume_OnBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
};


// Class JackGame.JackInteractiveActorGroup
// 0x0020 (0x03B8 - 0x0398)
class AJackInteractiveActorGroup : public AActor
{
public:
	TArray<TWeakObjectPtr<class AActor>>               GroupedActors;                                            // 0x0398(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInteractiveActorGroup");
		return ptr;
	}

};


// Class JackGame.JackInteractiveActorManager
// 0x0028 (0x03C0 - 0x0398)
class AJackInteractiveActorManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0398(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInteractiveActorManager");
		return ptr;
	}

};


// Class JackGame.JackInteractorComponent
// 0x0060 (0x0200 - 0x01A0)
class UJackInteractorComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01A0(0x0028) MISSED OFFSET
	TArray<struct FJackInteractorRange>                AccessibleRanges;                                         // 0x01C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EJackInteractor>                       InteractorType;                                           // 0x01D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCanInteractInTheAir;                                     // 0x01D9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x01DA(0x0006) MISSED OFFSET
	struct FName                                       TraceStartBoneName;                                       // 0x01E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x01E8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInteractorComponent");
		return ptr;
	}


	void RemoveInteractiveActorComponent(class UJackInteractiveActorComponent* InInteractiveActorComponent);
	void OnInteractionCompleted__DelegateSignature(class UJackInteractorComponent* InInteractor, class UJackInteractiveActorComponent* InInteractiveActorComponent);
	bool IsInInteraction();
	TEnumAsByte<EJackInteractor> GetInteractorType();
	void AddInteractiveActorComponent(class UJackInteractiveActorComponent* InInteractiveActorComponent);
};


// Class JackGame.JackInterpTrackNameBase
// 0x0010 (0x00A0 - 0x0090)
class UJackInterpTrackNameBase : public UInterpTrack
{
public:
	TArray<struct FJackNameTrackKey>                   NameTrack;                                                // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInterpTrackNameBase");
		return ptr;
	}

};


// Class JackGame.JackInterruptFootIKEnableTrack
// 0x0010 (0x00B8 - 0x00A8)
class UJackInterruptFootIKEnableTrack : public UJackToggleBaseTrack
{
public:
	TArray<struct FName>                               TargetSocketNameList;                                     // 0x00A8(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInterruptFootIKEnableTrack");
		return ptr;
	}

};


// Class JackGame.JackInterruptFootIKEnableTrackInst
// 0x0010 (0x0050 - 0x0040)
class UJackInterruptFootIKEnableTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackInterruptFootIKEnableTrackInst");
		return ptr;
	}

};


// Class JackGame.JackItemGettableObjectBase
// 0x0020 (0x03B8 - 0x0398)
class AJackItemGettableObjectBase : public AActor
{
public:
	struct FName                                       RefreshEventName;                                         // 0x0398(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnReceiveMessage;                                         // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bEnabledDisplayDebugInfo;                                 // 0x03B0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackItemGettableObjectBase");
		return ptr;
	}


	void ReceiveMessageDelegate__DelegateSignature(const struct FString& Message, class AActor* Sender);
	struct FString OnGenerateDebugInfoString();
};


// Class JackGame.JackItemManager
// 0x0920 (0x0958 - 0x0038)
class UJackItemManager : public UObject
{
public:
	class UDataTable*                                  ItemDataTable;                                            // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ItemEquipmentDataTable;                                   // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ItemInnerCountMax_Common;                                 // 0x0048(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ItemInnerCountMax_Equipment;                              // 0x004C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ItemInnerCountMax_Character;                              // 0x0050(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ItemFrameCountMax_Character;                              // 0x0054(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ItemInnerCountMax_Exchange_Default;                       // 0x0058(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                YuukyuuNoKinkoMax;                                        // 0x005C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackItemGetLinkFlag>                ItemGetLinkFlag;                                          // 0x0060(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackItemInnerCountMax>              ItemInnerCountMax_Exchange_Individual;                    // 0x0070(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       ChangeEquipmentPossibleFlag_P004;                         // 0x0080(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MessageConjunctionWordID;                                 // 0x0088(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MessageSpaceWordID;                                       // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MessageRareWordID;                                        // 0x0098(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MessageStoreHandWordID;                                   // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MessageStoreCommonBagWordID;                              // 0x00A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MessageStoreEquipmentBagWordID;                           // 0x00B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               DeleteItemWhenBackToThePast;                              // 0x00B8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<TEnumAsByte<EJackItem_Classification>, class UTexture2D*> ClassificationStandardIconList;                           // 0x00C8(0x0050) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnSetYuukyuuNoKinko;                                      // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x830];                                     // 0x0128(0x0830) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackItemManager");
		return ptr;
	}


	int UseSeed(TEnumAsByte<EJackCharacter> CharacterType, const struct FName& ItemID);
	int StoreItem(const struct FName& ItemID, int ItemCount, bool bAcceptOverflow, TEnumAsByte<EJackItem_Bag>* OutStoreBag);
	void SetYuukyuuNoKinko(const struct FName& KinkoID, const struct FName& ItemID);
	void SetItemConsumeInCustomEvent(bool bFlag);
	void SetForceHideBag(bool bFlag);
	void PlayGetSE(const struct FName& ItemID, const struct FName& SEID);
	void OnSetYuukyuuNoKinko__DelegateSignature();
	struct FName MakeItemGetMessageTextID(const struct FName& ItemID, const struct FString& Prefix);
	TArray<struct FJackMessageArgumentData> MakeItemGetMessageTag(const struct FName& ItemID, int ItemCount, TEnumAsByte<EJackItem_Bag> BagType, const struct FString& ItemNameTagString, const struct FString& ItemCountTagString, const struct FString& ItemUnitNameTagString, const struct FString& ConjunctionTagString, const struct FString& SpaceTagString, const struct FString& HalfSpaceTagString, const struct FString& CharacterTagString, const struct FString& StoreTargetTagString, const struct FString& RareTagString);
	TArray<struct FJackMessageArgumentData> MakeGoldGetMessageTag(int GoldCount, const struct FString& GoldCountTagString);
	bool IsForceHideBag();
	bool IsExistItem(const struct FName& ItemID);
	bool IsAcquisitionByClassification(TEnumAsByte<EJackItem_Classification> Classification);
	struct FName GetYuukyuuNoKinko(const struct FName& KinkoID);
	struct FName GetUnitNameId(const struct FName& ItemID);
	struct FString GetUnitName(const struct FName& ItemID);
	int GetTotalAcquisitionItemCount(const struct FName& ItemID);
	struct FName GetStorageWordId(TEnumAsByte<EJackItem_Bag> BagType);
	struct FString GetStorageWord(TEnumAsByte<EJackItem_Bag> BagType);
	struct FString GetSpecificAbilityDescription(const struct FName& ItemID);
	struct FName GetSpaceWordId();
	struct FString GetSpaceWord();
	int GetRarity(const struct FName& ItemID);
	struct FName GetRareWordId();
	struct FString GetRareWord();
	int GetPrice_Selling(const struct FName& ItemID);
	int GetPrice_Buying(const struct FName& ItemID);
	int GetPossessionItemCount(const struct FName& ItemID);
	TArray<struct FName> GetPictorialBookItems(int PictorialBookNo);
	struct FString GetItemName(const struct FName& ItemID, bool ListFlag);
	int GetItemGettableCountInBag(TEnumAsByte<EJackItem_Bag> BagType, const struct FName& ItemID);
	int GetItemGettableCount(const struct FName& ItemID);
	int GetItemCountInBag(TEnumAsByte<EJackItem_Bag> BagType, const struct FName& ItemID);
	int GetItemCount(const struct FName& ItemID);
	int GetItemClassificationMax(TEnumAsByte<EJackItem_Classification> Classification);
	TEnumAsByte<EJackItemGetIcon> GetGetIconType(const struct FName& ItemID);
	struct FString GetDescription(const struct FName& ItemID);
	struct FName GetConjunctionWordId();
	struct FString GetConjunctionWord();
	class UTexture2D* GetClassificationStandardIcon(TEnumAsByte<EJackItem_Classification> Classification);
	TEnumAsByte<EJackItem_Classification> GetClassification(const struct FName& ItemID);
	TArray<struct FName> GetAcquisitionItemList();
	struct FString GetAcquirerWord(TEnumAsByte<EJackItem_Bag> BagType);
	class UJackFriendGameCharacter* GetAcquirer(TEnumAsByte<EJackItem_Bag> BagType);
	int DiscardItem(TEnumAsByte<EJackItem_Bag> BagType, const struct FName& ItemID, int ItemCount, bool bIgnoreEquippedItem);
	bool CorrectItemGetMessageType(const struct FName& ItemID, bool bSimpleText);
	bool AutoEquipmentDetach(TEnumAsByte<EJackCharacter> CharacterType, const struct FName& ItemID);
	bool AutoEquipmentAttach(TEnumAsByte<EJackCharacter> CharacterType, TEnumAsByte<EJackEquipmentRegion> RegionType, const struct FName& ItemID);
};


// Class JackGame.JackItemPresentManager
// 0x0120 (0x0170 - 0x0050)
class UJackItemPresentManager : public UJackTickableGameObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVestedFlagDelegate;                                     // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0068(0x0050) MISSED OFFSET
	TArray<class UDataTable*>                          DLCDataTables;                                            // 0x00B8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0xA8];                                      // 0x00C8(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackItemPresentManager");
		return ptr;
	}


	void ReceiveItemPresent(const struct FName& DlcId);
	void OnVestedFlagDelegate__DelegateSignature();
	void OnVestedFlag(const struct FName& DlcId);
	bool IsVestedFlag(const struct FName& DlcId);
	bool IsCheckDlcDataUpdateEnd();
	TArray<struct FJackItemPresentTitle> GetItemPresentTitleList();
	bool GetItemPresentPackage(const struct FName& DlcId, struct FJackItemPresentPackage* OutPackage);
	void DlcDataUpdateStart();
	bool CheckExcessItem(const struct FJackItemPresentPackage& InPackage);
};


// Class JackGame.JackJumpLabelTrack
// 0x0000 (0x00A0 - 0x00A0)
class UJackJumpLabelTrack : public UJackInterpTrackNameBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackJumpLabelTrack");
		return ptr;
	}

};


// Class JackGame.JackJumpLabelTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackJumpLabelTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackJumpLabelTrackInst");
		return ptr;
	}

};


// Class JackGame.JackPlayerCameraData
// 0x0318 (0x0358 - 0x0040)
class UJackPlayerCameraData : public UJackCameraData
{
public:
	float                                              RotationRateByPlayerMovement;                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotationSpeedByPlayerMovement;                            // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRotationRemainingMode;                                 // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCameraYawRotationEnabledByActorMovement;                 // 0x0049(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCameraPitchRotationEnabledByActorMovement;               // 0x004A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCameraPitchRotationEnabledOnlyNoInputXY;                 // 0x004B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FollowCharacter_DiableAngle;                              // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFollowCharacter_DisablePitch;                            // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              CenteredMaxPitch;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenteredMinPitch;                                         // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenteringMaxPitch;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenteringMinPitch;                                        // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenteringRotMoveRate;                                     // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCenteringRotFixMode;                                     // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              CenteringRotMoveRateFixMode;                              // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenteringRotMoveRateFixMaxSpeed;                          // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCenteredMaxPitch;                                     // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCenteredMinPitch;                                     // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCenteringMaxPitch;                                    // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCenteringMinPitch;                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCenteringRotMoveRate;                                 // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bZoomCenteringRotFixMode;                                 // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              ZoomCenteringRotMoveRateFixMode;                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCenteringRotMoveRateFixMaxSpeed;                      // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bTraceCollision;                                          // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	float                                              CameraCollisionRadius;                                    // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraVisibleCollisionRadius;                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CameraCollisionChannel;                                   // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBlindAvoidanceTraceCollisionUpDown;                      // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBlindAvoidanceTraceCollisionLeftRight;                   // 0x00A2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x00A3(0x0001) MISSED OFFSET
	float                                              BlindAvoidance_CheckGroundRayZOffset;                     // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlindAvoidance_CheckCeilingRayZOffset;                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlindAvoidance_CheckWallRayYawAngle;                      // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlindAvoidance_RotationAngle;                             // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              BlindAvoidance_RotationSpeed;                             // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForceAvoidancePitchRotationCheckLength;                   // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bArmLengthHitCheckLast;                                   // 0x00BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bArmLengthCreatePrevCameraLength;                         // 0x00BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x00BE(0x0002) MISSED OFFSET
	float                                              DistanceMin;                                              // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceMax;                                              // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraLocationLerpSpeed;                                  // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraDistanceMinInterpSpeed;                             // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraDistanceMaxInterpSpeed;                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraDistanceHitCollideInterpSpeed;                      // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ArmLength_LengthenSpeedInPitchOver;                       // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ArmLength_ShortenSpeedInPitchOver;                        // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffCharaMoveRotationCameraLookAtDistance;                 // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ContinusContactCollisionAddArmLength;                     // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckOffInnerArmLength;                                   // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ViewRotationMin;                                          // 0x00EC(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    ViewRotationMax;                                          // 0x00F8(0x000C) (Edit, IsPlainOldData)
	bool                                               bPawnPitchRollForceZero;                                  // 0x0104(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	struct FVector                                     TargetOffsetInBlinding;                                   // 0x0108(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     TargetOffsetInIdling;                                     // 0x0114(0x000C) (Edit, IsPlainOldData)
	bool                                               bZLerpSpringDamper;                                       // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bZNoLerp;                                                 // 0x0121(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0122(0x0002) MISSED OFFSET
	float                                              InterpTargetLocation_SpeedXY;                             // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_Speed;                               // 0x0128(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_MinLimitZ;                           // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_MaxLimitZ;                           // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LookAtInterpDistanceMax;                                  // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPlayerControllCameraRotationDirectSetInZoomMode;         // 0x0138(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	float                                              AddPitchInputSpeedVerySlow;                               // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedVerySlow2;                              // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedSlow;                                   // 0x0144(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedSlow2;                                  // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeed;                                       // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeed2;                                      // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedLittleFast;                             // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedLittleFast2;                            // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedFast;                                   // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputSpeedFast2;                                  // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateVerySlow;                        // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateVerySlow2;                       // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateSlow;                            // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateSlow2;                           // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRate;                                // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRate2;                               // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateLittleFast;                      // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateLittleFast2;                     // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateFast;                            // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddPitchInputMaxSpeedRateFast2;                           // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedVerySlow;                                 // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedVerySlow2;                                // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedSlow;                                     // 0x0194(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedSlow2;                                    // 0x0198(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeed;                                         // 0x019C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeed2;                                        // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedLittleFast;                               // 0x01A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedLittleFast2;                              // 0x01A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedFast;                                     // 0x01AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputSpeedFast2;                                    // 0x01B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateVerySlow;                          // 0x01B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateVerySlow2;                         // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateSlow;                              // 0x01BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateSlow2;                             // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRate;                                  // 0x01C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRate2;                                 // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateLittleFast;                        // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateLittleFast2;                       // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateFast;                              // 0x01D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddYawInputMaxSpeedRateFast2;                             // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementVerySlow;              // 0x01DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementVerySlow2;             // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementSlow;                  // 0x01E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementSlow2;                 // 0x01E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovement;                      // 0x01EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovement2;                     // 0x01F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementLittleFast;            // 0x01F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementLittleFast2;           // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementFast;                  // 0x01FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UptoChangeSpeedRateByPlayerMovementFast2;                 // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementVerySlow;            // 0x0204(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementVerySlow2;           // 0x0208(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementSlow;                // 0x020C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementSlow2;               // 0x0210(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovement;                    // 0x0214(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovement2;                   // 0x0218(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementLittleFast;          // 0x021C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementLittleFast2;         // 0x0220(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementFast;                // 0x0224(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DowntoChangeSpeedRateByPlayerMovementFast2;               // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementVerySlow;          // 0x022C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementVerySlow2;         // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementSlow;              // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementSlow2;             // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovement;                  // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovement2;                 // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementLittleFast;        // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementLittleFast2;       // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementFast;              // 0x024C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomUptoChangeSpeedRateByPlayerMovementFast2;             // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementVerySlow;        // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementVerySlow2;       // 0x0258(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementSlow;            // 0x025C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementSlow2;           // 0x0260(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovement;                // 0x0264(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovement2;               // 0x0268(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementLittleFast;      // 0x026C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementLittleFast2;     // 0x0270(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementFast;            // 0x0274(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDowntoChangeSpeedRateByPlayerMovementFast2;           // 0x0278(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InDoorOutDoorArmLengthLerpSec;                            // 0x027C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CameraResetPitch;                                         // 0x0280(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCameraResetPitch;                                     // 0x0284(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedVerySlow;                             // 0x0288(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedVerySlow2;                            // 0x028C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedSlow;                                 // 0x0290(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedSlow2;                                // 0x0294(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeed;                                     // 0x0298(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeed2;                                    // 0x029C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedLittleFast;                           // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedLittleFast2;                          // 0x02A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedFast;                                 // 0x02A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PhotoModeMoveYZSpeedFast2;                                // 0x02AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PhotoModeMaxLimitMove;                                    // 0x02B0(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     PhotoModeMinLimitMove;                                    // 0x02BC(0x000C) (Edit, IsPlainOldData)
	float                                              PhotoModeOffsetCollideInterpSpeed;                        // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bZoomModeEnable;                                          // 0x02CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x02CD(0x0003) MISSED OFFSET
	float                                              ZoomStartStopWaitSec;                                     // 0x02D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomSpeed;                                                // 0x02D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDistanceMin;                                          // 0x02D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomDistanceMax;                                          // 0x02DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ZoomTargetOffsetInBlinding;                               // 0x02E0(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     ZoomTargetOffsetInIdling;                                 // 0x02EC(0x000C) (Edit, IsPlainOldData)
	float                                              InterpTargetLocation_SpeedXYInZoom;                       // 0x02F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_SpeedInZoom;                         // 0x02FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_SpeedXYInZoomMoveStop;               // 0x0300(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_SpeedInZoomMoveStop;                 // 0x0304(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_SpeedXYInZoomMoveStopLagSec;         // 0x0308(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_InputZeroTorrance;                   // 0x030C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ZoomMinLookAtBound;                                       // 0x0310(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     ZoomMaxLookAtBound;                                       // 0x031C(0x000C) (Edit, IsPlainOldData)
	float                                              ZoomFieldOfView;                                          // 0x0328(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomRotationRateByPlayerMovement;                         // 0x032C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomRotationSpeedByPlayerMovement;                        // 0x0330(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomLookAtCollideCenterRateSpeed;                         // 0x0334(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InterpTargetLocation_SpeedXY_LookAtCollide;               // 0x0338(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCameraCollisionRadius;                                // 0x033C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCameraVisibleCollisionRadius;                         // 0x0340(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ZoomCameraViewPointInnerLength;                           // 0x0344(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ZoomCameraCollisionChannel;                               // 0x0348(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	float                                              ZoomContinusContactCollisionAddArmLength;                 // 0x034C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bZoomArmLengthHitCheckLast;                               // 0x0350(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x0351(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerCameraData");
		return ptr;
	}

};


// Class JackGame.JackJumpPlayerCameraData
// 0x0010 (0x0368 - 0x0358)
class UJackJumpPlayerCameraData : public UJackPlayerCameraData
{
public:
	float                                              FallingCameraAngleTargetPitch;                            // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallingCameraInterpSpeed;                                 // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallingEndCenterdPitch;                                   // 0x0360(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FallingEndInterpSpeed;                                    // 0x0364(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackJumpPlayerCameraData");
		return ptr;
	}

};


// Class JackGame.JackKiraManager
// 0x0010 (0x0048 - 0x0038)
class UJackKiraManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackKiraManager");
		return ptr;
	}


	int SaveRespawnBaseSeconds(const struct FName& SaveFlag);
	bool IsAlreadyGotten(const struct FName& SaveFlag);
	int GetRemainRespawnTime(const struct FName& SaveFlag, int CheckSeconds);
};


// Class JackGame.JackKnockBackComponent
// 0x0020 (0x01C0 - 0x01A0)
class UJackKnockBackComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x01A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackKnockBackComponent");
		return ptr;
	}

};


// Class JackGame.JackLastPositionInst
// 0x0008 (0x0040 - 0x0038)
class UJackLastPositionInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLastPositionInst");
		return ptr;
	}

};


// Class JackGame.JackLazyMessageManager
// 0x0018 (0x03B0 - 0x0398)
class AJackLazyMessageManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0398(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLazyMessageManager");
		return ptr;
	}


	class UJackUMGAccessorCommon* ViewTabiNoKokoroe(const struct FName& RowName);
	void SetViewEnd();
	void SetTokugiOkMessage(const struct FName& TextID, TArray<struct FJackMessageArgumentData> InArgs);
	void SetTabiNoKokoroe(const struct FName& KeyRowName);
	void SetQuestMessage(const struct FName& TextID, TArray<struct FJackMessageArgumentData> InArgs);
	void SetPossessControlGet();
	void SetPartyConditionOffMessage(const struct FName& TextID, TArray<struct FJackMessageArgumentData> InArgs);
	void SetOffTutorialMessage(bool bOn);
	void SetOffAchievementMessage(bool bOn);
	void SetMessage(TEnumAsByte<EJackLazyMessageQueueId> TypeId, const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args);
	void SetEmptyEnd();
	void OnViewTabiNoKokoroe(const struct FName& RowName);
	void OnViewStartMessage(const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args);
	void OnViewStartAchievement(const struct FName& AchieveId);
	void OnViewAllEnd();
	void OnTryPossessControll();
	void OnLazyMessageConditionChanged(bool bDisabled);
	bool IsTaughtTabiNoKokoroe(const struct FName& RowName);
	bool IsDrawingWait();
	bool IsDrawing();
	bool HasMessage();
	bool HasAchievement();
	void CallTryPossessControll();
};


// Class JackGame.JackLightIntensityTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackLightIntensityTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLightIntensityTrack");
		return ptr;
	}

};


// Class JackGame.JackLightIntensityTrackInst
// 0x0010 (0x0048 - 0x0038)
class UJackLightIntensityTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLightIntensityTrackInst");
		return ptr;
	}

};


// Class JackGame.JackLipSyncEnableTrack
// 0x0018 (0x00C0 - 0x00A8)
class UJackLipSyncEnableTrack : public UJackToggleBaseTrack
{
public:
	float                                              DefaultLipTime;                                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FJackLipSyncEnableTrackInfo>         InfoArray;                                                // 0x00B0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLipSyncEnableTrack");
		return ptr;
	}

};


// Class JackGame.JackLipSyncEnableTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackLipSyncEnableTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLipSyncEnableTrackInst");
		return ptr;
	}

};

// name is a guess
struct UJackLoadReductionComponentLOD
{
	float Distance;
	unsigned char Unk4; // checked by something
	unsigned char Unk5; // checked by something
	unsigned char Unk6;
	unsigned char Unk7;
};


// Class JackGame.JackLoadReductionComponent
// 0x0090 (0x0230 - 0x01A0)
class UJackLoadReductionComponent : public UJackCharacterComponent
{
public:
	TArray<class UActorComponent*>                     ControlComponents;                                        // 0x01A0(0x0010) (ExportObject, ZeroConstructor)
	TArray<class USkeletalMeshComponent*>              ControlSkeletalMeshComponents;                            // 0x01B0(0x0010) (ExportObject, ZeroConstructor)
	UJackLoadReductionComponentLOD                     Levels[8]; // level 5 is the one that chooses visibility?
	float																							 UnkFloat200;
	unsigned char                                      UnknownData00[0x20];                                      // 0x01C0(0x0064) MISSED OFFSET
	unsigned char																			 bDisabled; // set by DisableLoadReductionForNPC cmd
	unsigned char                                      bUnknown225;
	unsigned char                                      bUnknown226;
	bool                                               bReductionInCutScene;                                     // 0x0227(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0228(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLoadReductionComponent");
		return ptr;
	}

};


// Class JackGame.JackLoadReductionEnableTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackLoadReductionEnableTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLoadReductionEnableTrack");
		return ptr;
	}

};


// Class JackGame.JackLoadReductionEnableTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackLoadReductionEnableTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLoadReductionEnableTrackInst");
		return ptr;
	}

};


// Class JackGame.JackLocalizationManager
// 0x0068 (0x00A0 - 0x0038)
class UJackLocalizationManager : public UObject
{
public:
	TArray<struct FJackFontDict>                       FontList;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  LetterList;                                               // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  UserDefinedTagDataTable;                                  // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableUserDefinedTagValidation;                          // 0x0058(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bConvertsToFullWidthCharacter;                            // 0x0059(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsesNarrowSpaceInWordWrapping;                           // 0x005A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x005B(0x0005) MISSED OFFSET
	TArray<int>                                        NarrawSpaceCodeList;                                      // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bAdjustsWordWrappingWidth;                                // 0x0070(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              WordWrappingWidthAdjustmentOffset;                        // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WordWrappingWidthAdjustmentMaxCount;                      // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	class UDataTable*                                  OverrideTranslationTextDataTable;                         // 0x0080(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableOverrideTranslationText;                           // 0x0088(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	int                                                VoiceTagValidRangeMin_Jp;                                 // 0x008C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VoiceTagValidRangeMax_Jp;                                 // 0x0090(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VoiceTagInvalidRangeMin_En;                               // 0x0094(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                VoiceTagInvalidRangeMax_En;                               // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLocalizationManager");
		return ptr;
	}


	struct FString ReplaceToAlternativeCharacter(const struct FString& String);
};


// Class JackGame.JackLocatorAccessComponent
// 0x0080 (0x01A8 - 0x0128)
class UJackLocatorAccessComponent : public UActorComponent
{
public:
	TArray<struct FJackLocatorCourse>                  Courses;                                                  // 0x0128(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FJackLocatorDict>                    Locators;                                                 // 0x0138(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               ListingTags;                                              // 0x0148(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0158(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLocatorAccessComponent");
		return ptr;
	}

};


// Class JackGame.JackLocatorContainer
// 0x0008 (0x03A0 - 0x0398)
class AJackLocatorContainer : public AActor
{
public:
	class UJackLocatorAccessComponent*                 LocatorAccess;                                            // 0x0398(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLocatorContainer");
		return ptr;
	}

};


// Class JackGame.JackLookAtActorCameraData
// 0x0028 (0x0068 - 0x0040)
class UJackLookAtActorCameraData : public UJackCameraData
{
public:
	float                                              FOV;                                                      // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Distance;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ViewRotationMin;                                          // 0x0048(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    ViewRotationMax;                                          // 0x0054(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      bTraceCollision : 1;                                      // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLookAtActorCameraData");
		return ptr;
	}

};


// Class JackGame.JackLookAtIKTrack
// 0x0028 (0x00D0 - 0x00A8)
class UJackLookAtIKTrack : public UJackToggleBaseTrack
{
public:
	struct FName                                       LookAtGroupName;                                          // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LookAtBoneName;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PositionThreshold;                                        // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FJackLookAtTrackInfo>                LookAtInfos;                                              // 0x00C0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLookAtIKTrack");
		return ptr;
	}

};


// Class JackGame.JackLookAtIKTrackInst
// 0x0018 (0x0058 - 0x0040)
class UJackLookAtIKTrackInst : public UJackToggleBaseTrackInst
{
public:
	bool                                               bLookAtEnable;                                            // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bDefaultAutoLookAt;                                       // 0x0041(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0042(0x0002) MISSED OFFSET
	float                                              DefaultLookAtInterpSpeed;                                 // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           DefaultLookAtInterpCurve;                                 // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              IntrpSec;                                                 // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NowKeyIndex;                                              // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackLookAtIKTrackInst");
		return ptr;
	}

};


// Class JackGame.JackMapJumpVolume
// 0x0030 (0x0400 - 0x03D0)
class AJackMapJumpVolume : public ATriggerVolume
{
public:
	struct FJackLDT_MapStart                           MapStart;                                                 // 0x03D0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly)
	struct FJackMapJumpVolumeInfo                      MapJumpVolumeInfo;                                        // 0x03E0(0x0007) (Edit, BlueprintVisi, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x1];                                       // 0x03E7(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    TriggerMapChangeDelegate;                                 // 0x03E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bTriggerEnabled;                                          // 0x03F8(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoTriggerMapChange;                                    // 0x03F9(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03FA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMapJumpVolume");
		return ptr;
	}


	class UTextRenderComponent* GetDebugTextComponent();
};


// Class JackGame.JackMapKiraAccessorBase
// 0x0008 (0x0040 - 0x0038)
class UJackMapKiraAccessorBase : public UObject
{
public:
	int                                                UniqueNo;                                                 // 0x0038(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMapKiraAccessorBase");
		return ptr;
	}


	bool IsValid();
	bool HasPickedUp();
	TArray<EJackMapSymbol> GetWeatherIcon();
	TArray<EJackMapSymbol> GetTimeZoneIcon();
	struct FName GetKiraName();
	class AActor* GetKiraActor();
	EJackFloorLevel GetFloorLevel();
	EJackFloorArea GetFloorArea();
	TArray<struct FName> GetCandidateItemIDList();
	bool CanPickUp();
};


// Class JackGame.JackMapScheduledKiraAccessor
// 0x0008 (0x0048 - 0x0040)
class UJackMapScheduledKiraAccessor : public UJackMapKiraAccessorBase
{
public:
	TWeakObjectPtr<class AJackScheduledKira>           KiraActor;                                                // 0x0040(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMapScheduledKiraAccessor");
		return ptr;
	}


	bool IsValid();
	bool HasPickedUp();
	TArray<EJackMapSymbol> GetWeatherIcon();
	TArray<EJackMapSymbol> GetTimeZoneIcon();
	struct FName GetKiraName();
	class AActor* GetKiraActor();
	EJackFloorLevel GetFloorLevel();
	EJackFloorArea GetFloorArea();
	TArray<struct FName> GetCandidateItemIDList();
	bool CanPickUp();
};


// Class JackGame.JackMap3StepAnimKiraAccessor
// 0x0008 (0x0048 - 0x0040)
class UJackMap3StepAnimKiraAccessor : public UJackMapKiraAccessorBase
{
public:
	TWeakObjectPtr<class AJack3StepAnimActor>          KiraActor;                                                // 0x0040(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMap3StepAnimKiraAccessor");
		return ptr;
	}


	bool IsValid();
	bool HasPickedUp();
	struct FName GetKiraName();
	class AActor* GetKiraActor();
	EJackFloorLevel GetFloorLevel();
	EJackFloorArea GetFloorArea();
	TArray<struct FName> GetCandidateItemIDList();
	bool CanPickUp();
};


// Class JackGame.JackUMGItemSyousai
// 0x00E0 (0x0118 - 0x0038)
class UJackUMGItemSyousai : public UObject
{
public:
	bool                                               bIsError;                                                 // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_Bag>                         BagType;                                                  // 0x0039(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	int                                                IndexInBag;                                               // 0x003C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PictorialBookNo;                                          // 0x0040(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x0048(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       ItemName;                                                 // 0x0050(0x0018) (BlueprintVisi, BlueprintReadOnly)
	struct FText                                       ListItemName;                                             // 0x0068(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                CountStack;                                               // 0x0080(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class UTexture2D*                                  SmallIcon;                                                // 0x0088(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0090(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGItemSyousai.BookIconTexture
	TEnumAsByte<EJackUMGItemOsyareType>                UIOsyareType;                                             // 0x00A8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_Classification>              ClassType;                                                // 0x00A9(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET
	struct FText                                       ClassText;                                                // 0x00B0(0x0018) (BlueprintVisi, BlueprintReadOnly)
	TEnumAsByte<EJackUMGItemClassification>            UIClassType;                                              // 0x00C8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	int                                                Rarity;                                                   // 0x00CC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       Description;                                              // 0x00D0(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                BuyPrice;                                                 // 0x00E8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SellPrice;                                                // 0x00EC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackExchange>                         ExchangeType;                                             // 0x00F0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSoldOut;                                               // 0x00F1(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsNeed;                                                  // 0x00F2(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAvailable;                                             // 0x00F3(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	struct FName                                       UsingActionID;                                            // 0x00F8(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       UsingEvent;                                               // 0x0100(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanConsume;                                              // 0x0108(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_SellType>                    SellType;                                                 // 0x0109(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanBuy;                                                  // 0x010A(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_DiscardType>                 DiscardType;                                              // 0x010B(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLeaveAtSort;                                             // 0x010C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bStoreEquipmentBag;                                       // 0x010D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsActive;                                                // 0x010E(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquipped;                                              // 0x010F(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  EquippedRegion;                                           // 0x0110(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentMultiple>                EquipmentMultiple;                                        // 0x0111(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  EquipmentRegion;                                          // 0x0112(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  MultipleEquipmentRegion;                                  // 0x0113(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  ReleaseRegion;                                            // 0x0114(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_EquipmentSE>                 EquipmentSE;                                              // 0x0115(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0116(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemSyousai");
		return ptr;
	}


	void SetBagType(TEnumAsByte<EJackItem_Bag> InBagType);
	bool IsSuccessful();
	bool IsError();
	bool IsBothHandsEquipment();
	void GetItemIdFromPictorialBookNo(struct FName* OutItemId);
	int CountItemInBag(EJackUMGCountBagItemType InCountBagType);
};


// Class JackGame.JackUMGKiraItemSyousai
// 0x0010 (0x0128 - 0x0118)
class UJackUMGKiraItemSyousai : public UJackUMGItemSyousai
{
public:
	TArray<int>                                        KiraAccessorNoList;                                       // 0x0118(0x0010) (Edit, BlueprintVisi, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGKiraItemSyousai");
		return ptr;
	}

};


// Class JackGame.JackMapLocator
// 0x0000 (0x03A0 - 0x03A0)
class AJackMapLocator : public AJackLocator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMapLocator");
		return ptr;
	}

};


// Class JackGame.JackMapStart
// 0x0038 (0x0400 - 0x03C8)
class AJackMapStart : public APlayerStart
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03C8(0x0010) MISSED OFFSET
	struct FJackLDT_MapStart                           MapStart;                                                 // 0x03D8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly)
	class UCapsuleComponent*                           Follower0CapsuleComponent;                                // 0x03E8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           Follower1CapsuleComponent;                                // 0x03F0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           Follower2CapsuleComponent;                                // 0x03F8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMapStart");
		return ptr;
	}


	class UTextRenderComponent* GetDebugTextComponent();
};


// Class JackGame.JackMaterialCoordinatorComponent
// 0x0090 (0x0230 - 0x01A0)
class UJackMaterialCoordinatorComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01A0(0x0010) MISSED OFFSET
	TArray<struct FJackMaterialCoordinateInfo>         MaterialCoordinateInfos;                                  // 0x01B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x70];                                      // 0x01C0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialCoordinatorComponent");
		return ptr;
	}


	void SetTemporaryMaterialCoordinateApplyRate(float ApplyRate);
	void SetTemporaryMaterialCoordinate(const struct FJackLDT_TemporaryMaterialCoordinate& NewTemporaryMaterialCoordinate);
	void SetMaterialCoordinateApplyRate(float ApplyRate);
	void SetMaterialCoordinate(const struct FJackLDT_MaterialCoordinateType& Type);
	void ClearTemporaryMaterialCoordinate();
	void ClearMaterialCoordinate();
};


// Class JackGame.JackMaterialTextureFolder
// 0x0010 (0x0090 - 0x0080)
class UJackMaterialTextureFolder : public UMaterialInterface
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0080(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialTextureFolder");
		return ptr;
	}

};


// Class JackGame.JackMaterialUpdater
// 0x00C8 (0x0100 - 0x0038)
class UJackMaterialUpdater : public UObject
{
public:
	struct FScriptMulticastDelegate                    UpdateFinished;                                           // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0xB8];                                      // 0x0048(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdater");
		return ptr;
	}


	void SetInverseWorldEffectiveTimeDilation(bool bInverse);
};


// Class JackGame.JackMaterialUpdaterCurve
// 0x0030 (0x0130 - 0x0100)
class UJackMaterialUpdaterCurve : public UJackMaterialUpdater
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdaterCurve");
		return ptr;
	}

};


// Class JackGame.JackMaterialUpdaterDT
// 0x0040 (0x0140 - 0x0100)
class UJackMaterialUpdaterDT : public UJackMaterialUpdater
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0100(0x0018) MISSED OFFSET
	class UCurveBase*                                  StartCurve;                                               // 0x0118(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveBase*                                  LoopCurve;                                                // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveBase*                                  EndCurve;                                                 // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0130(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdaterDT");
		return ptr;
	}

};


// Class JackGame.JackMaterialUpdaterLoopedCurve
// 0x0030 (0x0130 - 0x0100)
class UJackMaterialUpdaterLoopedCurve : public UJackMaterialUpdater
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdaterLoopedCurve");
		return ptr;
	}

};


// Class JackGame.JackMaterialUpdaterHandle
// 0x0000 (0x0038 - 0x0038)
class UJackMaterialUpdaterHandle : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdaterHandle");
		return ptr;
	}

};


// Class JackGame.JackMaterialUpdaterScalar
// 0x0010 (0x0110 - 0x0100)
class UJackMaterialUpdaterScalar : public UJackMaterialUpdater
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdaterScalar");
		return ptr;
	}

};


// Class JackGame.JackMaterialUpdaterVector
// 0x0040 (0x0140 - 0x0100)
class UJackMaterialUpdaterVector : public UJackMaterialUpdater
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0100(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMaterialUpdaterVector");
		return ptr;
	}

};


// Class JackGame.JackMatineeActorEventReceiver
// 0x0000 (0x0038 - 0x0038)
class UJackMatineeActorEventReceiver : public UMatineeActorEventReceiver
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineeActorEventReceiver");
		return ptr;
	}

};


// Class JackGame.JackMatineeAnimationCharacter
// 0x0020 (0x07D0 - 0x07B0)
class AJackMatineeAnimationCharacter : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x07B0(0x0008) MISSED OFFSET
	class UJackMatineeControlComponent*                MatineeControlComponent;                                  // 0x07B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x07C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UCameraComponent>             TargetCamera;                                             // 0x07C8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineeAnimationCharacter");
		return ptr;
	}

};


// Class JackGame.JackMatineeCameraActor
// 0x0030 (0x0900 - 0x08D0)
class AJackMatineeCameraActor : public ACameraActor
{
public:
	TWeakObjectPtr<class AMatineeActor>                MatineeActor;                                             // 0x08D0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    MatineeRotation;                                          // 0x08D8(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              MobileRegionX;                                            // 0x08E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MobileRegionY;                                            // 0x08E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MoveSpeed;                                                // 0x08EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOperationUpdate;                                         // 0x08F0(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x08F1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineeCameraActor");
		return ptr;
	}


	void PlayMatinee(class AMatineeActor* Matinee);
	bool DoesInvertVerticalCameraControl();
	bool DoesInvertHorizontalCameraControl();
};


// Class JackGame.JackMatineeCaptureCommandlet
// 0x0000 (0x0090 - 0x0090)
class UJackMatineeCaptureCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineeCaptureCommandlet");
		return ptr;
	}

};


// Class JackGame.JackMatineeClassOverrider
// 0x0020 (0x0058 - 0x0038)
class UJackMatineeClassOverrider : public UMatineeClassOverrider
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0038(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineeClassOverrider");
		return ptr;
	}

};


// Class JackGame.JackMatineeControlComponent
// 0x0410 (0x05B0 - 0x01A0)
class UJackMatineeControlComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x01A0(0x0060) MISSED OFFSET
	bool                                               bDeclarationUseInMatinee;                                 // 0x0200(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0201(0x0003) MISSED OFFSET
	float                                              MatineeAnimationBlendTime;                                // 0x0204(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               MatineeCaptionBlendAnimation;                             // 0x0208(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               MovementBlendSpace;                                       // 0x0210(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AutoMovementInterpSec;                                    // 0x0218(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FJackLDT_NPCList                            MatineeUNID;                                              // 0x0220(0x0010) (Edit, BlueprintVisi)
	TEnumAsByte<EJackPipipiType>                       MatineePipipiType;                                        // 0x0230(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bResetAnimationByTimelineJump;                            // 0x0231(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0232(0x0002) MISSED OFFSET
	float                                              NodAnimationDefaultApplyRate;                             // 0x0234(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bUseHighQualityTexture;                                   // 0x0238(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bWaitTextureLoadCSBefore;                                 // 0x0239(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bForceSenaShortHairFlag;                                  // 0x023A(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5];                                       // 0x023B(0x0005) MISSED OFFSET
	class UDataTable*                                  AnimationRateDataTable;                                   // 0x0240(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bPlayCoordSoundInCutScene;                                // 0x0248(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsOptimizeForCrowd;                                      // 0x0249(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsOptimizeForCrowdMasterpose;                            // 0x024A(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x25D];                                     // 0x024B(0x025D) MISSED OFFSET
	class UAnimSequence*                               LastAdditiveAnimSequence;                                 // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               LastNodAnimSequence;                                      // 0x04B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x04B8(0x0001) MISSED OFFSET
	bool                                               bIsMatineeControlled;                                     // 0x04B9(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x04BA(0x0002) MISSED OFFSET
	float                                              MatineeApplyRate;                                         // 0x04BC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BlendApplyRate;                                           // 0x04C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              InitializeBlendApplyRate;                                 // 0x04C4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              PrevFrameBlendApplyRate;                                  // 0x04C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MoveLength;                                               // 0x04CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              AutoMovementApplyRateLinear;                              // 0x04D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsOverrideAutoMovementApplyRate;                         // 0x04D4(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x04D5(0x0003) MISSED OFFSET
	float                                              OverrideAutoMovementApplyRate;                            // 0x04D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              TonePowerByTrack;                                         // 0x04DC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AnimationIntervalCount;                                   // 0x04E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0xCC];                                      // 0x04E4(0x00CC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineeControlComponent");
		return ptr;
	}


	bool IsMatineeControlled();
	bool IsDeclarationToUseMatinee();
	float GetMatineeNodAnimationApplyRate();
	float GetMatineeCaptionBlendAnimationApplyRate();
	float GetMatineeBlendAnimationApplyRate();
	float GetMatineeAnimationApplyRate();
	float GetMatineeAdditiveAnimationApplyRate();
};


// Class JackGame.JackMatineePreviewActor
// 0x0020 (0x03B8 - 0x0398)
class AJackMatineePreviewActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           RootCapsuleComponent;                                     // 0x03A0(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x03A8(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMatineePreviewActor");
		return ptr;
	}

};


// Class JackGame.JackMEControlTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackMEControlTrack : public UInterpTrack
{
public:
	class UDataTable*                                  MEDataTable;                                              // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackMEControlTrackKey>              KeyArray;                                                 // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMEControlTrack");
		return ptr;
	}

};


// Class JackGame.JackMEControlTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackMEControlTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMEControlTrackInst");
		return ptr;
	}

};


// Class JackGame.JackMedalManager
// 0x0030 (0x0068 - 0x0038)
class UJackMedalManager : public UObject
{
public:
	class UDataTable*                                  MedalStampDataTable;                                      // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  MedalExchangeDataTable;                                   // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0048(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMedalManager");
		return ptr;
	}


	int StampPressFromStampPressPageInfo(TEnumAsByte<EJackMedal_Shop> ShopType, const struct FJackMedal_StampPressPage& StampPressPageInfo);
	int StampPressFromStampPressInfo(TEnumAsByte<EJackMedal_Shop> ShopType, const struct FJackMedal_StampPress& StampPressInfo);
	int StampPress(TEnumAsByte<EJackMedal_Shop> ShopType);
	bool IsShowableNextStampItem(int NextItemStampNumber);
	bool IsHaveStampPage4();
	bool IsHaveStampPage2();
	bool IsComplatedPage(TEnumAsByte<EJackMedal_StampPage> PageType);
	bool HasMedalStampBook();
	bool GetUnlockTiisanaMedalFlag();
	bool GetUnlockMedalStampFlag();
	int GetStampPressItem(TEnumAsByte<EJackMedal_Shop> ShopType, TArray<struct FName>* OutItemIdList, TArray<TEnumAsByte<EJackMedal_StampPage>>* OutCompletePageTypeList);
	TArray<struct FJackMedal_StampPress> GetStampPressInfo(TEnumAsByte<EJackMedal_Shop> ShopType);
	TArray<struct FJackMedal_StampPressPage> GetStampPreessPageInfo(TEnumAsByte<EJackMedal_Shop> ShopType);
	int GetStampNumberAtPage(TEnumAsByte<EJackMedal_StampPage> PageType);
	int GetStampNumber();
	TEnumAsByte<EJackMedal_StampPage> GetStampCompletePageType();
	void GetNextStampItem(struct FName* OutItemId, int* OutStampNumber);
	TEnumAsByte<EJackMedal_Trade> GetMedalTradeType(TEnumAsByte<EJackMedal_Shop> ShopType);
	void GetMedalStampBook();
	int GetLimitStampNumber();
	int GetHaveMedalNumber();
	TArray<struct FJackMedal_ExchageItem> GetExchangeItemList();
	TEnumAsByte<EJackMedal_Event> GetEventType(TEnumAsByte<EJackMedal_Shop> ShopType);
	TEnumAsByte<EJackMedal_StampPage> GetCurrentPageType();
	bool ExchangeItem(const struct FName& ExchangeId, int ExchangeCount);
};


// Class JackGame.JackMenuCharacter
// 0x0010 (0x1100 - 0x10F0)
class AJackMenuCharacter : public AJackCharacter
{
public:
	class UJackEquipmentControlComponent*              EquipmentControlComponent;                                // 0x10F0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x10F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMenuCharacter");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotAccessor
// 0x0010 (0x0048 - 0x0038)
class UJackMeosiSlotAccessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotAccessor");
		return ptr;
	}


	void UpdateSettingValue();
	void UpdateMamonoSettingValue();
	void SetupMachineDataFromIndex(int Index, const struct FJackMeosiSlotVariable& Variable);
	void SetupMachineDataFromID(TEnumAsByte<EJackMiniGameMeosiSlotPoint> Point, int ID, const struct FJackMeosiSlotVariable& Variable);
	void SetUniqueID(int InUniqueId);
	void SetNowTotalGame(int InTotalGame);
	void SetGamePlayCount(int InPlayCount);
	void ResetSettingValue();
	bool HaveSmaleRoleCounter();
	struct FJackMeosiSlotVariable GetVaribaleFromIndex(int Index);
	struct FJackMeosiSlotVariable GetVaribaleFromID(TEnumAsByte<EJackMiniGameMeosiSlotPoint> Point, int ID);
	int GetUniqueID();
	int GetSimCountOneGame();
	struct FName GetOrbCommentTextID(int OrbNum);
	int GetNumOrb(TEnumAsByte<EJackMiniGameMeosiSlotPoint> Point, int ID);
	int GetNowTotalGame();
	struct FName GetMonsterKilledCommentTextID(int MonsterKilledNum, int CeilingValue);
	int GetMaxGame();
	TEnumAsByte<EJackMeosiSlotMachineCondition> GetMachineCondition(const struct FJackMeosiSlotVariableStateParam& InParam);
	int GetGamePlayCount();
	struct FName GetFriendMonsterCommentTextID(int FriendMonsterNum);
	TArray<struct FJackMeosiSlotDataRoboHighlight> GetDataRoboHighlight(TArray<struct FJackMeosiSlotVariableStateParam> InParams);
	int GetCellingValueMaxNum();
	int CalcAddGameCount(TEnumAsByte<EJackMiniGameMeosiSlotPoint> Locale, int NowTime);
	void ApplyLocationTime(TEnumAsByte<EJackMiniGameMeosiSlotPoint> Locale, int NowTime);
};


// Class JackGame.JackMeosiSlotBattleDef
// 0x0000 (0x0038 - 0x0038)
class UJackMeosiSlotBattleDef : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotBattleDef");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotConfigurationDataManager
// 0x0000 (0x0038 - 0x0038)
class UJackMeosiSlotConfigurationDataManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotConfigurationDataManager");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotDataManagers
// 0x0038 (0x0070 - 0x0038)
class UJackMeosiSlotDataManagers : public UObject
{
public:
	class UJackMeosiSlotConfigurationDataManager*      ConfigurationDataManager;                                 // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackMeosiSlotMonsterDataManager*            MonsterDataManager;                                       // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackMeosiSlotItemDataManager*               ItemDataManager;                                          // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UTexture2D*>                          PamphletTextures;                                         // 0x0050(0x0010) (ZeroConstructor)
	TArray<class UTexture2D*>                          AnyTextures;                                              // 0x0060(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotDataManagers");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotEffectDef
// 0x0000 (0x0038 - 0x0038)
class UJackMeosiSlotEffectDef : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotEffectDef");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotGameMain
// 0x0058 (0x03F0 - 0x0398)
class AJackMeosiSlotGameMain : public AActor
{
public:
	class UJackMeosiSlotState*                         MeosiSlotState;                                           // 0x0398(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AJackMeosiSlotReels*                         MeosiSlotReels;                                           // 0x03A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bIsDebugEnabled;                                          // 0x03A8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugAutoPlayEnabled;                                  // 0x03A9(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugDrawEnabled;                                      // 0x03AA(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotDebugDraw>               DebugDrawType;                                            // 0x03AB(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DebugAutoPlayInterval;                                    // 0x03AC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x03B0(0x0018) MISSED OFFSET
	class UJackMeosiSlotSoundManager*                  SoundManager;                                             // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x03D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotGameMain");
		return ptr;
	}


	void UpdateState();
	void UpdateLeverOn();
	struct FJackMeosiSlotGameResult UpdateGameResult();
	void UpdateDebugKeyPressRepeatedly(float DeltaSeconds, const struct FKey& Key);
	void UpdateAutoPlayKeyPressRepeatedly(float DeltaSeconds, const struct FKey& Key);
	void SetAutoPlay();
	void ResetAutoPlay();
	bool RequireReelRevolvingStart();
	bool RequireReelBrake(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	void RequestClosedNumTotalGame();
	int PayBackBetCoin();
	bool IsMessageWindowClosed();
	bool IsMamonoCasino();
	bool IsAutoPlay();
	void InitializeStateParam(const struct FJackMeosiSlotStateInitialParam& InParam);
	void InitializeReelReference(class AJackMeosiSlotReels* InReels);
	void InitializeReelParam(const struct FJackMeosiSlotReelInitialParam& InParam);
	class UJackMeosiSlotSoundManager* GetSoundManager();
	int FluctuateCoin(int InGain);
	int BetCoin();
	void ApplyEndSaveData();
};


// Class JackGame.JackMeosiSlotGameResultDef
// 0x0000 (0x0038 - 0x0038)
class UJackMeosiSlotGameResultDef : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotGameResultDef");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotItemDataManager
// 0x0010 (0x0048 - 0x0038)
class UJackMeosiSlotItemDataManager : public UObject
{
public:
	TArray<class UTexture2D*>                          ItemTextures;                                             // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotItemDataManager");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotItemDef
// 0x0000 (0x0038 - 0x0038)
class UJackMeosiSlotItemDef : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotItemDef");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotMonsterDataManager
// 0x0018 (0x0050 - 0x0038)
class UJackMeosiSlotMonsterDataManager : public UObject
{
public:
	TArray<struct FJackMeosiSlotMonsterTexture>        MonsterTextures;                                          // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotMonsterDataManager");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotReelControlParameter
// 0x0010 (0x0048 - 0x0038)
class UJackMeosiSlotReelControlParameter : public UObject
{
public:
	float                                              HandPermissibleRange_WaterMelon;                          // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HandPermissibleRange_Bel;                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HandPermissibleRange_Seven;                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotReelControlParameter");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotReelControlProcessor
// 0x0080 (0x00B8 - 0x0038)
class UJackMeosiSlotReelControlProcessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0038(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotReelControlProcessor");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotReels
// 0x0038 (0x03D0 - 0x0398)
class AJackMeosiSlotReels : public AActor
{
public:
	class UJackMeosiSlotReelUnit*                      SlotReelUnit;                                             // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              RevPerSeconds;                                            // 0x03A0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x03A4(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotReels");
		return ptr;
	}


	void StartReelRevolving(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	void SetReelCurrent(TEnumAsByte<EJackMeosiSlotReel> InReelIndex, float InCurrent);
	void ReelRevolvingStart_Default(const struct FJackMeosiSlotSoundEffect& InSoundEffect);
	void ReelRevolvingBrake(TEnumAsByte<EJackMeosiSlotReel> InReelIndex, float InCorrection);
	bool IsStopReceptionEnabled(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	bool IsExactlyPressSucceeded(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	bool IsActive();
	void InertiaMovementStart_RightReel(const struct FJackMeosiSlotSoundEffect& InSoundEffect, TEnumAsByte<EJackMeosiSlotReelStopTimes> InReelStopTimes);
	void InertiaMovementStart_LeftReel(const struct FJackMeosiSlotSoundEffect& InSoundEffect, TEnumAsByte<EJackMeosiSlotReelStopTimes> InReelStopTimes);
	void InertiaMovementStart_CenterReel(const struct FJackMeosiSlotSoundEffect& InSoundEffect, TEnumAsByte<EJackMeosiSlotReelStopTimes> InReelStopTimes);
	struct FJackMeosiSlotVariableReelParam GetVariableParam();
	TEnumAsByte<EJackMeosiSlotReelStopTimes> GetReelStopTimes();
	float GetReelStopPos(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	int GetReelMeatPos(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	class UTexture* GetReelMaskTexture(TEnumAsByte<EJackMeosiSlotPicture> InReelPicture);
	float GetReelDegree(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	float GetReelCurrent(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	float GetReelCorrection(TEnumAsByte<EJackMeosiSlotReel> InReelIndex);
	class UTexture* GetReelBaseTexture(TEnumAsByte<EJackMeosiSlotPicture> InReelPicture);
	bool EndInertiaMovement(TEnumAsByte<EJackMeosiSlotReelStopTimes> InReelStopTimes);
	void EnableReelStopReception();
};


// Class JackGame.JackReelUnit
// 0x0010 (0x0048 - 0x0038)
class UJackReelUnit : public UObject
{
public:
	TArray<class UJackReelController*>                 ReelControllers;                                          // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackReelUnit");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotReelUnit
// 0x0008 (0x0050 - 0x0048)
class UJackMeosiSlotReelUnit : public UJackReelUnit
{
public:
	class UJackMeosiSlotReelControlProcessor*          SlotProcessor;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotReelUnit");
		return ptr;
	}

};


// Class JackGame.JackMeosiSlotSimulationComponent
// 0x0008 (0x0130 - 0x0128)
class UJackMeosiSlotSimulationComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0128(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotSimulationComponent");
		return ptr;
	}


	void Update();
	void SimQuit();
	void Quit();
	void Initialize(const struct FJackMeosiSlotStateInitialParam& InParam);
	bool HasReachedMaxTotalGame();
	struct FJackMeosiSlotVariableStateParam GetVariableParam();
	struct FJackMeosiSlotVariableReelParam CalculateReelParam();
};


// Class JackGame.JackMeosiSlotSoundManager
// 0x0048 (0x0080 - 0x0038)
class UJackMeosiSlotSoundManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0038(0x0030) MISSED OFFSET
	TArray<class USoundBase*>                          MeosiSlotSE;                                              // 0x0068(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotSoundManager");
		return ptr;
	}


	void UnloadMeosiSE();
	void StopBGM(const struct FLatentActionInfo& LatentInfo, float FadeOutTime, bool bDontResumeOldBGM);
	void SetStockBGMPlaying(bool bStockBGM);
	void PushSoundBGM();
	void PopAndPlayBGM();
	void PlayStockBGM(const struct FLatentActionInfo& LatentInfo, bool bPushMusic);
	void PlayBGMFromID(const struct FLatentActionInfo& LatentInfo, const struct FName& BGMID, bool bPushMusic);
	void PlayBGM(const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EJackMeosiSlotBGM> InType, bool bPushMusic);
	void LoadMeosiSE();
	bool IsStockBGMPlaying();
	bool IsStockBGM();
	bool IsCurrentBGMNone();
	bool IsChangeBGMID(const struct FName& BGMID);
	bool IsBounusStockBGM();
	bool IsBossStockBGM();
	struct FName GetStockBGMID();
	int GetMeosiSESet();
	class USoundBase* GetMeosiSE(const struct FName& SEID);
	struct FName GetBGMID(TEnumAsByte<EJackMeosiSlotBGM> InType);
	void ApplyBGMID(const struct FName& InName);
};


// Class JackGame.JackMeosiSlotState
// 0x07A0 (0x07D8 - 0x0038)
class UJackMeosiSlotState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x6BC];                                     // 0x0038(0x06BC) MISSED OFFSET
	bool                                               bIsDebugHsHandEnabled;                                    // 0x06F4(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotHsHand>                  DebugSlotHsHand;                                          // 0x06F5(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugInternalProbabilityStatusEnabled;                 // 0x06F6(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotInternalProbabilityStatus> DebugInternalProbabilityStatus;                           // 0x06F7(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugLatentEnabled;                                    // 0x06F8(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDirectImpact;                                       // 0x06F9(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x06FA(0x0002) MISSED OFFSET
	int                                                DebugLatentPeriod;                                        // 0x06FC(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugBonusRising;                                         // 0x0700(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugBonusGoldSevens;                                     // 0x0704(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugBonusBack;                                           // 0x0708(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugChanceCutinStepUpColor_Default;                      // 0x070C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugChanceCutinStepUpColor_Left;                         // 0x0710(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugChanceCutinStepUpColor_Center;                       // 0x0714(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugChanceCutinStepUpColor_Right;                        // 0x0718(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugMonsterEncounterEnabled;                          // 0x071C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x071D(0x0003) MISSED OFFSET
	int                                                DebugMonsterIndex;                                        // 0x0720(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugTreasureBoxAppearanceEnabled;                     // 0x0724(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0725(0x0001) MISSED OFFSET
	bool                                               bIsDebugRecruitEnabled;                                   // 0x0726(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugRecruit;                                            // 0x0727(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugYakumonoFlashEnabled;                             // 0x0728(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugYakumonoFlash;                                      // 0x0729(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugDrakeeEffectEnabled;                              // 0x072A(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotDrakeeEffect>            DebugDrakeeEffect1;                                       // 0x072B(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotDrakeeEffect>            DebugDrakeeEffect2;                                       // 0x072C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotDrakeeEffect>            DebugDrakeeEffect3;                                       // 0x072D(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotDrakeeColor>             DebugDrakeeColor;                                         // 0x072E(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x072F(0x0001) MISSED OFFSET
	int                                                DebugShimofuriBackGround;                                 // 0x0730(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                bIsDebugShimofuriChanceSuper;                             // 0x0734(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugShimofuriChanceSuccess;                           // 0x0738(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugShimofuriChanceBound;                             // 0x0739(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugShimofuriChanceColorRed;                          // 0x073A(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugEffectEnabled;                                    // 0x073B(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotEffect>                  DebugEffect;                                              // 0x073C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               DebugReelLightOffTimes1;                                  // 0x073D(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               DebugReelLightOffTimes2;                                  // 0x073E(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               DebugReelLightOffTimes3;                                  // 0x073F(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMeosiSlotFireLampColor>           DebugFireLampColor;                                       // 0x0740(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               DebugFireLampLargeSize;                                   // 0x0741(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugReelSEEnabled;                                    // 0x0742(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x0743(0x0001) MISSED OFFSET
	struct FJackMeosiSlotSoundEffect                   DebugReelStartSE;                                         // 0x0744(0x0008) (BlueprintVisi)
	struct FJackMeosiSlotSoundEffect                   DebugReelStopSE1;                                         // 0x074C(0x0008) (BlueprintVisi)
	struct FJackMeosiSlotSoundEffect                   DebugReelStopSE2;                                         // 0x0754(0x0008) (BlueprintVisi)
	struct FJackMeosiSlotSoundEffect                   DebugReelStopSE3;                                         // 0x075C(0x0008) (BlueprintVisi)
	bool                                               bIsDebugAssistEnabled;                                    // 0x0764(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugAssist;                                           // 0x0765(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugStockClear;                                       // 0x0766(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugMamonoCasino;                                     // 0x0767(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugNumOrb;                                           // 0x0768(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugPamph;                                            // 0x0769(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x076A(0x0002) MISSED OFFSET
	int                                                DebugExtraMode;                                           // 0x076C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBossBattleProntoEnabled;                          // 0x0770(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBossBattleWinningFixEnabled;                      // 0x0771(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBossBattleWinningIchigeki;                        // 0x0772(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0773(0x0001) MISSED OFFSET
	int                                                DebugBossMonster;                                         // 0x0774(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugComebackType;                                        // 0x0778(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBonusGameNum;                                     // 0x077C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x077D(0x0003) MISSED OFFSET
	int                                                DebugBonusGameNum;                                        // 0x0780(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBossBattleSlimeMuteki;                            // 0x0784(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBossBattleFriendsMuteki;                          // 0x0785(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugBossBattleBossMuteki;                             // 0x0786(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAutoPlay;                                              // 0x0787(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugAutoPlay;                                         // 0x0788(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAutoPlayKey;                                           // 0x0789(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugAutoPlayKey;                                      // 0x078A(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x078B(0x0001) MISSED OFFSET
	int                                                DebugAutoPlayType;                                        // 0x078C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugAgingType;                                           // 0x0790(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugAutoStop;                                         // 0x0794(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0795(0x0003) MISSED OFFSET
	int                                                AutoPlayGameCount;                                        // 0x0798(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugSptCont;                                             // 0x079C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugSptButton;                                           // 0x07A0(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugSptMode;                                             // 0x07A4(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugUnionSuccess;                                        // 0x07A8(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugLevel;                                               // 0x07AC(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugHintSetting;                                      // 0x07B0(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x07B1(0x0003) MISSED OFFSET
	int                                                DebugBonusStock;                                          // 0x07B4(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DebugBreakRefundRate;                                     // 0x07B8(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x07BC(0x0004) MISSED OFFSET
	TArray<float>                                      DebugRandLog;                                             // 0x07C0(0x0010) (BlueprintVisi, ZeroConstructor)
	TEnumAsByte<EJackMeosiSlotBattleBackPattern>       DebugBattleBackPattern;                                   // 0x07D0(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x7];                                       // 0x07D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMeosiSlotState");
		return ptr;
	}


	bool WasReachedParadise();
	bool WasReachedCeiling();
	bool WasPseudoContinuationEffectHappened();
	bool WasLongFreezeHappened();
	bool WasLatentHappened();
	bool WasGoldSevens();
	bool WasBonusStocked();
	bool WasBonusGameBegun();
	void StockBgm();
	void SimQuitMeosiSlot();
	void SetNumOrb(int InNumOrb);
	void SetClosedNumTotalGame();
	void RestorePrev();
	void ResetPartyMonsters();
	void ResetDebugNumOrb();
	void ResetBreakOffRefund();
	void ResetAutoPlayGameCount();
	void ReqStockClear(bool bIsPrevSim);
	void QuitMeosiSlot();
	TEnumAsByte<EJackMeosiSlotBattleBackPattern> LotteryBattleBackPattern();
	TEnumAsByte<EJackMeosiSlotBattleBack> LotteryBattleBack(TEnumAsByte<EJackMeosiSlotEffectKeyType> InKeyType);
	bool IsZakoCont();
	bool IsTBoxScenario();
	bool IsTakePamph();
	bool IsStockBGM();
	bool IsStageInitializeRequested();
	bool IsStageChanged();
	bool IsSpTrainingEntry();
	bool IsSpecialBonusRising();
	bool IsSlimeScenario();
	bool IsReachSpot();
	bool IsPseudoContinuationDevelopmentEnabled();
	bool IsPseudoContinuationDevelopmentDecided();
	bool IsPseudoContinuation();
	bool IsPartyMonsterFull();
	bool IsMamonoScenario();
	bool IsLatent();
	bool IsInvalidStopedHsHand();
	bool IsIntroductionChallengeBattle();
	bool IsInternalProbabilityStatusChanged();
	bool IsInBonusGame();
	bool IsIchigekiWinFixed();
	bool IsHsHandFailure();
	bool IsHazureScenario();
	bool IsHandFailure();
	bool IsFakeBattle();
	bool IsExtraMode();
	bool IsEventSuperShimofuriChance();
	bool IsEventShimofuriChance();
	bool IsEventLocked();
	bool IsEventHappened();
	bool IsEventBossBattle();
	bool IsEnemyKilledAtOneGame(const struct FJackMeosiSlotMonster& InEnemyMonster);
	bool IsEffectHappened();
	bool IsDirectImpact();
	bool IsDefaultStage();
	bool IsDebugNumOrb();
	bool IsContScenario();
	bool IsContGame();
	bool IsChanceZoneNormal();
	bool IsChanceZone();
	bool IsChallengeBattleResult();
	bool IsChallengeBattle();
	bool IsBossBattleWinFixed();
	bool IsBossBattleBGMSpecial();
	bool IsBonusStock();
	bool IsBonusRelief();
	bool IsBonusGame();
	bool IsBonusFixing();
	bool IsBonusEstablished();
	bool IsBetPossible(int InBet);
	bool IsAssistEnable();
	bool IsAsist();
	bool IsAfterResultWithStock();
	bool IsAdvanceDirectImpact();
	bool HasReachedMaxTotalGame();
	bool HasReachedMaxOrb();
	bool HasReachedMaxCoin();
	bool HasChangedToChanceZone();
	struct FJackMeosiSlotYakumonoFlash GetYakumonoFlash();
	struct FJackMeosiSlotVariableStateParam GetVariableParam();
	TEnumAsByte<EJackMeosiSlotUnionScenarioID> GetUnionScenarioID();
	struct FJackMeosiSlotUnionChallengeState GetUnionChallengeInfo();
	struct FJackMeosiSlotTreasureBox GetTreasureBox();
	struct FString GetTextFromTextPack(const struct FString& InTextId);
	TEnumAsByte<EJackMiniGameTableCoinType> GetTableType();
	int GetStopedHsHandsCount(TEnumAsByte<EJackMeosiSlotHsHand> InHsHand);
	TEnumAsByte<EJackMeosiSlotHsHand> GetStopedHsHand();
	int GetStopedHandsCount(TEnumAsByte<EJackMeosiSlotHand> InNmHand);
	TEnumAsByte<EJackMeosiSlotTimeZone> GetStageTimeZone();
	TEnumAsByte<EJackMeosiSlotStageState> GetStageState();
	bool GetSptResult();
	int GetSptPoint();
	struct FJackMeosiSlotSpecialTrainingState GetSpecialTrainingInfo();
	float GetShimohuriMonsterRefundRate(const struct FName& InMonsterKey);
	int GetShimohuriMonsterRefund(const struct FName& InMonsterKey);
	struct FJackMeosiSlotShimofuriChance GetShimofuriChance();
	TEnumAsByte<EJackMeosiSlotSettingValue> GetSettingValue();
	int GetSettingAskGames();
	int GetSetGameNum();
	TEnumAsByte<EJackMeosiSlotUnionSlime> GetScenarioSlimeID();
	int GetScenarioRoute();
	int GetScenarioPatternNum();
	struct FName GetScenarioPatternName();
	TEnumAsByte<EJackMeosiSlotScenarioLotteryResult> GetScenarioLotteryResult();
	TEnumAsByte<EJackMeosiSlotScenarioBranch> GetScenarioCondition();
	TEnumAsByte<EJackMeosiSlotScenarioActType> GetScenarioActType();
	TEnumAsByte<EJackMeosiSlotScenarioActNo> GetScenarioActNo();
	struct FJackMeosiSlotReelSoundEffectSet GetReelSoundEffect();
	struct FJackMeosiSlotReelLightOff GetReelLightOff();
	struct FJackMeosiSlotMonster GetRecruitMonster();
	TEnumAsByte<EJackMeosiSlotMonsterRank> GetRank();
	TEnumAsByte<EJackMeosiSlotCutinColor> GetPseudoContinuationDevelopmentColor();
	int GetPseudoContinuationCount();
	struct FJackMeosiSlotPseudoContinuation_Dev GetPseudoContinuation_Dev();
	struct FJackMeosiSlotPseudoContinuation GetPseudoContinuation();
	float GetPrevBreakRefundRate();
	int GetPreBreakOffRefund();
	int GetPeriodUntilPseudoContinuation();
	TArray<struct FJackMeosiSlotMonster> GetPartyMonsters();
	int GetParadiseModeType();
	TEnumAsByte<EJackMeosiSlotStageState> GetOldStageState();
	int GetNumTotalOrb();
	int GetNumTotalGame();
	int GetNumTotalFeed();
	int GetNumTotalBet();
	int GetNumSpecialBonusTimes();
	int GetNumPartyMonsters();
	int GetNumOrb();
	int GetNumLastPayOut();
	int GetNumKilledEnemy();
	int GetNumGamesRemainingUntilBossBattle();
	int GetNumGamesRemaining();
	int GetNumGame();
	int GetNumFeed();
	int GetNumEnemyRemaining();
	int GetNumElapsedGameLastEvent();
	int GetNumElapsedGameLastBattle();
	int GetNumCoin();
	int GetNumBonusTimes();
	int GetNumBonusStock();
	int GetNumBigBonusTimes();
	int GetNumATContinuedTimes();
	int GetNumATBonusTimes();
	int GetNumATAdvantage();
	int GetNumAdvantage();
	TEnumAsByte<EJackMeosiSlotStage> GetNextStage();
	struct FString GetMonsterName(TEnumAsByte<EJackMeosiSlotMonsterID> MonsterID);
	struct FString GetMonsterListName(TEnumAsByte<EJackMeosiSlotMonsterID> MonsterID);
	struct FName GetMonsterKey(TEnumAsByte<EJackMeosiSlotMonsterID> MonsterID);
	float GetMachineRates();
	int GetLotteriedHsHandsCount(TEnumAsByte<EJackMeosiSlotHsHand> InHsHand);
	TEnumAsByte<EJackMeosiSlotHsHand> GetLotteriedHsHand();
	int GetLotteriedHandsCount(TEnumAsByte<EJackMeosiSlotHand> InNmHand);
	TEnumAsByte<EJackMeosiSlotStageState> GetLogInvalidStageState2();
	TEnumAsByte<EJackMeosiSlotStageState> GetLogInvalidStageState1();
	int GetLevel();
	int GetLatentPeriod();
	struct FString GetItemName(TEnumAsByte<EJackMeosiSlotItemSpec> ItemID);
	struct FName GetItemKey(TEnumAsByte<EJackMeosiSlotItemSpec> ItemID);
	struct FJackMeosiSlotItem GetItemHintParam();
	TEnumAsByte<EJackMeosiSlotScenarioHint> GetItemHint();
	TEnumAsByte<EJackMeosiSlotInternalProbabilityStatus> GetInternalProbabilityStatus();
	TEnumAsByte<EJackMeosiSlotHsHand> GetHsHand();
	struct FJackMeosiSlotMonster GetHeroMonster();
	int GetHandsCount(TEnumAsByte<EJackMeosiSlotHand> InNmHand);
	TEnumAsByte<EJackMeosiSlotHand> GetHand();
	int GetGamesToParadiseRemaining();
	struct FJackMeosiSlotFrameLamp GetFrameLamp();
	struct FJackMeosiSlotFireLamp GetFireLamp();
	TEnumAsByte<EJackMeosiSlotEvent> GetEvent();
	TEnumAsByte<EJackMeosiSlotEffect> GetEffect();
	struct FJackMeosiSlotDrakeeEffect GetDrakeeEffect();
	struct FJackMeosiSlotDoorEmission GetDoorEmission();
	TEnumAsByte<EJackMeosiSlotInternalProbabilityStatus> GetDispInternalProbabilityStatus();
	bool GetDebugAutoPlayKey();
	int GetDebugAgingType();
	TEnumAsByte<EJackMeosiSlotStage> GetCurrentStage();
	TEnumAsByte<EJackMeosiSlotScenarioSubAct> GetCurrentScenarioSubAct();
	int GetCurrentScenarioRoute();
	int GetCurrentScenarioPatternNum();
	TEnumAsByte<EJackMeosiSlotKeySeType> GetCurrentScenarioKeySe();
	TEnumAsByte<EJackMeosiSlotScenarioActType> GetCurrentScenarioActType();
	TEnumAsByte<EJackMeosiSlotScenarioActNo> GetCurrentScenarioActNo();
	int GetCurrentPatternBlock();
	int GetCurrentBlockGame();
	struct FJackMeosiSlotChanceCutinStepUp GetChanceCutinStepUp();
	struct FJackMeosiSlotChanceCutinDefault GetChanceCutinDefault();
	int GetCeilingValue();
	int GetBreakOffRefund();
	TEnumAsByte<EJackMeosiSlotBonusMonsterLevel> GetBonusMonsterLevel();
	float GetBonusAverage();
	int GetBetMax();
	int GetBellPayOut(int InNumOrb);
	int GetBellMinRate();
	int GetBellMaxRate();
	TEnumAsByte<EJackMeosiSlotBattleBack> GetBattleBack(TEnumAsByte<EJackMeosiSlotEffectKeyType> InKeyType);
	struct FJackMeosiSlotBattle GetBattle();
	int GetBaseBreakOffRefund();
	struct FJackMeosiSlotBarChance GetBarChance();
	bool GetAutoPlayKey();
	float GetAutoPlayInterval();
	int GetAutoPlayGameCount();
	int GetAsistReelPos(TEnumAsByte<EJackMeosiSlotReel> IdxReel);
	bool GetAsistHsHandResult();
	TEnumAsByte<EJackMeosiSlotHsHand> GetAsistHsHand();
	int GetAgingType();
	TEnumAsByte<EJackMeosiSlotBarBackColor> CalcBarChanceExpected();
};


// Class JackGame.JackMiniGameBase
// 0x0008 (0x03A0 - 0x0398)
class AJackMiniGameBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameBase");
		return ptr;
	}


	void RequestExitMiniGame();
	void MiniGameStart();
	void MiniGameEnd();
	void MiniGameBeginPlay();
	class AJackMiniGameTriggerBase* GetMiniGameTrigger();
};


// Class JackGame.JackUMGWidgetBase
// 0x01A0 (0x0370 - 0x01D0)
class UJackUMGWidgetBase : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x01D0(0x0020) MISSED OFFSET
	struct FName                                       WidgetName;                                               // 0x01F0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisible;                                               // 0x01F8(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreIsVisible;                                         // 0x01F9(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsActive;                                                // 0x01FA(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFocusableWindow;                                       // 0x01FB(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsForceFocusable;                                        // 0x01FC(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsForceHilite;                                           // 0x01FD(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShowHilite;                                            // 0x01FE(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsBindMenuKey;                                           // 0x01FF(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsKeyEvent;                                              // 0x0200(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableInput;                                            // 0x0201(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bExceptionCategory;                                       // 0x0202(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFitCanvasPanelToParent;                                  // 0x0203(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSkipCalcLocalPosition;                                 // 0x0204(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsIgnoreLoging;                                          // 0x0205(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsIgnoreSafeAreaCheck;                                   // 0x0206(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGPresetAnim>                    OpenPresetAnimOption;                                     // 0x0207(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGPresetAnim>                    ClosePresetAnimOption;                                    // 0x0208(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGPresetAnim>                    ShowPresetAnimOption;                                     // 0x0209(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGPresetAnim>                    HidePresetAnimOption;                                     // 0x020A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsRoot;                                                  // 0x020B(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsTopMenu;                                               // 0x020C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsForePage;                                              // 0x020D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsIgnoreCancelKey;                                       // 0x020E(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableEnterKeyEventCalling;                              // 0x020F(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableCancelKeyEventCalling;                             // 0x0210(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	float                                              DefaultAdjustResize;                                      // 0x0214(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   LayoutOffset;                                             // 0x0218(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   SnapOffset;                                               // 0x0220(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0228(0x0008) MISSED OFFSET
	class UPanelWidget*                                RootPanelRef;                                             // 0x0230(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   DefaultPosition;                                          // 0x0238(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   CurrentPosition;                                          // 0x0240(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   Position;                                                 // 0x0248(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   Scale;                                                    // 0x0250(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              Alpha;                                                    // 0x0258(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   WidgetSize;                                               // 0x025C(0x0008) (BlueprintVisi, IsPlainOldData)
	struct FVector2D                                   RootPosition;                                             // 0x0264(0x0008) (BlueprintVisi, IsPlainOldData)
	struct FLinearColor                                TextBaseColor;                                            // 0x026C(0x0010) (BlueprintVisi, IsPlainOldData)
	struct FLinearColor                                TextBorderColor;                                          // 0x027C(0x0010) (BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             JackOnWidgetBPActionDelegate;                             // 0x0290(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    JackOnWidgetNotificationDelegate;                         // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptDelegate                             JackOnWidgetKeyEventDelegate;                             // 0x02B0(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData04[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET
	class UPanelWidget*                                OptimizePanel;                                            // 0x02C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x60];                                      // 0x02D0(0x0060) MISSED OFFSET
	class UJackUMGWidgetBase*                          ChildWidget;                                              // 0x0330(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGWidgetBase*                          ParentWidget;                                             // 0x0338(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UJackUMGAnimBase*>                    AnimList;                                                 // 0x0340(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x20];                                      // 0x0350(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWidgetBase");
		return ptr;
	}


	void Wait(class UObject* WorldContextObject, float WaitTime, const struct FLatentActionInfo& LatentInfo);
	int ValueLooper(int InValue, int InAdd, int InMin, int InMax);
	void UpdateWidget(float DeltaTime);
	void UpdateOptimizePanel();
	void UpdateOptimizeBox();
	void UpdateCanvasPanelSize();
	void StopUISound(class USoundBase* InSoundBase);
	void SetWidgetVisible(bool InIsVisible);
	void SetWidgetScale(const struct FVector2D& InScale);
	void SetWidgetPosition(const struct FVector2D& InPosition);
	void SetWidgetName(const struct FName& InWidgetName);
	void SetWidgetDisableColor(bool bIsDisable);
	void SetWidgetAlpha(float InAlpha);
	void SetWidgetActive(bool InIsActive);
	void SetVisibleToTextBlockArray(TArray<class UTextBlock*> InTextBlockArray, ESlateVisibility InVisibility);
	void SetupOptimizePanel();
	void SetTextJustificationInCanvesPanel(TEnumAsByte<ETextJustify> InJustification, class UCanvasPanel* InCanvesPanel);
	void SetTextJustification(TEnumAsByte<ETextJustify> InJustification);
	void SetTextIdToTextBlockArray(TArray<class UTextBlock*> InTextBlockArray, const struct FName& InTextId);
	void SetTextIdOfPanelInCanvesPanel(class UCanvasPanel* InCanvesPanel, TArray<struct FName> InTextIdList);
	void SetTextFromTextIdWithColor(class UWidget* InTextPanel, const struct FName& InTextId, TEnumAsByte<EJackUMGTextColorSet> InFontColor);
	void SetTextFromTextId(class UWidget* InPanel, const struct FName& TextID);
	void SetTextFontColorToTextBlockArray(TArray<class UTextBlock*> InTextBlockArray, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetTextFontColorOfWidget(const struct FName& InItemId, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void STATIC_SetTextFontColorOfPanelStatic(class UObject* WorldContextObject, class UTextBlock* InTextPanel, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void STATIC_SetTextFontColorOfPanelInCanvesPanelStatic(class UObject* WorldContextObject, class UCanvasPanel* InCanvesPanel, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetTextFontColorOfPanelInCanvesPanel(class UCanvasPanel* InCanvesPanel, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetTextFontColorOfPanel(class UTextBlock* InTextPanel, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetTextFontColorInCanvesPanel(TEnumAsByte<EJackUMGTextColorSet> InColorType, class UCanvasPanel* InCanvesPanel);
	void SetTextFontColorAtHpRate(float HPRate);
	void SetTextFontColorAtHp(int HP, int MaxHP);
	void SetTextFontColor(TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetTextByNameFromTextId(const struct FName& InPanelName, const struct FName& TextID);
	void SetSnapToSpecifiedWidget(class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType);
	void SetSendKeyEventWidget(class UJackUMGWidgetBase* InWidgetBase);
	void SetScaleToAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetScaleToAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetScaleAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void SetScaleAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void STATIC_SetPanelVisibility(class UWidget* InPanel, bool bIsVisible);
	void STATIC_SetPanelSize(class UWidget* InPanel, const struct FVector2D& InSize);
	void STATIC_SetPanelScale(class UWidget* InPanel, const struct FVector2D& InScale);
	void STATIC_SetPanelPosition(class UWidget* InPanel, const struct FVector2D& InPosition);
	void SetPanelColor(class UWidget* InPanel, const struct FLinearColor& InColor);
	void STATIC_SetPanelAlpha(class UWidget* InPanel, float InAlpha);
	void SetOnCursor(bool bIsOnCursor);
	void SetNameTextFontColor(TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetMoveToAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetMoveToAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetMoveAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void SetMoveAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void SetMenuDecOfPanel(class UTextBlock* InTextPanel, int InValue, int InFig, bool bIsSign);
	bool SetLoaddedTextureFromId(class UJackUMGAsyncLoad* InAsyncLoad, class UImage* InImagePanel, int InUniqueId);
	void SetIsForceHilite(bool bIsHilite);
	void SetIsFocusableWindow(bool IsFocusable);
	void SetDefaultPosition(const struct FVector2D& InPosition);
	void SetChildWidget(class UJackUMGWidgetBase* InChildWidget);
	void SetCharacterSpacingToTextBlockArray(TArray<class UTextBlock*> InTextBlockArray, float InSpacing);
	bool SetAnimSetOfPanel(class UWidget* InPanel, int InGroup, const struct FJackUMGAnimSet& InAnimSet);
	bool SetAnimSet(int InGroup, const struct FJackUMGAnimSet& InAnimSet, bool bInNotCancel);
	void SetAnimDelegate(int InGroup, const struct FScriptDelegate& InDelegate);
	void SetAnimDelay(int InGroup, float DelayTime, bool bInNotCancel);
	void SetAlphaToAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, float End);
	void SetAlphaToAnim(int InGroup, class UCurveFloat* InCurve, float End);
	void SetAlphaAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, float Start, float End);
	void SetAlphaAnim(int InGroup, class UCurveFloat* InCurve, float Start, float End);
	class UTexture2D* SelectTexture(TArray<class UTexture2D*> TexList, int Select, class UWidget* InImagePanel);
	void RepositionLayout();
	void RemoveWidget();
	void PlayUISoundWithParam(class USoundBase* InSoundBase, int MonophonicId, float InVolume, float InPitch, float InStartTime);
	void PlayUISound(class USoundBase* InSoundBase, int MonophonicId);
	void OffsetDefaultPosition(const struct FVector2D& InOffset);
	void MakeWidgePanelArray(class UCanvasPanel* InCanvesPanel, TArray<class UWidget*>* OutWidgePanelArray);
	void MakeTextPanelArray(class UCanvasPanel* InCanvesPanel, TArray<class UTextBlock*>* OutTextPanelArray);
	void MakeTextBlockArray(class UCanvasPanel* InCanvesPanel, TArray<class UTextBlock*>* InTextBlockArray);
	struct FName MakeShopMenuTextID(const struct FString& BaseTextID);
	void MakeImagePanelArray(class UCanvasPanel* InCanvesPanel, TArray<class UImage*>* OutImagePanelArray);
	void JackOnUMGWidgetNotificationDelegate__DelegateSignature(const struct FName& InEventTag, class UJackUMGWidgetBase* InCallWidgetBase, class UObject* InObject);
	void JackOnUMGWidgetKeyEventDelegate__DelegateSignature(TEnumAsByte<EJackKeys> InKeyType, bool bIsPressed);
	void JackOnUMGWidgetBPActionDelegate__DelegateSignature(const struct FName& EventTag);
	bool IsWidgetActive();
	bool IsReverseEnterCancelButton();
	bool IsRemovingWidget();
	bool IsInitWidget();
	bool IsInFocus();
	bool IsFocusWidget();
	bool IsConstructed();
	bool IsClosed();
	void InitWidget(int ZOrder);
	struct FVector2D GetWidgetScale();
	struct FVector2D GetWidgetPosition();
	TArray<class UJackUMGWidgetBase*> GetWidgetBaseListFromCanvasPanel(class UCanvasPanel* InCanvasPanel);
	float GetWidgetAlpha();
	struct FText GetTextFromTextId(const struct FName& TextID);
	TEnumAsByte<EJackUMGTextColorSet> STATIC_GetTextColorTypeHPRate(float HPRate);
	TEnumAsByte<EJackUMGTextColorSet> STATIC_GetTextColorTypeHP(int HP, int MaxHP);
	struct FVector2D STATIC_GetPanelSize(class UWidget* InPanel);
	struct FVector2D STATIC_GetPanelScale(class UWidget* InPanel);
	struct FVector2D STATIC_GetPanelPosition(class UWidget* InPanel);
	class UWidget* GetPanelFromName(const struct FName& InPanelName);
	struct FLinearColor GetPanelColor(class UWidget* InPanel);
	float STATIC_GetPanelAlpha(class UWidget* InPanel);
	int GetMenuMessageSelectIndex();
	struct FJackKeyStatus GetKeyStatus();
	class UJackUMGItemBase* GetItemBaseFromItemId(const struct FName& InItemId);
	int STATIC_GetInvalidZOrderValue();
	struct FString GetDecMessageString(int InValue, int InFig, bool IsSign);
	struct FText GetDecMenuTextWithUnit(int InValue, int InFig, bool IsSign, const struct FName& InUnitTextId);
	struct FText GetDecMenuText(int InValue, int InFig, bool IsSign);
	class UJackUMGWidgetBase* GetChildWidget();
	class UJackUMGAccessorShop* GetAccessorShop();
	class UJackUMGAccessorSenreki* GetAccessorSenreki();
	class UJackUMGAccessorSaveData* GetAccessorSaveData();
	class UJackUMGAccessorMembers* GetAccessorMembers();
	class UJackUMGAccessorItem* GetAccessorItem();
	class UJackUMGAccessorFusigiKazi* GetAccessorFusigiKazi();
	class UJackUMGAccessorCoordinate* GetAccessorCoordinate();
	class UJackUMGAccessorCommon* GetAccessorCommon();
	class UJackUMGAccessorBattle* GetAccessorBattle();
	void FocusSelfWidget();
	void FinishHideWindowDelegate();
	class UTextBlock* FindChildTextBlock(bool bWarningIfDontFind);
	TEnumAsByte<EJackKeys> ExchangeFaceButtonToEnterCancel(TEnumAsByte<EJackKeys> InKeyType);
	void EndAnimation();
	void EnableKeyReleasedEvent(bool bEnable);
	void EnableKeyPressedEvent(bool bEnable);
	void EnableKeyEvent(bool bEnable);
	void DoWidgetNotificationDelegate(const struct FName& EventTag, class UObject* InObject, class UJackUMGWidgetBase* InCallWidgetBase);
	void DoWidgetBPActionDelegate(const struct FName& EventTag, const struct FName& InTargetWidgetName);
	void DoEnterEvent();
	void DoCancelEvent();
	void DispMessageWithTextIdAndIndex(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& InTextId, TArray<struct FJackMessageArgumentData> InTagList, int DefaultIndex);
	void DispMessageWithTextId(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& InTextId, TArray<struct FJackMessageArgumentData> InTagList);
	void DispMenuMessageWithTextIdAndIndex(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& InTextId, TArray<struct FJackMessageArgumentData> InTagList, int DefaultIndex);
	void DispMenuMessageWithTextId(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& InTextId, TArray<struct FJackMessageArgumentData> InTagList);
	void DispMenuMessageWithString(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FString& inString, TArray<struct FJackMessageArgumentData> InTagList, int DefaultIndex, bool bPlayPipipiSound);
	void DispMenuMessageWithDebug(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FString& inString, TArray<struct FJackMessageArgumentData> InTagList, int DefaultIndex, bool bPlayPipipiSound);
	void DebugFunction(int InDebugValue, const struct FString& InDebugText);
	TArray<class UTextBlock*> STATIC_CreateRubyTextBlockStatic(const struct FText& InText, class UTextBlock* InTextBlock, class UTextBlock* InRefRubyTextBlock, class UPanelWidget* InParentPanel);
	TArray<class UTextBlock*> CreateRubyTextBlock(const struct FText& InText, class UTextBlock* InTextBlock, class UTextBlock* InRefRubyTextBlock, class UPanelWidget* InParentPanel);
	void CheckWidgetPosition();
	void CancelAnimation();
	struct FVector2D AdjustScreenPosition(const struct FVector2D& InPosition);
	void AddPanel(class UWidget* InPanel, class UUserWidget* AddChild);
};


// Class JackGame.JackMiniGameEffectEmitter
// 0x0080 (0x03F0 - 0x0370)
class UJackMiniGameEffectEmitter : public UJackUMGWidgetBase
{
public:
	float                                              EmitterLifeTime;                                          // 0x0370(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                GenerateNum;                                              // 0x0374(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParticleGenerateTime;                                     // 0x0378(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                GenerateCount;                                            // 0x037C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LifeTime;                                                 // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LifeTimeRange;                                            // 0x0384(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VelocityScale;                                            // 0x0388(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VelocityScaleRange;                                       // 0x038C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StartScale;                                               // 0x0390(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StartScaleRange;                                          // 0x0394(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EndScale;                                                 // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Damping;                                                  // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleVelocity;                                            // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleVelocityRange;                                       // 0x03A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleDamping;                                             // 0x03A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StartAlpha;                                               // 0x03AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EndAlpha;                                                 // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	TArray<class UClass*>                              Class;                                                    // 0x03B8(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class UJackMiniGameEffectParticle>> ParticleList;                                             // 0x03C8(0x0010) (ExportObject, ZeroConstructor)
	int                                                ZOrder;                                                   // 0x03D8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x03DC(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectEmitter");
		return ptr;
	}


	void Update(float DeltaSeconds);
	void Stop(bool bIsForceDelete);
	void Start();
	void SetParticleGenerateTime(float InParticleGenerateTime);
};


// Class JackGame.JackMiniGameEffectEmitterEllipse
// 0x0028 (0x0418 - 0x03F0)
class UJackMiniGameEffectEmitterEllipse : public UJackMiniGameEffectEmitter
{
public:
	struct FVector2D                                   CenterPosition;                                           // 0x03F0(0x0008) (Edit, IsPlainOldData)
	float                                              InnerWidth;                                               // 0x03F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InnerHeight;                                              // 0x03FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OuterWidth;                                               // 0x0400(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OuterHeight;                                              // 0x0404(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Angle;                                                    // 0x0408(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleRange;                                               // 0x040C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSphereEmitter;                                           // 0x0410(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0411(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectEmitterEllipse");
		return ptr;
	}


	void SetCenterPosition(const struct FVector2D& InPosition);
};


// Class JackGame.JackMiniGameEffectEmitterPlane
// 0x0010 (0x0400 - 0x03F0)
class UJackMiniGameEffectEmitterPlane : public UJackMiniGameEffectEmitter
{
public:
	struct FVector2D                                   GeneratePosition;                                         // 0x03F0(0x0008) (Edit, IsPlainOldData)
	float                                              GenerateSize;                                             // 0x03F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Angle;                                                    // 0x03FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectEmitterPlane");
		return ptr;
	}

};


// Class JackGame.JackMiniGameEffectEmitterPoint
// 0x0010 (0x0400 - 0x03F0)
class UJackMiniGameEffectEmitterPoint : public UJackMiniGameEffectEmitter
{
public:
	struct FVector2D                                   GeneratePosition;                                         // 0x03F0(0x0008) (Edit, IsPlainOldData)
	float                                              Angle;                                                    // 0x03F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleRange;                                               // 0x03FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectEmitterPoint");
		return ptr;
	}

};


// Class JackGame.JackMiniGameEffectEmitterRect
// 0x0020 (0x0410 - 0x03F0)
class UJackMiniGameEffectEmitterRect : public UJackMiniGameEffectEmitter
{
public:
	struct FVector2D                                   GeneratePosition;                                         // 0x03F0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   GenerateSize;                                             // 0x03F8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   InitialVelocity;                                          // 0x0400(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   InitialVelocityRange;                                     // 0x0408(0x0008) (Edit, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectEmitterRect");
		return ptr;
	}

};


// Class JackGame.JackMiniGameEffectEmitterSphere
// 0x0010 (0x0400 - 0x03F0)
class UJackMiniGameEffectEmitterSphere : public UJackMiniGameEffectEmitter
{
public:
	struct FVector2D                                   CenterPosition;                                           // 0x03F0(0x0008) (Edit, IsPlainOldData)
	float                                              InnerRadius;                                              // 0x03F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OuterRadius;                                              // 0x03FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectEmitterSphere");
		return ptr;
	}

};


// Class JackGame.JackMiniGameEffectParticle
// 0x0038 (0x03A8 - 0x0370)
class UJackMiniGameEffectParticle : public UJackUMGWidgetBase
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0370(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameEffectParticle");
		return ptr;
	}

};


// Class JackGame.JackMiniGameInputActor
// 0x0020 (0x03B8 - 0x0398)
class AJackMiniGameInputActor : public AActor
{
public:
	class UClass*                                      UIInputSettingsClass;                                     // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UJackUIInputSettings*                        UIInputSettings;                                          // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUIInputManager*                         InputManager;                                             // 0x03A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameInputActor");
		return ptr;
	}


	void UnbindKeys(class APlayerController* PlayerController);
	bool IsKeyRepeated(TEnumAsByte<EJackKeys> InKey);
	bool IsKeyReleased(TEnumAsByte<EJackKeys> InKey);
	bool IsKeyPressed(TEnumAsByte<EJackKeys> InKey);
	bool IsKeyDown(TEnumAsByte<EJackKeys> InKey);
	void ClearKeyEventQueue();
	void BindKeyRoulette(class APlayerController* PlayerController);
	void BindKeyMiniGameDefault(class APlayerController* PlayerController);
	void BindKeyMeosiSlot(class APlayerController* PlayerController);
};


// Class JackGame.JackMiniGameJackPotAccessor
// 0x0020 (0x0058 - 0x0038)
class UJackMiniGameJackPotAccessor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0038(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameJackPotAccessor");
		return ptr;
	}


	void RemoveDebugMenu();
	bool IsQuestSession();
	TEnumAsByte<EJackMiniGameJackPot> GetJackPotTypeFromActiveMapID();
	TEnumAsByte<EJackMiniGameJackPotState> GetJackPotState();
	int GetJackPotDisplayNum();
	void CheckJackpotCoin();
	int CalcDividend(TEnumAsByte<EJackMiniGameJackPotMachine> InMachineType, TEnumAsByte<EJackMiniGameTableCoinType> InCoinType, bool bIsFractionRandom);
	void ApplyQuestFlag();
	void ApplyJackPotDisplayNum();
	void AddDebugMenu();
};


// Class JackGame.JackMiniGameManager
// 0x0050 (0x0088 - 0x0038)
class UJackMiniGameManager : public UObject
{
public:
	class UClass*                                      UmaRaceAccessorClass;                                     // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RouletteAccessorClass;                                    // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MeosiSlotAccessorClass;                                   // 0x0048(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      JackPotAccessorClass;                                     // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsUpdateOneDay;                                          // 0x0058(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET
	class UJackUmaRaceAccessor*                        UmaRaceAccessor;                                          // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackRouletteAccessor*                       RouletteAccessor;                                         // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackMeosiSlotAccessor*                      MeosiSlotAccessor;                                        // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackMiniGameJackPotAccessor*                JackPotAccessor;                                          // 0x0078(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameManager");
		return ptr;
	}


	void UpdateOneDay();
	void SetUpdateOneDay(bool bIsUpdate);
	void SetResolutionChange(bool InResolutionChange);
	void SetCasinoCoin(int Coin);
	void RestoreResolutionChange(class UObject* WorldContextObject);
	void ResolutionChange(class UObject* WorldContextObject);
	void RequestIncrementalGarbageCollection(class UObject* WorldContextObject, bool bImmidiate);
	void RequestGarbageCollection(class UObject* WorldContextObject, bool bIsImmidiate);
	void RemoveDebugMenu();
	bool IsUpdateDayFlag();
	bool IsResolutionChange();
	bool IsMiniGamePlaying();
	bool IsMamonoCasino();
	void IncrementJackPotCoinNum(int InCoinNum);
	class UJackUmaRaceAccessor* GetUmaRaceAccessor();
	class UJackRouletteAccessor* GetRouletteAccessor();
	class UJackMeosiSlotAccessor* GetMeosiSlotAccessor();
	TEnumAsByte<EJackMiniGameJackPotLevel> GetJackPotLevel();
	int GetJackPotCoinNum();
	class UJackMiniGameJackPotAccessor* GetJackPotAccessor();
	int GetCasinoCoinMax();
	int GetCasinoCoin();
	void DisableUpdateDayFlag();
	void CreateInstances();
	void ApplyCasinoArchievement();
	void AddDebugMenu();
};


// Class JackGame.JackMiniGamePoker
// 0x0040 (0x03E0 - 0x03A0)
class AJackMiniGamePoker : public AJackMiniGameBase
{
public:
	unsigned char                                      SelectCard;                                               // 0x03A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      WinningCard;                                              // 0x03A1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      TreasureBoxCard;                                          // 0x03A2(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03A3(0x0005) MISSED OFFSET
	TArray<class UTexture*>                            CardTextures;                                             // 0x03A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x11];                                      // 0x03B8(0x0011) MISSED OFFSET
	bool                                               bDebugTreasureItem;                                       // 0x03C9(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03CA(0x0002) MISSED OFFSET
	int                                                DebugItemIndex;                                           // 0x03CC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DebugBetTimes;                                            // 0x03D0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DebugDoubleUpTimes;                                       // 0x03D4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugAutoPlayMode;                                       // 0x03D8(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugOutputLog;                                          // 0x03D9(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDisp;                                               // 0x03DA(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x03DB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGamePoker");
		return ptr;
	}


	void UnloadTextures();
	void SetupTreasureBox_SelectCard(TEnumAsByte<EJackPokerTreasureBox> InTreasureBox);
	void SetupTreasureBox_BaseCard(TEnumAsByte<EJackPokerTreasureBox> InTreasureBox);
	void SetInvalidCard(int HandIndex);
	void ReplaceHandCard(int SelectIndex);
	void LoadTextures();
	int JudgePokerDoubleUpResult(int HandIndex);
	bool IsValidCard(int HandIndex);
	void InitTreasureItemGetCounter(TArray<struct FName> RedItemName, TArray<struct FName> BlackItemName, TArray<struct FName> GoldItemName);
	void InitializePokerGame(TEnumAsByte<EJackPokerHand> HandKind);
	void InitializeDoubleupGame(TEnumAsByte<EJackPokerDoubleUpResult> InDoubleUpResult, int InNumDoubleUp);
	void InitDebugTreasureGetCounter(TEnumAsByte<EJackPokerTreasureBox> BoxType, TArray<struct FName> ItemNameTable, int ListStartIndex);
	struct FName GetWinMEID_Hand(TEnumAsByte<EJackPokerHand> HandType);
	struct FName GetWinMEID_DoubleUp(int DoubleUpCount);
	struct FName GetWinMEID(TEnumAsByte<EJackPokerBetUnit> InBetUnit, int InDividedCoin);
	TEnumAsByte<EJackPokerTreasureBox> GetTreasureBoxType(unsigned char CardNo);
	int GetSelectIndexDoubleupGame(int SelectIndex, TEnumAsByte<EJackPokerSign> Sign);
	int GetNumValidCard();
	int GetNumTreasureBoxKey(TEnumAsByte<EJackPokerTreasureBox> InTreasureBox);
	float GetNumTreasureBoxCoin(TEnumAsByte<EJackPokerTreasureBox> InTreasureBox);
	int GetNumInexpensiveCoinDivisor(TEnumAsByte<EJackPokerBetUnit> InBetUnit);
	struct FJackPokerHandInfo GetHandInfo();
	int GetHandDividendCoin(TEnumAsByte<EJackPokerHand> HandKind);
	unsigned char GetHandCardNo(int HandIndex);
	int GetDoubleUpMax();
	class UTexture* GetCardTexture(int CardID);
	unsigned char GetCardDeckNo(int Index);
	int GetBetMax();
	unsigned char ExchangeHandCard(int HandIndex);
	bool DecideWinOrLose(TEnumAsByte<EJackPokerBetUnit> InBetUnit);
	TEnumAsByte<EJackPokerTreasureBox> DecideTreasureBoxType(TEnumAsByte<EJackPokerBetUnit> InBetUnit);
	bool DecideTreasureBoxAppearance_SelectCard(TEnumAsByte<EJackPokerBetUnit> InBetUnit);
	bool DecideTreasureBoxAppearance_BaseCard(TEnumAsByte<EJackPokerBetUnit> InBetUnit, int InNumDoubleUp);
	TEnumAsByte<EJackPokerHand> DecidePokerHand();
	TEnumAsByte<EJackPokerDoubleUpResult> DecidePokerDoubleUpResult(TEnumAsByte<EJackPokerBetUnit> InBetUnit, int InNumDoubleUp);
	TEnumAsByte<EJackPokerCardNumber> DecideBaseCardNumber(TEnumAsByte<EJackPokerDoubleUpResult> InDoubleUpResult, int InNumDoubleUp);
	void DebugOutputTreasureLog(TArray<int> TreasureBoxCounterData);
	void AddTreasureItemGetCounter(TEnumAsByte<EJackPokerTreasureBox> BoxType, int BoxIndex);
};


// Class JackGame.JackMiniGameRoulette
// 0x0038 (0x03D8 - 0x03A0)
class AJackMiniGameRoulette : public AJackMiniGameBase
{
public:
	TEnumAsByte<EJackMiniGameJackPot>                  JackPotType;                                              // 0x03A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03A1(0x0003) MISSED OFFSET
	int                                                Coin;                                                     // 0x03A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                CoinMax;                                                  // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	class AJackMiniGameRouletteMainGame*               MainGame;                                                 // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackMiniGameRouletteMainMenu*               MainMenu;                                                 // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03C0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameRoulette");
		return ptr;
	}


	void SetInstance(class AJackMiniGameRouletteMainGame* InGame, class AJackMiniGameRouletteMainMenu* InMenu);
	int GetJackPotCoinNum();
	struct FJackRouletteGameInfo GetGameInfo();
	void ApplyGameInfo();
};


// Class JackGame.JackMiniGameRouletteMainGame
// 0x0048 (0x03E0 - 0x0398)
class AJackMiniGameRouletteMainGame : public AActor
{
public:
	bool                                               bIsStateChanged;                                          // 0x0398(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0399(0x0003) MISSED OFFSET
	int                                                JackPotNearRange;                                         // 0x039C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsJackPotNear;                                           // 0x03A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3F];                                      // 0x03A1(0x003F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameRouletteMainGame");
		return ptr;
	}


	void StartPlay(int Number, bool bIsJackPot);
	void SetState(TEnumAsByte<EJackMiniGameRouletteGameState> State);
	void SetGameInfo(const struct FJackRouletteGameInfo& InGameInfo);
	void ResetGame();
	bool IsJackPotLottey();
	bool IsEnd();
	void InitializeInstance(class AJackRouletteWheel* Wheel, class AJackRouletteBall* Ball);
	TEnumAsByte<EJackMiniGameRouletteGameState> GetState();
	int GetResultNumber();
	TEnumAsByte<EJackMiniGameRouletteEffect> GetEffectType();
	TArray<int> GetBetNumberArray();
	int GetBetMagnification(int Number);
};


// Class JackGame.JackMiniGameRouletteMainMenu
// 0x00B0 (0x0468 - 0x03B8)
class AJackMiniGameRouletteMainMenu : public AJackMiniGameInputActor
{
public:
	int                                                CursorX;                                                  // 0x03B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                CursorY;                                                  // 0x03BC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                Coin;                                                     // 0x03C0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	TArray<int>                                        ResultNumberHistory;                                      // 0x03C8(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	int                                                ResultNumber;                                             // 0x03D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DevideCoin;                                               // 0x03DC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                JackPotDevideCoin;                                        // 0x03E0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TotalDevideCoin;                                          // 0x03E4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsStateChanged;                                          // 0x03E8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03E9(0x0003) MISSED OFFSET
	struct FVector2D                                   CoinMoveTargetPos;                                        // 0x03EC(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	bool                                               bIsResultJackPot;                                         // 0x03F4(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMiniGameTableCoinType>            CoinTableType;                                            // 0x03F5(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x03F6(0x0002) MISSED OFFSET
	float                                              EaseSpeed;                                                // 0x03F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	class USoundBase*                                  SoundCoinUp2;                                             // 0x0400(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundCoinMoved;                                           // 0x0408(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundGetCoin;                                             // 0x0410(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CoinUpSoundTime;                                          // 0x0418(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CoinUpCurrentRatio;                                       // 0x041C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CoinMoveSpeed;                                            // 0x0420(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              KeyRepeatTime;                                            // 0x0424(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CoinRepeatTime;                                           // 0x0428(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x14];                                      // 0x042C(0x0014) MISSED OFFSET
	class UDataTable*                                  DT_Roulette;                                              // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0448(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameRouletteMainMenu");
		return ptr;
	}


	void UpdateInput(const struct FScriptDelegate& InDelegate, float DeltaTime);
	void StartPlay();
	void SetState(TEnumAsByte<EJackMiniGameRouletteMenuSequenceEnum> InState);
	void SetGameData(int ResultNumber, bool bIsJackPot);
	void SetCoinTableType(TEnumAsByte<EJackMiniGameTableCoinType> InType);
	void RemoveResultCoin();
	void NativeEventResultCoinUpUpdate(float DeltaTime);
	void NativeEventResultCoinUp();
	void JackMiniGameRouletteInputDelegate__DelegateSignature(const struct FName& InEventTag);
	bool IsJackPotOnlyLottey();
	bool IsIncludeBetNumber();
	bool IsCoinRepeat();
	bool IsCasinoCoinMax();
	void InitializeInstance(class AJackRouletteMenu* Menu);
	struct FName GetWinMEID(int InCoin);
	int GetTotalWinCoin();
	int GetTotalRestCoin();
	TEnumAsByte<EJackMiniGameRouletteMenuSequenceEnum> GetState();
	TArray<class UJackUMGWidgetBase*> GetRemoveCoinWidgetArray();
	int GetOneBetCoinNum();
	TArray<struct FJackRouletteBetCoinSaveData> GetMenuSaveData();
	TArray<int> GetHistoryArray();
	void EventDebugBetCoin(TArray<struct FJackMiniGameRouletteDebugBetCoinInfo> BetCoinInfo);
	bool CalcJackPotLottey(int* OutResultNumber);
	void ApplyJackPotPayoutNum();
	void ApplyDevideCoin();
};


// Class JackGame.JackMiniGameSlot
// 0x0020 (0x03C0 - 0x03A0)
class AJackMiniGameSlot : public AJackMiniGameBase
{
public:
	int                                                Coin;                                                     // 0x03A0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                CoinMax;                                                  // 0x03A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMiniGameTableCoinType>            CoinTableType;                                            // 0x03A8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	TArray<int>                                        DefaultReelNumberArray;                                   // 0x03B0(0x0010) (Edit, BlueprintVisi, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameSlot");
		return ptr;
	}

};


// Class JackGame.JackMiniGameSlotMain
// 0x0098 (0x0450 - 0x03B8)
class AJackMiniGameSlotMain : public AJackMiniGameInputActor
{
public:
	int                                                Coin;                                                     // 0x03B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackSlotGameState>                    State;                                                    // 0x03BC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMiniGameTableCoinType>            CoinTableType;                                            // 0x03BD(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03BE(0x0002) MISSED OFFSET
	int                                                MetalChangeNum;                                           // 0x03C0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                FreeSpinNum;                                              // 0x03C4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UClass*                                      ReelsClass;                                               // 0x03C8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FJackSlotStartInfo                          StartInfo;                                                // 0x03D0(0x000B) (Edit, BlueprintVisi)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03DB(0x0001) MISSED OFFSET
	int                                                QueenSlimeProbability;                                    // 0x03DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                TreasureBoxCoin;                                          // 0x03E0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DividendWorkCoin;                                         // 0x03E4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundCoinUpN;                                             // 0x03E8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SoundCoinUpTime;                                          // 0x03F0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CurrentCoinUpRatio;                                       // 0x03F4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MamonoJackPotPercent;                                     // 0x03F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DividendCoin;                                             // 0x03FC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                MamonoCasinoJackPotDividend1;                             // 0x0400(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                MamonoCasinoJackPotDividend10;                            // 0x0404(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                MamonoCasinoJackPotDividend100;                           // 0x0408(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	class AJackMiniGameSlotReels*                      Reels;                                                    // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x0418(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameSlotMain");
		return ptr;
	}


	bool UpdateInputBetCoin(const struct FScriptDelegate& InDelegate);
	bool UpdateCoinCountUp(float DeltaTime);
	void ResetStartInfo();
	void JackMiniGameSlotInputDelegate__DelegateSignature(const struct FName& InEventTag);
	bool IsSkipDemo();
	bool IsResultWin();
	bool IsQueenSlime();
	bool IsMetalChange();
	bool IsIncludeMetalSpinHand();
	bool IsIncludeFreeSpinHand();
	bool IsHaveCoinMax();
	bool IsFreeSpin();
	void InitializeReels(class AJackMiniGameSlotReels* InReels);
	struct FName GetWinMEID(int InCoin, bool bTreasureBox);
	int GetSetNumber();
	int GetResultHitCount(TArray<struct FJackSlotResultInfo> InResults);
	TArray<int> GetReelNumberArray();
	int GetOneBetCoin();
	TArray<int> GetLineBetCoin();
	int GetJackPotDivided();
	int GetBetCoinNum();
	void DoDecideKeyEvent();
	bool DecBetCoin();
	void CoinCountUpInit();
	void ClearTreasureBoxCoin();
	int ClampDividendCoin(int InDividendCoin);
	int CalcTreasureBoxCoin();
	int CalcResultMetalChange();
	int CalcResultFreeSpin();
	int CalcRestCoin();
	int CalcDividend();
	int CalcBetCoin();
	bool Calc1StLottey();
	bool ApplyWinCoin(bool bTreasureBoxCoin);
	void ApplyTresureBoxCoin();
	void ApplyStartInfo(bool bIs1STLottey);
	void ApplyResult();
	bool ApplyMetalChangeNum();
	void ApplyLoseCoin();
	bool ApplyFreeSpinNum();
	void ApplyDividendCoin(int InCoin);
	void ApplyBetCoin();
	void AdjustBetCoinNum();
	bool AddBetCoin();
};


// Class JackGame.JackMiniGameSlotPicture
// 0x0038 (0x03D0 - 0x0398)
class AJackMiniGameSlotPicture : public AActor
{
public:
	bool                                               bIsMetalChange;                                           // 0x0398(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMiniGameSlotHand>                 ActiveType;                                               // 0x0399(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x36];                                      // 0x039A(0x0036) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameSlotPicture");
		return ptr;
	}


	TEnumAsByte<EJackMiniGameSlotHand> ToNormalType(TEnumAsByte<EJackMiniGameSlotHand> InType);
	void SetActiveMesh(class USkeletalMeshComponent* InMesh);
	void SetActionDelegate(const struct FScriptDelegate& InActionDelegate);
	void NativeEventOnInitialize();
	void JackMiniGameSlotActionDelegate__DelegateSignature(const struct FName& InEventTag, int ReelLineNumber, int ReelColNumber);
	bool IsAngelChanged();
	TEnumAsByte<EJackMiniGameSlotHand> GetType(bool bAngelChange);
	TEnumAsByte<EJackMiniGameSlotHand> GetAngelChangeType();
	class USkeletalMeshComponent* GetActiveMesh();
	void ApplyActiveType();
};


// Class JackGame.JackMiniGameSlotReel
// 0x00A8 (0x0440 - 0x0398)
class AJackMiniGameSlotReel : public AActor
{
public:
	int                                                ReelNumber;                                               // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                OnePictureSize;                                           // 0x039C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ReelOffset;                                               // 0x03A0(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 RollInCurve;                                              // 0x03B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UCurveFloat*>                         RollOutCurves;                                            // 0x03B8(0x0010) (Edit, ZeroConstructor)
	float                                              FreeRollTimeMax;                                          // 0x03C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FreeRollTime2ndMax;                                       // 0x03CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AddOverFreeRollTime;                                      // 0x03D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxVelocity;                                              // 0x03D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ReelAnimIndexOffset;                                      // 0x03D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpawnLocationY;                                           // 0x03DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RollEndInterpolationSpeed;                                // 0x03E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5C];                                      // 0x03E4(0x005C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameSlotReel");
		return ptr;
	}


	void SetReelManager(class AJackMiniGameSlotReels* InReelManager);
	void Initialize(class UClass* Class, int InReelNumber);
	TArray<class AJackMiniGameSlotPicture*> GetReelArray();
};


// Class JackGame.JackMiniGameSlotReels
// 0x0058 (0x03F0 - 0x0398)
class AJackMiniGameSlotReels : public AActor
{
public:
	float                                              StartDelayTime;                                           // 0x0398(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x34];                                      // 0x039C(0x0034) MISSED OFFSET
	TArray<int>                                        ReelIndexOffset;                                          // 0x03D0(0x0010) (ZeroConstructor)
	TArray<struct FJackMiniGameSlotAnimAssetList>      AnimAssetLists;                                           // 0x03E0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameSlotReels");
		return ptr;
	}


	void StopAnimationAll(bool bForce, bool bIgoneAngleSlime);
	void StartWin();
	void StartReach();
	void StartQueenSlime(const struct FScriptDelegate& InDelegate);
	bool StartAngelChange();
	void StartAlignAnim();
	void Start(const struct FScriptDelegate& InDelegate, int InBetCoinNum);
	bool ResetAngelChange();
	bool ReelStopCheck();
	void JackMiniGameSlotEventDelegate__DelegateSignature(const struct FName& InEventTag);
	void Initialize(TArray<class AJackMiniGameSlotReel*> inArray, TArray<int> InReelNumberArray);
	int GetQueenSlimeReelIndex();
	TArray<struct FJackSlotResultInfo> GetLastReelResult(bool bIgnoreNoBetLine);
	TArray<struct FJackSlotResultInfo> GetActiveReelResult(bool bIsQueenSlime, bool bIgnoreNoBetLine);
};


// Class JackGame.JackMiniGameTriggerBase
// 0x0038 (0x03D0 - 0x0398)
class AJackMiniGameTriggerBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0398(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackMiniGameTriggerBase.MiniGameAssetClass
	unsigned char                                      UnknownData01[0x8];                                       // 0x03B0(0x0008) MISSED OFFSET
	int                                                BaseCoinMagnification;                                    // 0x03B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackMiniGameKind>                     GameKind;                                                 // 0x03BC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x03BD(0x0001) MISSED OFFSET
	TEnumAsByte<EJackMiniGameTableCoinType>            TableCoinType;                                            // 0x03BE(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x03BF(0x0001) MISSED OFFSET
	class UJackInteractiveActorComponent*              InteractiveActorComponent;                                // 0x03C0(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AJackTripleManager>           TripleManagerForCall;                                     // 0x03C8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniGameTriggerBase");
		return ptr;
	}


	void RequestExitMiniGame();
	void RequestCreateMiniGame();
	void OnStartFromTriple(class AJackTripleManager* StartPawn);
	TEnumAsByte<EJackMiniGameTableCoinType> GetTableCoinType();
	int GetNeedCoinNum();
	class UJackInteractiveActorComponent* GetInteractiveActorComponent();
	void ExitMiniGame();
	void CreateMiniGame_Start();
	void CreateMiniGame_End();
};


// Class JackGame.JackMiniMapCameraComponent
// 0x0018 (0x0140 - 0x0128)
class UJackMiniMapCameraComponent : public UActorComponent
{
public:
	struct FName                                       MapIDOverride;                                            // 0x0128(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackFloorArea                                     FloorArea;                                                // 0x0130(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bClippingEnabled;                                         // 0x0131(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	struct FVector2D                                   ClippingOrthoSize;                                        // 0x0134(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniMapCameraComponent");
		return ptr;
	}

};


// Class JackGame.JackMiniMapTargetComponent
// 0x0020 (0x0148 - 0x0128)
class UJackMiniMapTargetComponent : public UActorComponent
{
public:
	EJackFloorLevel                                    FloorLevel;                                               // 0x0128(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackFloorArea                                     FloorArea;                                                // 0x0129(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackMapSymbol                                     MapSymbol;                                                // 0x012A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bMapSymbolVisible;                                        // 0x012B(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   WorldMapDrawOffset;                                       // 0x012C(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              WorldMapDrawScale;                                        // 0x0134(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   MiniMapDrawOffset;                                        // 0x0138(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              MiniMapDrawScale;                                         // 0x0140(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0144(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMiniMapTargetComponent");
		return ptr;
	}

};


// Class JackGame.JackModeChangeManager
// 0x26D0 (0x2708 - 0x0038)
class UJackModeChangeManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x26D0];                                    // 0x0038(0x26D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackModeChangeManager");
		return ptr;
	}


	void SetTenseiId(const struct FName& TenseiId);
	void SetLoadedModeChagneTypeFukkatu2D();
	void SetFukkatunojumonId(unsigned char InRevivalPointId, unsigned char InRevivalParamId);
	void SetCurrentMode(EJackModeType InModeType);
	struct FName GetTenseiId();
	struct FName GetLoadedModeChagneType();
	EJackModeType GetCurrentMode();
	TArray<struct FString> Get2DGameDataText();
	TArray<struct FString> Get2DGameDataDiffText();
	bool ApplyTenseiProcess(const struct FName& TenseiId);
};


// Class JackGame.JackMonsterAIController
// 0x00A0 (0x0620 - 0x0580)
class AJackMonsterAIController : public AJackAIController
{
public:
	class UJackMonsterFieldAIStateMachine*             FieldStateMachine;                                        // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x98];                                      // 0x0588(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterAIController");
		return ptr;
	}


	void OnReceiveMoveCompleted(const struct FAIRequestID& RequestID, TEnumAsByte<EPathFollowingResult> MovementResult);
};


// Class JackGame.JackMonsterAnimationSMComponent
// 0x0010 (0x01B0 - 0x01A0)
class UJackMonsterAnimationSMComponent : public UJackCharacterComponent
{
public:
	class UJackMonsterAnimationStateMachine*           StateMachine;                                             // 0x01A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterAnimationSMComponent");
		return ptr;
	}

};


// Class JackGame.JackMonsterAnimationStateMachine
// 0x00B8 (0x00F0 - 0x0038)
class UJackMonsterAnimationStateMachine : public UObject
{
public:
	struct FName                                       DefaultState;                                             // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       DamageState;                                              // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              DamageBlendRate;                                          // 0x0048(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bDead;                                                    // 0x004C(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bDamaging;                                                // 0x004D(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bSpecialMove;                                             // 0x004E(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x11];                                      // 0x004F(0x0011) MISSED OFFSET
	struct FName                                       OddEffectMotionID;                                        // 0x0060(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x0068(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterAnimationStateMachine");
		return ptr;
	}

};


// Class JackGame.JackMonsterAnimInstance
// 0x0060 (0x0C40 - 0x0BE0)
class UJackMonsterAnimInstance : public UJackAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x2C];                                      // 0x0BE0(0x002C) MISSED OFFSET
	float                                              TurnToIdlInitializeValue;                                 // 0x0C0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendSpaceSpeed;                                          // 0x0C10(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MovementPlayRate;                                         // 0x0C14(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              TurningPlayRate;                                          // 0x0C18(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0C1C(0x0004) MISSED OFFSET
	class UJackMonsterAnimationStateMachine*           MonsterStateMachineRef;                                   // 0x0C20(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LookAtLocation;                                           // 0x0C28(0x000C) (BlueprintVisi, BlueprintReadOnly, Transient, IsPlainOldData)
	float                                              LookAtAlpha;                                              // 0x0C34(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<EJackMonsterBattleStyle>               BattleStyle;                                              // 0x0C38(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0C39(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterAnimInstance");
		return ptr;
	}


	class UJackMonsterAnimationStateMachine* TryGetJackMonsterAnimationStateMachine();
	bool IsMovingRequest();
	TEnumAsByte<EJackMonsterMovingMode> GetMonsterMovingMode();
};


// Class JackGame.JackMonsterCharacter
// 0x0080 (0x1170 - 0x10F0)
class AJackMonsterCharacter : public AJackCharacter
{
public:
	class UJackMonsterAnimationSMComponent*            AnimSMComponent;                                          // 0x10F0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackBattleAIComponent*                      BattleAIComponent;                                        // 0x10F8(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackInteractiveActorComponent*              InteractiveActorComponent;                                // 0x1100(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackMonsterPartyLotteryComponent*           MonsterPartyLotteryComponent;                             // 0x1108(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackCharacterUIComponent*                   CharacterUIComponent;                                     // 0x1110(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1118(0x0008) MISSED OFFSET
	bool                                               bChangeVariantForm;                                       // 0x1120(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x1121(0x0007) MISSED OFFSET
	struct FName                                       MonsterResourceID;                                        // 0x1128(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackMonsterAttitudeControlSetting>    AttitudeControlSetting;                                   // 0x1130(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x1131(0x0007) MISSED OFFSET
	class UJackMonsterGameCharacter*                   MonsterGameCharacerRef;                                   // 0x1138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x30];                                      // 0x1140(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterCharacter");
		return ptr;
	}


	void SetBattleStyle(TEnumAsByte<EJackMonsterBattleStyle> InStyle);
	void OnZukanCharacterInitialize();
	void OnInteract(class AActor* OtherActor);
	void OnConstructBodyParts(class AJackMonsterCharacter* BodyParts);
	void Latent_WaitAnimationByMeshComponent(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USkeletalMeshComponent* SkeletalMesh, class UAnimMontage* AnimMontage);
	void Latent_TrackingLockOnTarget(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USkeletalMeshComponent* SkeletalMesh, const struct FTransform& RelativeTransform, float Second);
	void KillMonsterSymbol();
	TEnumAsByte<EJackMonsterBattleStyle> GetBattleStyle();
	void DetachFromActorStatic(EDetachmentRule LocationRule, EDetachmentRule RotationRule, EDetachmentRule ScaleRule);
	void ChangeVariantForm(bool bInEnable);
	void AttachToComponentStatic(class USceneComponent* Parent, const struct FName& SocketName, EAttachmentRule LocationRule, EAttachmentRule RotationRule, EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
};


// Class JackGame.JackMonsterDatabase
// 0x0058 (0x0090 - 0x0038)
class UJackMonsterDatabase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0038(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterDatabase");
		return ptr;
	}


	bool STATIC_IsValidMonsterData(struct FJackMonsterData* MonsterData);
	bool STATIC_IsValidDTMonsterRow(struct FJackDataTableMonster* DTMonsterRow);
	bool STATIC_IsValidDTMonsterDropRow(struct FJackDataTableMonsterDrop* DTMonsterDropRow);
	bool STATIC_IsValidDTMonsterBattleAIRow(struct FJackDataTableMonsterBattleAI* DTMonsterBattleAIRow);
	struct FName GetMonsterDisplayName(const struct FName& MonsterID);
	struct FJackMonsterData GetMonsterData(const struct FJackLDT_Monster& LDT_Monster);
	struct FJackDataTableMonster STATIC_GetDTMonsterRow(struct FJackMonsterData* MonsterData);
	struct FJackDataTableMonsterDrop STATIC_GetDTMonsterDropRow(struct FJackMonsterData* MonsterData);
	struct FJackDataTableMonsterBattleAI GetDTMonsterBattleAIRowByID(const struct FName& MonsterBattleAIID);
	struct FJackDataTableMonsterBattleAI STATIC_GetDTMonsterBattleAIRow(struct FJackMonsterData* MonsterData);
	struct FName STATIC_GetDTMonsterBattleAIID(struct FJackMonsterData* MonsterData);
};


// Class JackGame.JackMonsterFieldAIStateMachine
// 0x04F8 (0x0530 - 0x0038)
class UJackMonsterFieldAIStateMachine : public UObject
{
public:
	struct FJackAIStateStructs                         AIStateStructs;                                           // 0x0038(0x0038) (Edit, BlueprintVisi, BlueprintReadOnly, EditConst)
	float                                              WaitIntervalMin;                                          // 0x0070(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WaitIntervalMax;                                          // 0x0074(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WanderringRadius;                                         // 0x0078(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WanderringMoveDistance;                                   // 0x007C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              EscapeMoveDistance;                                       // 0x0080(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RushMoveDistance;                                         // 0x0084(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ChaseRadiusFromFindLocation;                              // 0x0088(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ChaseRadiusFromFindTargetLocation;                        // 0x008C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ChaseRadiusFromPopLocation;                               // 0x0090(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x49C];                                     // 0x0094(0x049C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterFieldAIStateMachine");
		return ptr;
	}

};


// Class JackGame.JackMonsterGameCharacter
// 0x0100 (0x0750 - 0x0650)
class UJackMonsterGameCharacter : public UJackGameCharacter
{
public:
	unsigned char                                      UnknownData00[0x100];                                     // 0x0650(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterGameCharacter");
		return ptr;
	}


	struct FName GetMonsterID();
	struct FJackMonsterData GetMonsterDataBP();
	struct FName GetId();
	EJackDataTableReferType GetDataTableReferType();
};


// Class JackGame.JackMonsterGeneratorComponent
// 0x0148 (0x0270 - 0x0128)
class UJackMonsterGeneratorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPopMonster;                                             // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDepopMonster;                                           // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UJackStreamObjectsHolder*                    StreamObjectsHolder;                                      // 0x0150(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackStreamObjectsHolder*                    VoiceStreamObjectsHolder;                                 // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x110];                                     // 0x0160(0x0110) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterGeneratorComponent");
		return ptr;
	}

};


// Class JackGame.JackMonsterOptimizeComponent
// 0x0050 (0x01F0 - 0x01A0)
class UJackMonsterOptimizeComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterOptimizeComponent");
		return ptr;
	}


	void OnSymbolEncountDisabled(bool bDisabled);
};


// Class JackGame.JackMonsterPartyLotteryComponent
// 0x0088 (0x01B0 - 0x0128)
class UJackMonsterPartyLotteryComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x0128(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPartyLotteryComponent");
		return ptr;
	}

};


// Class JackGame.JackMonsterPopArea
// 0x0068 (0x0438 - 0x03D0)
class AJackMonsterPopArea : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	struct FName                                       GeneratorId;                                              // 0x03D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseMonsterDeployTable;                                   // 0x03E0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03E1(0x0007) MISSED OFFSET
	class UDataTable*                                  MonsterDeployTable;                                       // 0x03E8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackDataTableMonsterDeploy>         DeployedMonsters;                                         // 0x03F0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class AJackMonsterPopVolume*>               AdditiveVolumes;                                          // 0x0400(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bActive : 1;                                              // 0x0410(0x0001) (BlueprintVisi, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	bool                                               bAddSkeletalMeshOnConstructionScriptForEditor;            // 0x0414(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDraw;                                               // 0x0415(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1A];                                      // 0x0416(0x001A) MISSED OFFSET
	class UJackMonsterGeneratorComponent*              MonsterGeneratorComponent;                                // 0x0430(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPopArea");
		return ptr;
	}


	class AJackMonsterCharacter* LoadMonsterClass(const struct FJackDataTableMonster& InDataTableMonster);
	struct FName GetMonsterDeployHeadId();
};


// Class JackGame.JackMonsterPopInterface
// 0x0000 (0x0038 - 0x0038)
class UJackMonsterPopInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPopInterface");
		return ptr;
	}


	bool OverrideMonsterDeployTable(class UDataTable* InTableAsset);
};


// Class JackGame.JackMonsterPopManager
// 0x0158 (0x04F0 - 0x0398)
class AJackMonsterPopManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x114];                                     // 0x0398(0x0114) MISSED OFFSET
	float                                              GeneratorActiveRadius;                                    // 0x04AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GeneratorActiveThresholdWidth;                            // 0x04B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04B4(0x0004) MISSED OFFSET
	TArray<struct FJackPopDistanceParams>              PopDistances;                                             // 0x04B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackPopDistanceParams>              PopDistancesDuringBattle;                                 // 0x04C8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackPopDistanceParamsByPL>          PopDistancesByPL;                                         // 0x04D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPopManager");
		return ptr;
	}


	void OnSibariSettingModify(TEnumAsByte<EJackSibari> Type, bool bFlag);
	void OnBattleInitialize(const struct FJackCommandBattleInitialize& InCommand);
	void OnBattleFinalize();
	bool IsAnnihilation();
};


// Class JackGame.JackMonsterPopPoint
// 0x0058 (0x03F0 - 0x0398)
class AJackMonsterPopPoint : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	struct FName                                       GeneratorId;                                              // 0x03A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreRaycast;                                           // 0x03A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseMonsterDeployTable;                                   // 0x03A9(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03AA(0x0006) MISSED OFFSET
	class UDataTable*                                  MonsterDeployTable;                                       // 0x03B0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackDataTableMonsterDeploy>         DeployedMonsters;                                         // 0x03B8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bActive : 1;                                              // 0x03C8(0x0001) (BlueprintVisi, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xF];                                       // 0x03C9(0x000F) MISSED OFFSET
	unsigned char                                      bAddSkeletalMeshOnConstructionScriptForEditor : 1;        // 0x03D8(0x0001) (BlueprintVisi, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0xF];                                       // 0x03D9(0x000F) MISSED OFFSET
	class UJackMonsterGeneratorComponent*              MonsterGeneratorComponent;                                // 0x03E8(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPopPoint");
		return ptr;
	}


	bool RequestToPop();
	bool RequestToAppear();
	class AJackMonsterCharacter* LoadMonsterClass(const struct FJackDataTableMonster& InDataTableMonster);
	bool IsNecessaryToPop();
	struct FName GetMonsterDeployHeadId();
};


// Class JackGame.JackMonsterPopVolume
// 0x0020 (0x03F0 - 0x03D0)
class AJackMonsterPopVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x03D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPopVolume");
		return ptr;
	}

};


// Class JackGame.JackMonsterPopZone
// 0x0080 (0x0450 - 0x03D0)
class AJackMonsterPopZone : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	struct FName                                       GeneratorId;                                              // 0x03D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRandomEncount;                                           // 0x03E0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMonsterDeployTable;                                   // 0x03E1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03E2(0x0006) MISSED OFFSET
	class UDataTable*                                  MonsterDeployTable;                                       // 0x03E8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackDataTableMonsterDeploy>         DeployedMonsters;                                         // 0x03F0(0x0010) (Edit, ZeroConstructor)
	TArray<class AJackMonsterPopVolume*>               AdditiveVolumes;                                          // 0x0400(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bActive : 1;                                              // 0x0410(0x0001) (BlueprintVisi, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	bool                                               bDebugDraw;                                               // 0x0414(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x33];                                      // 0x0415(0x0033) MISSED OFFSET
	class UJackMonsterGeneratorComponent*              MonsterGeneratorComponent;                                // 0x0448(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMonsterPopZone");
		return ptr;
	}

};


// Class JackGame.JackMoveTrackInst
// 0x0020 (0x0070 - 0x0050)
class UJackMoveTrackInst : public UInterpTrackInstMove
{
public:
	bool                                               bDefaultAdjustMeshHeightEnable;                           // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bAdjustRotateByDirection;                                 // 0x0051(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bAdjustMoveRotateInitializeFlag;                          // 0x0052(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0053(0x0001) MISSED OFFSET
	struct FRotator                                    AdjustMoveRotate;                                         // 0x0054(0x000C) (IsPlainOldData)
	float                                              LastPosition;                                             // 0x0060(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0064(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMoveTrackInst");
		return ptr;
	}

};


// Class JackGame.JackMovieTrack
// 0x0028 (0x00D0 - 0x00A8)
class UJackMovieTrack : public UJackToggleBaseTrack
{
public:
	class UMaterial*                                   MovieMaterial;                                            // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UManaTexture*                                ManaTexture;                                              // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseOrchestraMusic;                                       // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSynthesizerMusic;                                     // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableSkipVideoFrame;                                   // 0x00BA(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00BB(0x0005) MISSED OFFSET
	bool                                               bFullScreen;                                              // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSynchronizeTimeline;                                     // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableRenderInPlay;                                     // 0x00C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00C3(0x0005) MISSED OFFSET
	class UManaComponent*                              ManaComponent;                                            // 0x00C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMovieTrack");
		return ptr;
	}

};


// Class JackGame.JackMovieTrackInst
// 0x0008 (0x0048 - 0x0040)
class UJackMovieTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMovieTrackInst");
		return ptr;
	}

};


// Class JackGame.JackMusicContext
// 0x00B0 (0x00E8 - 0x0038)
class UJackMusicContext : public UObject
{
public:
	struct FScriptMulticastDelegate                    MusicStoppedDelegate;                                     // 0x0038(0x0010) (ZeroConstructor, Transient, InstancedReference)
	struct FScriptMulticastDelegate                    MusicPauseStateChangedDelegate;                           // 0x0048(0x0010) (ZeroConstructor, Transient, InstancedReference)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0058(0x0010) MISSED OFFSET
	class USoundBase*                                  SoundAssetPtr;                                            // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0070(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMusicContext");
		return ptr;
	}

};


// Class JackGame.JackMusicManager
// 0x02D8 (0x0310 - 0x0038)
class UJackMusicManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    BGMFinishedDelegate;                                      // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BGMStartedDelegate;                                       // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x70];                                      // 0x0060(0x0070) MISSED OFFSET
	TArray<class UJackMusicContext*>                   BGMStack;                                                 // 0x00D0(0x0010) (ZeroConstructor, Transient)
	class UJackMusicContext*                           WaitingNewBGM;                                            // 0x00E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackMusicContext*                           SavingNewBGM;                                             // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                                      // 0x00F0(0x0068) MISSED OFFSET
	class USoundBase*                                  BGMIDVolumeOverlapSaveBGMAsset;                           // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0160(0x0008) MISSED OFFSET
	class UJackMusicContext*                           CurrentME;                                                // 0x0168(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackMusicContext*                           WaitingNewME;                                             // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0178(0x0028) MISSED OFFSET
	TArray<EJackSEADCategory>                          PlayMEFadeCategoryList;                                   // 0x01A0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FJackMESaveCategoryVolume>           MESaveCategoryVolume;                                     // 0x01B0(0x0010) (ZeroConstructor, Transient)
	class USoundBase*                                  RegidentBattleBGMObject;                                  // 0x01C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSoftObjectPath                             RegidentBattleBGMAssetRef;                                // 0x01C8(0x0008) (Transient)
	unsigned char                                      UnknownData05[0x140];                                     // 0x01D0(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMusicManager");
		return ptr;
	}


	void WaitToPlayBGM(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void SkipBGMStartedDelegate(bool bIsSkipLatent);
	void SetWaitChangingMEToBGM(bool bIsWait);
	bool SetResidentBattleBGM(const struct FName& InBattleBGMID);
	void SetPrevBGMID(const struct FName& InPrevBGMID);
	void SetPlayingCutScene(bool IsCutScene);
	void SetPlayingBattle(bool IsBattle);
	void SetPendingPlayBGMID(const struct FName& InBGMID);
	void SetMEGapTime(float InPregapTime, float InPostgapTime);
	void SetMapCurrentMapId(const struct FName& InMapId, const struct FName& InBGMID);
	void SetFadeTimeBGMDuringME(float InFadeOutTime, float InFadeinTime);
	void SetDisableChangePlayBGMByVehicle(bool bIsDisable);
	void SetDisableChangePlayBGM(bool bIsEnable, bool bIsPengind);
	void SetCurrentBGMId(const struct FName& InMapId);
	void SetCSCurrentID(const struct FName& InCSID, const struct FName& InBGMID);
	void SetBGMVolumeOverlapSaveBGMAsset(class USoundBase* InSoundBase);
	void SetBGMLanguageType(TEnumAsByte<EJackLanguage> InBGMLanguageType);
	void SetBGMGapTime(float InPregapTime, float InPostgapTime);
	void SetBGMChanging(bool bIsChanging);
	bool OverwriteFadeOut(float InFadeOutTime);
	void OnDetectedMusicStopCompleted(class UJackMusicContext* Music);
	void OnDetectedMusicPauseStateChanged(class UJackMusicContext* Music, bool bJustPaused);
	void MusicEventDelegateLogFunc(class UJackMusicManager* InMusicManager, class UJackMusicContext* InMusicContext, EJackMusicEvent InEvent);
	void JackBGMStartedDelegate__DelegateSignature();
	void JackBGMFinishedDelegate__DelegateSignature();
	bool IsWaitingNewBGM();
	bool IsWaitChangingMEToBGMDefault();
	bool IsWaitChangingMEToBGM();
	bool IsStopFadeoutBGM();
	bool IsProcessingME();
	bool IsPlayMusic();
	bool IsPlayingCutScene();
	bool IsPlayingBattle();
	bool IsPendingPlayBGM();
	bool IsNeverPlayedBGM();
	bool IsMEPlaying();
	bool IsEqualPlayBGMAssetFromBGMID(const struct FName& InBGMID, bool bNightTime);
	bool IsDisableChangePlayBGMByVehicle();
	bool IsDisableChangePlayBGM();
	bool IsBGMVolumeOverlapping();
	bool IsBGMChanging();
	struct FString STATIC_GetVolumeTableCSVFilePath();
	struct FName GetPrevBGMID();
	struct FName GetPendingPlayBGMID();
	struct FName GetMapCurrentMapId();
	struct FName GetMapCurrentDefaultBGMId();
	struct FName GetMapCurrentBGMId();
	float GetFadeOutTimeOnSuspendBGMBeforePlayME();
	float GetFadeOutTimeOnResumeBGMAfterPlayME();
	struct FName GetCurrentBGMId();
	struct FString GetCurrentBGMAssetName();
	struct FName GetCSCurrentCSID();
	struct FName GetCSCurrentBGMID();
	class USoundBase* GetBGMVolumeOverlapSaveBGMAsset();
	struct FName GetBGMVolumeOverlapId();
	int GetBGMVolumeOverlapCount();
	void DoBGMStartedDelegate();
	void ClearStakingBGM(int NumLeaveBGM);
	void ClearBGMVolumeOverlapSaveBGMAsset();
	void BPStopMEForEmergency(float FOTime);
	void BPSetEnableInputPlayME(bool IsEnableInput);
	EJackBGMVolumeResult BGMVolumeEndOverlap(const struct FName& VolumeID);
	void BGMVolumeClearOverlap();
	EJackBGMVolumeResult BGMVolumeBeginOverlap(const struct FName& VolumeID);
	bool BGMChangeDisableEndOverlap(const struct FName& InVolumeID);
	void BGMChangeDisableClearOverlap();
	bool BGMChangeDisableBeginOverlap(const struct FName& InVolumeID);
	void AllClearBGM();
};


// Class JackGame.JackMusicMiscControlTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackMusicMiscControlTrack : public UInterpTrack
{
public:
	TArray<struct FJackMusicMiscControlTrackKey>       KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMusicMiscControlTrack");
		return ptr;
	}

};


// Class JackGame.JackMusicMiscControlTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackMusicMiscControlTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackMusicMiscControlTrackInst");
		return ptr;
	}

};


// Class JackGame.JackNavArea
// 0x0000 (0x0050 - 0x0050)
class UJackNavArea : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackNavArea");
		return ptr;
	}

};


// Class JackGame.JackNavMeshAffector
// 0x0000 (0x07B0 - 0x07B0)
class AJackNavMeshAffector : public ACharacter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackNavMeshAffector");
		return ptr;
	}

};


// Class JackGame.JackNavModifierComponent
// 0x0058 (0x01B0 - 0x0158)
class UJackNavModifierComponent : public UNavRelevantComponent
{
public:
	class UClass*                                      AreaClass;                                                // 0x0158(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0160(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackNavModifierComponent");
		return ptr;
	}

};


// Class JackGame.JackNavModifierVolume
// 0x0008 (0x03E8 - 0x03E0)
class AJackNavModifierVolume : public ANavModifierVolume
{
public:
	bool                                               bEnableNavModifierOnBeginPlay;                            // 0x03E0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bEnableNavModifier;                                       // 0x03E1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03E2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackNavModifierVolume");
		return ptr;
	}


	void SetNavModifierActive(bool bActive);
	class AJackNavModifierVolume* DuplicateAsBattleVolume();
};


// Class JackGame.JackNPC
// 0x0020 (0x1110 - 0x10F0)
class AJackNPC : public AJackCharacter
{
public:
	struct FJackLDT_NPCList                            UniqueID;                                                 // 0x10F0(0x0010) (Edit, BlueprintVisi)
	class UJackLookAtComponent*                        LookAtComponent;                                          // 0x1100(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x1108(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackNPC");
		return ptr;
	}

};


// Class JackGame.JackNPCComponentBase
// 0x0000 (0x0128 - 0x0128)
class UJackNPCComponentBase : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackNPCComponentBase");
		return ptr;
	}

};


// Class JackGame.JackOddEffect
// 0x0030 (0x0068 - 0x0038)
class UJackOddEffect : public UObject
{
public:
	TArray<struct FJackOddEffectAttachedParticle>      Particles;                                                // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackOddEffectAttachedParticle>      InvokeParticles;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackOddEffectAttachedParticle>      ClearParticles;                                           // 0x0058(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffect");
		return ptr;
	}

};


// Class JackGame.JackOddEffectDatabase
// 0x0000 (0x0038 - 0x0038)
class UJackOddEffectDatabase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectDatabase");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec
// 0x00C8 (0x0100 - 0x0038)
class UJackOddEffectExec : public UObject
{
public:
	struct FName                                       OddEffectID;                                              // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<TWeakObjectPtr<class UJackOddEffectExec>>   SubOddEffectExecArray;                                    // 0x0040(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)
	struct FJackOddEffectData                          OddEffectData;                                            // 0x0050(0x0058) (Edit, DisableEditOnTemplate)
	TWeakObjectPtr<class UJackGameCharacter>           CasterGameCharacter;                                      // 0x00A8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	int                                                Depth;                                                    // 0x00B0(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackOddEffectSlideRank                            SlideRank;                                                // 0x00B4(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	EJackOddEffectReasonType                           Reason;                                                   // 0x00B5(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bReserveClear;                                            // 0x00B6(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bInvalidTurnEndCreateYasumiActionModule;                  // 0x00B7(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData)
	TArray<TWeakObjectPtr<class UParticleSystemComponent>> PlayedEffectParticleSystemComponents;                     // 0x00B8(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class UAudioComponent>>      PlayedLoopAudioComponents;                                // 0x00C8(0x0010) (Edit, ExportObject, ZeroConstructor, DisableEditOnTemplate)
	struct FName                                       PlayedVoiceID;                                            // 0x00D8(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	bool                                               bPlayedSetCategory;                                       // 0x00E0(0x0001) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x00E1(0x000B) MISSED OFFSET
	int                                                RemainTurn;                                               // 0x00EC(0x0004) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	TArray<class UObject*>                             HoldAssets;                                               // 0x00F0(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Normal
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Normal : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Normal");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Dot
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Dot : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Dot");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Hot
// 0x0008 (0x0108 - 0x0100)
class UJackOddEffectExec_Hot : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Hot");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Hot_GetExp
// 0x0000 (0x0108 - 0x0108)
class UJackOddEffectExec_Hot_GetExp : public UJackOddEffectExec_Hot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Hot_GetExp");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Nifuramu
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Nifuramu : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Nifuramu");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_MitoreruHantei
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_MitoreruHantei : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_MitoreruHantei");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_HazukasiiNoroi
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_HazukasiiNoroi : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_HazukasiiNoroi");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_NoroiYasumi
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_NoroiYasumi : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_NoroiYasumi");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_NoroiSokusi
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_NoroiSokusi : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_NoroiSokusi");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Sokusi
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Sokusi : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Sokusi");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Megante
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Megante : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Megante");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_SokusiMukou
// 0x0008 (0x0108 - 0x0100)
class UJackOddEffectExec_SokusiMukou : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_SokusiMukou");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Konran
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Konran : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Konran");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Miryou
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Miryou : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Miryou");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_NakamaTurnSkip
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_NakamaTurnSkip : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_NakamaTurnSkip");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_SyourijiKaifuku_MP
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_SyourijiKaifuku_MP : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_SyourijiKaifuku_MP");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_OitemoGenki
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_OitemoGenki : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_OitemoGenki");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Asutoron
// 0x0010 (0x0110 - 0x0100)
class UJackOddEffectExec_Asutoron : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Asutoron");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_KooriDuke
// 0x0010 (0x0110 - 0x0100)
class UJackOddEffectExec_KooriDuke : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_KooriDuke");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_YamiNoKoromoHomerosu
// 0x0008 (0x0108 - 0x0100)
class UJackOddEffectExec_YamiNoKoromoHomerosu : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_YamiNoKoromoHomerosu");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Zibaria
// 0x0008 (0x0108 - 0x0100)
class UJackOddEffectExec_Zibaria : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Zibaria");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_DevilMode
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_DevilMode : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_DevilMode");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_SatanMode
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_SatanMode : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_SatanMode");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_BeastMode
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_BeastMode : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_BeastMode");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_LadyFirst
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_LadyFirst : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_LadyFirst");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Taberu
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Taberu : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Taberu");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_TyouTaberu
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_TyouTaberu : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_TyouTaberu");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Taberareru
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Taberareru : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Taberareru");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Tozikomeru
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Tozikomeru : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Tozikomeru");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Tozikomerareru
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Tozikomerareru : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Tozikomerareru");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_TokiWoUbau
// 0x0010 (0x0110 - 0x0100)
class UJackOddEffectExec_TokiWoUbau : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_TokiWoUbau");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_YamiNoKoromo
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_YamiNoKoromo : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_YamiNoKoromo");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Kirakirapawn
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Kirakirapawn : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Kirakirapawn");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Kabau
// 0x0008 (0x0108 - 0x0100)
class UJackOddEffectExec_Kabau : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Kabau");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Kabawareru
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_Kabawareru : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Kabawareru");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_NioudatiCast
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_NioudatiCast : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_NioudatiCast");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_NioudatiTarget
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_NioudatiTarget : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_NioudatiTarget");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_Snowman
// 0x0010 (0x0110 - 0x0100)
class UJackOddEffectExec_Snowman : public UJackOddEffectExec
{
public:
	class UJackStreamObjectsHolder*                    ObjectsHolder;                                            // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0108(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_Snowman");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_AutoKaifuku
// 0x0008 (0x0108 - 0x0100)
class UJackOddEffectExec_AutoKaifuku : public UJackOddEffectExec
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_AutoKaifuku");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_RideMonsterEffect
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_RideMonsterEffect : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_RideMonsterEffect");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExec_MugenHpRate
// 0x0000 (0x0100 - 0x0100)
class UJackOddEffectExec_MugenHpRate : public UJackOddEffectExec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExec_MugenHpRate");
		return ptr;
	}

};


// Class JackGame.JackOddEffectExecHolder
// 0x0168 (0x01A0 - 0x0038)
class UJackOddEffectExecHolder : public UObject
{
public:
	TArray<class UJackOddEffectExec*>                  Execs;                                                    // 0x0038(0x0010) (Edit, ExportObject, ZeroConstructor, Transient, EditConst)
	struct FName                                       OddEffectMotionID;                                        // 0x0048(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	struct FName                                       OddEffectFacialID;                                        // 0x0050(0x0008) (Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x148];                                     // 0x0058(0x0148) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectExecHolder");
		return ptr;
	}

};


// Class JackGame.JackOddEffectManager
// 0x0118 (0x0150 - 0x0038)
class UJackOddEffectManager : public UObject
{
public:
	bool                                               bDebugFlag_DrawOddEffectInfo;                             // 0x0038(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x107];                                     // 0x0039(0x0107) MISSED OFFSET
	TArray<class UJackOddEffectTemporaryMaterial*>     TemporaryMaterials;                                       // 0x0140(0x0010) (Edit, ZeroConstructor, DisableEditOnTemplate)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectManager");
		return ptr;
	}


	void StopOddEffectEffectBP(class UJackGameCharacter* GameCharacter, bool bImmediately);
	void SetOddEffectWithCasterBP(class UJackGameCharacter* GameCharacter, const struct FJackLDT_OddEffect& LDT_OddEffect, class UJackGameCharacter* CasterCharacter);
	void SetOddEffectBP(class UJackGameCharacter* GameCharacter, const struct FJackLDT_OddEffect& LDT_OddEffect);
	class UObject* LoadOddEffectBP(const struct FJackLDT_OddEffect& LDT_OddEffect, const struct FLatentActionInfo& LatentInfo);
	bool STATIC_IsOddEffectByStatus(class UJackGameCharacter* GameCharacter, const struct FName& OddEffectStatusID);
	bool STATIC_IsOddEffectByCategory(class UJackGameCharacter* GameCharacter, EJackOddEffectCategoryType CategoryType);
	bool STATIC_IsOddEffect(class UJackGameCharacter* GameCharacter, const struct FName& OddEffectID);
	void ClearOddEffectByCategoryBP(class UJackGameCharacter* GameCharacter, EJackOddEffectCategoryType CategoryType);
	void ClearOddEffectBP(class UJackGameCharacter* GameCharacter, const struct FName& OddEffectID);
};


// Class JackGame.JackOddEffectStructs
// 0x0000 (0x0038 - 0x0038)
class UJackOddEffectStructs : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectStructs");
		return ptr;
	}

};


// Class JackGame.JackOddEffectTemporaryMaterial
// 0x0028 (0x0060 - 0x0038)
class UJackOddEffectTemporaryMaterial : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectTemporaryMaterial");
		return ptr;
	}

};


// Class JackGame.JackOddEffectTypes
// 0x0000 (0x0038 - 0x0038)
class UJackOddEffectTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOddEffectTypes");
		return ptr;
	}

};


// Class JackGame.JackOLSManager
// 0x0070 (0x00A8 - 0x0038)
class UJackOLSManager : public UObject
{
public:
	class UOSDK*                                       OSDK;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UOSDKWebServiceClient*                       WebServiceClient;                                         // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0048(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOLSManager");
		return ptr;
	}

};


// Class JackGame.JackOmakeMessageWindow
// 0x0090 (0x0260 - 0x01D0)
class UJackOmakeMessageWindow : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01D0(0x0010) MISSED OFFSET
	float                                              OneMessageTime;                                           // 0x01E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01E4(0x0004) MISSED OFFSET
	class USoundBase*                                  SoundTalk;                                                // 0x01E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SoundTalkStringCount;                                     // 0x01F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6C];                                      // 0x01F4(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOmakeMessageWindow");
		return ptr;
	}


	void Update(float DeltaTime);
	void SetTextId(const struct FName& InTextId);
	void SetMessageEndDelegate(const struct FScriptDelegate& InDelegate);
	void SetBPActionDelegate(const struct FScriptDelegate& InDelegate);
	void OnSeSoundPlay(const struct FName& SEName);
	void JackOmakeWindowBPActionDelegate__DelegateSignature(const struct FName& EventTag);
	bool IsUpdateMessage();
	int GetStringCount();
	TEnumAsByte<EJackOmakeMessageState> GetState();
	int GetDisplayTextLineNum();
	TArray<struct FText> GetCurrentText();
	void EndSelectWindow();
	void EndMessageScroll();
	void DoExecuteAction(const struct FName& InName);
	void DisplayMessage(const struct FName& InTextId);
	void Delegate__DelegateSignature();
};


// Class JackGame.JackOmakeSelectWindow
// 0x0020 (0x01F0 - 0x01D0)
class UJackOmakeSelectWindow : public UUserWidget
{
public:
	int                                                CursorPos;                                                // 0x01D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x01D4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOmakeSelectWindow");
		return ptr;
	}


	void Update(float DeltaTime);
	void SetBPActionDelegate(const struct FScriptDelegate& InDelegate);
	void JackOmakeSelectWindowActionDelegate__DelegateSignature(const struct FName& EventTag);
	void InitWindow();
};


// Class JackGame.JackOSDKSettings
// 0x0000 (0x0098 - 0x0098)
class UJackOSDKSettings : public UOSDKSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOSDKSettings");
		return ptr;
	}

};


// Class JackGame.JackOverlappedActorComponent
// 0x0030 (0x0158 - 0x0128)
class UJackOverlappedActorComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0128(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackOverlappedActorComponent");
		return ptr;
	}


	void SyncActorList(float DeltaTime);
	void SetOverlappedActorListTimerAll(float Timer);
	void SetOverlappedActorListTimer(int Index, float Timer);
	bool RemoveOverlappedComponentSyncActorList(class UPrimitiveComponent* OtherComp);
	void RemoveOverlappedComponent(class UPrimitiveComponent* OtherComp);
	bool IsTimeExpiredOverlappedActorList(int Index);
	float GetOverlappedActorListTimer(int Index);
	TArray<class AActor*> GetOverlappedActorList();
	bool AddOverlappedComponentSyncActorList(class UPrimitiveComponent* OtherComp);
	void AddOverlappedComponent(class UPrimitiveComponent* OtherComp);
};


// Class JackGame.JackPafuPafuMode
// 0x02B8 (0x0650 - 0x0398)
class AJackPafuPafuMode : public AActor
{
public:
	class UJackPafuPafuParameter*                      PafuParam[0x2];                                           // 0x0398(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UClass*                                      PafuParamClass;                                           // 0x03A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LightThreshold;                                           // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StrongThreshold;                                          // 0x03B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StrongestThreshold;                                       // 0x03B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             PafuPafuLeftDelegate;                                     // 0x03C0(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             PafuPafuRightDelegate;                                    // 0x03D0(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	TArray<class UObject*>                             DelegateList;                                             // 0x03E0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x260];                                     // 0x03F0(0x0260) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPafuPafuMode");
		return ptr;
	}


	void SetReactFlag(int InMotorIndex, bool InReactFlag);
	void SetPafuPafuDecisionFlag(bool InDecisionFlag);
	void SetMaxAcceleration(float InMaxAcceleration);
	void SetAllMotorReactFlag(bool InReactFlag);
	void JackPafuPafuAccelerationDelegate__DelegateSignature(int StrongAccleration);
};


// Class JackGame.JackPafuPafuParameter
// 0x00C8 (0x0100 - 0x0038)
class UJackPafuPafuParameter : public UObject
{
public:
	float                                              Ddz;                                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ddz_lpf;                                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ddz_hat;                                                  // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Dz;                                                       // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Z;                                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ddx;                                                      // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Dx;                                                       // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              X;                                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0058(0x0004) MISSED OFFSET
	float                                              Dt;                                                       // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JoyAccelToDdzCoeff;                                       // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JoyDdzLpfCoeff;                                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JoyDdzThreshold;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JoyDzThreshold;                                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JoyZDecay;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              M;                                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              K;                                                        // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              D;                                                        // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DdxToAmplCoeff;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DdxToAmplMax;                                             // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DdxToAmplMin;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DdxToFreqF0;                                              // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DdxToFreqCoeff;                                           // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DdxToFreqMax;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x0098(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPafuPafuParameter");
		return ptr;
	}

};


// Class JackGame.JackPairingManager
// 0x0050 (0x0088 - 0x0038)
class UJackPairingManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPairingManager");
		return ptr;
	}


	void OpenMSGamersTag();
	bool IsSignedInXUser();
	void InitializeXboxOnePairing();
};


// Class JackGame.JackParadeNPC
// 0x02A0 (0x1390 - 0x10F0)
class AJackParadeNPC : public AJackCharacter
{
public:
	struct FJackLDT_NPCList                            UniqueID;                                                 // 0x10F0(0x0010) (Edit, BlueprintVisi)
	TEnumAsByte<EJackNPCType>                          NPCType;                                                  // 0x1100(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bParadeCarry_RightPosition;                               // 0x1101(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x1102(0x0002) MISSED OFFSET
	float                                              LoadReduction_SkipFacial_Distance;                        // 0x1104(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              LoadReduction_SkipSkeletalMeshComponent_Distance;         // 0x1108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoadReduction_SkipSkeletalMeshComponent_Velocity;         // 0x110C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DetectObstacleCapsuleInflation;                           // 0x1110(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FCollisionResponseContainer                 DetectObstacleResponseParams;                             // 0x1114(0x0020) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1134(0x0004) MISSED OFFSET
	class UClass*                                      SpawnClass_ParadeNPC_P005;                                // 0x1138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeDancerNPC1;                              // 0x1140(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeDancerNPC2;                              // 0x1148(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeDancerNPC3;                              // 0x1150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeDancerNPC4;                              // 0x1158(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeMusicianNPC1;                            // 0x1160(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeMusicianNPC2;                            // 0x1168(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeMusicianNPC3;                            // 0x1170(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeCarryNPC1;                               // 0x1178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeCarryNPC2;                               // 0x1180(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeCarryNPC3;                               // 0x1188(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SpawnClass_ParadeCarryNPC4;                               // 0x1190(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                StartAnimMontage;                                         // 0x1198(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                WaitAnimMontage;                                          // 0x11A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MoveAnimMontage;                                          // 0x11A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                TurnAnimMontage;                                          // 0x11B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PortableShrine_MoveSpeed;                                 // 0x11B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_TurnSpeed;                                 // 0x11BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_MoveDistance;                              // 0x11C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_StopDistance;                              // 0x11C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_MoveRouteDistance;                         // 0x11C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_StopRouteDistance;                         // 0x11CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_MoveAngle;                                 // 0x11D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PortableShrine_TurnDelaySeconds;                          // 0x11D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UJackLoadReductionComponent*                 LoadReductionComponent;                                   // 0x11D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class AJackParadeNPC>               ParadeNPC_P005;                                           // 0x11E0(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AJackParadeNPC>               ParadeDancerNPC[0x4];                                     // 0x11E8(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AJackParadeNPC>               ParadeMusicianNPC[0x3];                                   // 0x1208(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AJackParadeNPC>               ParadeCarryNPC[0x4];                                      // 0x1220(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UArrowComponent>              PortableShrine_DancerPointRoot;                           // 0x1240(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UArrowComponent>              PortableShrine_DancerPoint[0x4];                          // 0x1248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UArrowComponent>              PortableShrine_MusicianPointRoot;                         // 0x1268(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UArrowComponent>              PortableShrine_MusicianPoint[0x3];                        // 0x1270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UArrowComponent>              PortableShrine_CarryPoint[0x4];                           // 0x1288(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class USplineComponent>             PortableShrine_MoveSpline;                                // 0x12A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0xE0];                                      // 0x12B0(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParadeNPC");
		return ptr;
	}


	void InitializeForPortableShrine(class AActor* StartPoint);
	float GetParadeCarryRightPositionRate();
	struct FTransform GetParadeCarryHandTransform();
};


// Class JackGame.JackParameterUpdater
// 0x00A8 (0x00E0 - 0x0038)
class UJackParameterUpdater : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0038(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParameterUpdater");
		return ptr;
	}

};


// Class JackGame.JackParameterUpdaterCurve
// 0x0040 (0x0120 - 0x00E0)
class UJackParameterUpdaterCurve : public UJackParameterUpdater
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x00E0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParameterUpdaterCurve");
		return ptr;
	}

};


// Class JackGame.JackParameterUpdaterFloat
// 0x0010 (0x00F0 - 0x00E0)
class UJackParameterUpdaterFloat : public UJackParameterUpdater
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParameterUpdaterFloat");
		return ptr;
	}

};


// Class JackGame.JackParameterUpdaterLinearColor
// 0x0030 (0x0110 - 0x00E0)
class UJackParameterUpdaterLinearColor : public UJackParameterUpdater
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00E0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParameterUpdaterLinearColor");
		return ptr;
	}

};


// Class JackGame.JackParameterUpdaterVector
// 0x0030 (0x0110 - 0x00E0)
class UJackParameterUpdaterVector : public UJackParameterUpdater
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x00E0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParameterUpdaterVector");
		return ptr;
	}

};


// Class JackGame.JackParticleEventSystem
// 0x0000 (0x0038 - 0x0038)
class UJackParticleEventSystem : public UParticleEventSystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParticleEventSystem");
		return ptr;
	}

};


// Class JackGame.JackParticleModuleLocationGround
// 0x0020 (0x0060 - 0x0040)
class UJackParticleModuleLocationGround : public UParticleModuleLocationBase
{
public:
	float                                              UpperLength;                                              // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LowerLength;                                              // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LimitAngle;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bApplyRotation;                                           // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseLocalZ;                                               // 0x004D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              Radius;                                                   // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotationMaxAngle;                                         // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotationIgnoreAngle;                                      // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackParticleModuleLocationGround");
		return ptr;
	}

};


// Class JackGame.JackPartyManager
// 0x0148 (0x04E0 - 0x0398)
class AJackPartyManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0398(0x00A0) MISSED OFFSET
	TArray<class UJackStreamObjectsHolder*>            VehicleClassArray;                                        // 0x0438(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0448(0x0018) MISSED OFFSET
	class UJackStreamObjectsHolder*                    PartyTalkCharacterAssetHolder;                            // 0x0460(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	class UJackStreamObjectsHolder*                    GuestNPCCharacterAssetHolder;                             // 0x0470(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0478(0x0004) MISSED OFFSET
	float                                              ThinCapsuleRadiusSpeed;                                   // 0x047C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackFriendAnimation>                  FollowingFriendAnimationType;                             // 0x0480(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackActionCursor>                     FollowingCharacterActionCursorType;                       // 0x0481(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5E];                                      // 0x0482(0x005E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPartyManager");
		return ptr;
	}


	void UnloadVehicleClass(TEnumAsByte<EJackVehicleModelId> ModelId);
	void PreloadVehicleClass(TEnumAsByte<EJackVehicleModelId> ModelId);
	void OnVehicleSpawnMessage(class AActor* Vehicle, bool bMustTransferPossess);
	bool IsPreloadVehicleClassCompleteAll();
	bool IsPreloadVehicleClassComplete(TEnumAsByte<EJackVehicleModelId> ModelId);
};


// Class JackGame.JackPasserbyGenerator
// 0x0040 (0x03E0 - 0x03A0)
class AJackPasserbyGenerator : public AJackLocator
{
public:
	class UClass*                                      PasserbyTable;                                            // 0x03A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x34];                                      // 0x03AC(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPasserbyGenerator");
		return ptr;
	}

};


// Class JackGame.JackPasserbyTable
// 0x0040 (0x0078 - 0x0038)
class UJackPasserbyTable : public UObject
{
public:
	float                                              MinDistance;                                              // 0x0038(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x003C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TEnumAsByte<EJackWorldWeather>>             WeatherList;                                              // 0x0040(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<TEnumAsByte<EJackTimeZone>>                 TimeZoneList;                                             // 0x0050(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	TArray<class UClass*>                              PasserbyNPC;                                              // 0x0060(0x0010) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance)
	int                                                PasserbyNum;                                              // 0x0070(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPasserbyTable");
		return ptr;
	}

};


// Class JackGame.JackPauseTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackPauseTrack : public UInterpTrack
{
public:
	TArray<struct FJackPauseTrackKey>                  KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPauseTrack");
		return ptr;
	}

};


// Class JackGame.JackPauseTrackInst
// 0x0078 (0x00B0 - 0x0038)
class UJackPauseTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0038(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPauseTrackInst");
		return ptr;
	}

};


// Class JackGame.JackPhotoModeControllerInterface
// 0x0000 (0x0038 - 0x0038)
class UJackPhotoModeControllerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhotoModeControllerInterface");
		return ptr;
	}

};


// Class JackGame.JackPhotoModeSetting
// 0x0030 (0x0068 - 0x0038)
class UJackPhotoModeSetting : public UObject
{
public:
	struct FJackPhotoModeCharaSettingCommon            Common;                                                   // 0x0038(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance)
	TArray<struct FJackPhotoModeCharaSetting>          Characters;                                               // 0x0048(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FocalRegion;                                              // 0x0058(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NearBlurSize;                                             // 0x005C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FarBlurSize;                                              // 0x0060(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhotoModeSetting");
		return ptr;
	}

};


// Class JackGame.JackDofPhotoModeOverrider
// 0x0528 (0x0560 - 0x0038)
class UJackDofPhotoModeOverrider : public UObject
{
public:
	unsigned char                                      UnknownData00[0x528];                                     // 0x0038(0x0528) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDofPhotoModeOverrider");
		return ptr;
	}

};


// Class JackGame.JackPhotoModeCapture
// 0x0008 (0x03A0 - 0x0398)
class AJackPhotoModeCapture : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhotoModeCapture");
		return ptr;
	}


	void SetRenderTargetTexture(class UTextureRenderTarget2D* InTexture);
	struct FPostProcessSettings GetCapturePostProcessSettings();
};


// Class JackGame.JackPhotoModeManager
// 0x0930 (0x0968 - 0x0038)
class UJackPhotoModeManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    PhotoModeBPDelegate;                                      // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      PhotoModeSettingClass;                                    // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UJackPhotoModeSetting*                       PhotoModeSetting;                                         // 0x0050(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PhotoModeCaptureClass;                                    // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class AJackPhotoModeCapture*                       PhotoModeCapture;                                         // 0x0060(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x900];                                     // 0x0068(0x0900) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhotoModeManager");
		return ptr;
	}


	void UpdateSavePosistion();
	void Tick(float InDeltaSeconds);
	void ShowHUD();
	void SetNoRelocationCharacter(TEnumAsByte<EJackCharacter> InCharacterType, bool bEnable);
	bool SetHudEnable(bool bInHudEnable);
	void SetCameraAxisSlideEnable(bool InEnable);
	void SetBokehEnbale(bool InEnable);
	bool SaveAlbumRenderTarget();
	bool SaveAlbumBuffer();
	void ResetNoRelocationCharacters();
	void RequestSwitchHidden(TEnumAsByte<EJackCharacter> InCharacter, bool bInHidden);
	void RequestStopEmote();
	void RequestStabilizePose(TArray<class AJackCharacter*> InCharacters, bool bInImmediately, bool bInLight, int InIdlingCount);
	void RequestResetCharacter(TEnumAsByte<EJackCharacter> InCharacter, bool bInImmediately);
	bool RequestRelocation(bool bIgnoreVisibleCharacter);
	void RequestPlayEmote(TEnumAsByte<EJackPhotoModeEmote> InEmote, int InIndex);
	void RequestLookAt();
	void RequestHiddenCharacter(TEnumAsByte<EJackCharacter> InCharacter, bool bInHidden, float InRequiredSeconds);
	void RequestHidden(bool bInHidden, float InRequiredSeconds);
	void RequestHeadLookAtEnd();
	void RequestHeadLookAt();
	void RequestAnimDynamicsIdling(TArray<class AJackCharacter*> InCharacters, int InIdlingCount);
	bool RequestAlignment(int InAlignmentType);
	bool PrePreviewCapture();
	bool PreCapture();
	bool PostPreviewCapture();
	bool PostCapture();
	bool PostAnimation();
	void PhotoModeMenuLeaveAfter();
	void PhotoModeMenuLeave();
	void PhotoModeMenuEnter();
	void PhotoModeLeave();
	void PhotoModeFadeEnter(bool bRelocate);
	void JackUMGPhotoModeBPDelegate__DelegateSignature(TEnumAsByte<EJackPhotoModeEvent> EventType);
	EJackPhotoModeCommand JackKeysToPhotoModeCommand(TEnumAsByte<EJackKeys> InKeyType);
	bool IsScreenPercentageChanged();
	bool IsResamplingEnd();
	bool IsPhotoModeNotAvailable();
	bool IsPhotoMode();
	bool IsHudEnable();
	bool IsHidden(TEnumAsByte<EJackCharacter> InCharacter);
	bool IsHeadLookAtEnable();
	bool IsEndStabilizePose();
	bool IsCaptureRequested();
	bool IsCaptureExecuted();
	void InputDelegate(struct FJackUIInputDelegateInfo* InDelegateInfo);
	int GetSaveAlbumState();
	EJackPhotoModeErrorCode GetSaveAlbumErrorCode();
	float GetPreviewCaptureDelaySeconds();
	float GetPreCaptureDelaySeconds();
	float GetPostCaptureDelaySeconds();
	float GetPostAnimationDelaySeconds();
	void GetPhotoModeFollowingCharacters(int InOffset, TArray<class AJackCharacter*>* OutCharacters);
	void GetPhotoModeCharacters(TArray<class AJackCharacter*>* OutCharacters);
	class AJackPhotoModeCapture* GetPhotoModeCapture();
	float GetExecCaptureDelaySeconds();
	int GetEmoteNum(TEnumAsByte<EJackPhotoModeEmote> InEmote);
	bool GetBokehEnable();
	bool ExecCapturePreviousFrame();
	void DelegateEvent(TEnumAsByte<EJackPhotoModeEvent> InEvent);
	bool CheckSavePosition(float InDiff, TArray<class AJackCharacter*>* OutReturnCharacter);
};


// Class JackGame.JackPhysicsBlendRateTrack
// 0x0018 (0x00C8 - 0x00B0)
class UJackPhysicsBlendRateTrack : public UInterpTrackFloatBase
{
public:
	TArray<struct FJackLDT_Coordinate>                 ApplyCoordinates;                                         // 0x00B0(0x0010) (Edit, ZeroConstructor)
	bool                                               bUpperBody;                                               // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerBody;                                               // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bBodyExtra;                                               // 0x00C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHair;                                                    // 0x00C3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHairExtra;                                               // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bMantle;                                                  // 0x00C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOther;                                                   // 0x00C6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00C7(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicsBlendRateTrack");
		return ptr;
	}

};


// Class JackGame.JackPhysicsBlendRateTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackPhysicsBlendRateTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicsBlendRateTrackInst");
		return ptr;
	}

};


// Class JackGame.JackPhysicsSuppressionTrack
// 0x0008 (0x00B8 - 0x00B0)
class UJackPhysicsSuppressionTrack : public UInterpTrackFloatBase
{
public:
	float                                              SuppressionSec;                                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AttenuationSec;                                           // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicsSuppressionTrack");
		return ptr;
	}

};


// Class JackGame.JackPhysicsSuppressionTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackPhysicsSuppressionTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicsSuppressionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackPhysicsTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackPhysicsTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicsTrack");
		return ptr;
	}

};


// Class JackGame.JackPhysicsVolume
// 0x0028 (0x0408 - 0x03E0)
class AJackPhysicsVolume : public APhysicsVolume
{
public:
	struct FScriptMulticastDelegate                    EnteredVolume;                                            // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LeavingVolume;                                            // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bUseBlueprintOverlapFunction;                             // 0x0400(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0401(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPhysicsVolume");
		return ptr;
	}


	bool IsOverlapInVolume(bool bDefaultOverlap, class USceneComponent* TestComponent);
};


// Class JackGame.JackPlayableMovementMode
// 0x0008 (0x0040 - 0x0038)
class UJackPlayableMovementMode : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableMovementMode");
		return ptr;
	}

};


// Class JackGame.JackPlayableDefaultMovementMode
// 0x0000 (0x0040 - 0x0040)
class UJackPlayableDefaultMovementMode : public UJackPlayableMovementMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableDefaultMovementMode");
		return ptr;
	}

};


// Class JackGame.JackPlayableBattleMovementMode
// 0x0000 (0x0040 - 0x0040)
class UJackPlayableBattleMovementMode : public UJackPlayableDefaultMovementMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableBattleMovementMode");
		return ptr;
	}

};


// Class JackGame.JackPlayableCharacterCapsuleComponent
// 0x0010 (0x09D0 - 0x09C0)
class UJackPlayableCharacterCapsuleComponent : public UJackCharacterCapsuleComponent
{
public:
	float                                              MaxCapsuleRadius;                                         // 0x09C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalVelocityByMaxCapsuleRadius;                     // 0x09C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleControlSpeedToDown;                                // 0x09C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleControlSpeedToUp;                                  // 0x09CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableCharacterCapsuleComponent");
		return ptr;
	}


	void SetCapsuleControlCollisionForGimmick(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> Response);
};


// Class JackGame.JackPlayableFieldMovementMode
// 0x0000 (0x0040 - 0x0040)
class UJackPlayableFieldMovementMode : public UJackPlayableDefaultMovementMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableFieldMovementMode");
		return ptr;
	}

};


// Class JackGame.JackPlayableSplineMovementMode
// 0x0048 (0x0088 - 0x0040)
class UJackPlayableSplineMovementMode : public UJackPlayableDefaultMovementMode
{
public:
	struct FScriptMulticastDelegate                    OnArriveBeginPoint;                                       // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnArriveEndPoint;                                         // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0060(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableSplineMovementMode");
		return ptr;
	}


	void SnapToClosestSplinePoint();
	void SetStartInterpolationAnimMontage(class UAnimMontage* AnimMontage, float StartInterpolationMontageSec, float EndInterpolationMontageSec, float InterpolationRate);
	void SetSplineComponent(class USplineComponent* InSplineComponent);
	void SetSnapToSplineEnabled(bool bEnabled);
	void SetSnapOffsetLocation(const struct FVector& InOffsetLocationInActorSpace);
	void RegistAnimationMontage(TEnumAsByte<EJackPlayableMovementAnimMontage> Type, TArray<class UAnimMontage*> AnimMontage);
	void PlayableSplineMovementModeDelegate__DelegateSignature();
	bool IsArrivedEndPoint();
	bool IsArrivedBeginPoint();
	struct FVector GetClosestSplinePoint(class USplineComponent* InSplineComponent, const struct FVector& InWorldLocation);
};


// Class JackGame.JackPlayableRopeClimbMovementMode
// 0x0048 (0x00D0 - 0x0088)
class UJackPlayableRopeClimbMovementMode : public UJackPlayableSplineMovementMode
{
public:
	struct FScriptMulticastDelegate                    OnClimbUp;                                                // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClimbDown;                                              // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginFalling;                                           // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x18];                                      // 0x00B8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableRopeClimbMovementMode");
		return ptr;
	}


	void SetAutoRapeling(bool bEnabled);
	void SetAutoMovementEnable(bool bEnable);
	bool IsAutoRapeling();
	bool IsAutoMovementEnable();
};


// Class JackGame.JackPlayableLadderMovementMode
// 0x0098 (0x0168 - 0x00D0)
class UJackPlayableLadderMovementMode : public UJackPlayableRopeClimbMovementMode
{
public:
	struct FScriptMulticastDelegate                    OnStepUp;                                                 // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStepDown;                                               // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMovementStateChanged;                                   // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bForwardCalculation;                                      // 0x0100(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x57];                                      // 0x0101(0x0057) MISSED OFFSET
	class USoundBase*                                  AutoRapelingLoopSound;                                    // 0x0158(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UAudioComponent*                             AutoRapelingSoundComponent;                               // 0x0160(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableLadderMovementMode");
		return ptr;
	}


	void SetOriginLocation(const struct FVector& InLocation);
	void SetMovementAnimationTime(float InAnimationTime, float InSnapTime);
	void SetLadderInfo(int InMaxStep, float InStepHeight, int InCurrentStep);
	void SetAutoRapelingSound(class USoundBase* InAutoRapelingLoopSound);
	void PlayableLadderMovementModeStepDelegate__DelegateSignature(bool bRightHandUp, float MovementRate);
	void PlayableLadderMovementModeChangeStateDelegate__DelegateSignature(TEnumAsByte<EJackLadderMovementState> MovementState);
	bool IsInUpperStep();
	bool IsInLowerStep();
};


// Class JackGame.JackPlayableMovementComponent
// 0x0140 (0x0E50 - 0x0D10)
class UJackPlayableMovementComponent : public UJackCharacterMovementComponent
{
public:
	bool                                               bSlipEnable;                                              // 0x0D10(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bSlip;                                                    // 0x0D11(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0D12(0x0002) MISSED OFFSET
	float                                              SlipDumpRate;                                             // 0x0D14(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SlipVelocityRate;                                         // 0x0D18(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SlipMaxSpeed;                                             // 0x0D1C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SlipSlopeStartAngle;                                      // 0x0D20(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SlipSlopeSpeedRate;                                       // 0x0D24(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SlipFallingSec;                                           // 0x0D28(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bNoFloorSlipDisable;                                      // 0x0D2C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0D2D(0x0003) MISSED OFFSET
	float                                              NoFloorSlipCheckOffset;                                   // 0x0D30(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipCheckRadius;                                   // 0x0D34(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipCheckWaitSec;                                  // 0x0D38(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipSpeedRate;                                     // 0x0D3C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipDownRate;                                      // 0x0D40(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipDumpRate;                                      // 0x0D44(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipMaxSpeed;                                      // 0x0D48(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoFloorSlipSlopeSpeedRate;                                // 0x0D4C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bNoFloorSlipCheckVelocityZero;                            // 0x0D50(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3F];                                      // 0x0D51(0x003F) MISSED OFFSET
	class UJackPlayableMovementMode*                   PlayableMovementMode;                                     // 0x0D90(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              MinMovementSpeedRate;                                     // 0x0D98(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0D9C(0x0018) MISSED OFFSET
	float                                              SecondsUntilNextJump;                                     // 0x0DB4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0DB8(0x0004) MISSED OFFSET
	bool                                               bDontApplyAvoidanceVelocity;                              // 0x0DBC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableSuppressionOfJumpingDueToSmallSteps;               // 0x0DBD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x92];                                      // 0x0DBE(0x0092) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableMovementComponent");
		return ptr;
	}


	void SetSlipParam(float InSlipDumpRate, float InSlipVelocityRate, float InSlipMaxSpeed, float InSlipSlopeStartAngle, float InSlipSlopeSpeedRate);
	void SetSlip(bool bOn);
	class UJackPlayableMovementMode* SetPlayableMovementMode(class UClass* PlayableMovementModeClass);
	void SetPlayableMovementDefaultTypeOverride(TEnumAsByte<EJackPlayableMovementDefault> OverrideMode);
	void SetPlayableMovementDefaultType(TEnumAsByte<EJackPlayableMovementDefault> Mode);
	void ResetPlayableMovementMode();
	void ResetPlayableMovementDefaultType();
	void PushPlayableMovementDefaultType(TEnumAsByte<EJackPlayableMovementDefault> Mode, bool bForceNoneSet);
	void PopPlayableMovementDefaultType();
	void OnMovementDisabled(bool bDisabled);
	bool IsPlayableMovementDefaultOverride();
	TEnumAsByte<EJackPlayableMovement> GetPlayableMovementType();
	class UJackPlayableMovementMode* GetPlayableMovementMode();
	TEnumAsByte<EJackPlayableMovementDefault> GetPlayableMovementDefaultType();
};


// Class JackGame.JackPlayableNavMeshMovementMode
// 0x0008 (0x0048 - 0x0040)
class UJackPlayableNavMeshMovementMode : public UJackPlayableDefaultMovementMode
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableNavMeshMovementMode");
		return ptr;
	}

};


// Class JackGame.JackPlayableOsihikiMovementMode
// 0x0018 (0x0058 - 0x0040)
class UJackPlayableOsihikiMovementMode : public UJackPlayableDefaultMovementMode
{
public:
	TWeakObjectPtr<class AJackInteractiveActor>        HauledActor;                                              // 0x0040(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableOsihikiMovementMode");
		return ptr;
	}


	void SetOsihikiMovementScale(float InMovementScale);
	void SetOsihikiActor(class AJackInteractiveActor* InActor);
};


// Class JackGame.JackPlayableRopeWalkMovementMode
// 0x00E0 (0x0168 - 0x0088)
class UJackPlayableRopeWalkMovementMode : public UJackPlayableSplineMovementMode
{
public:
	unsigned char                                      UnknownData00[0xE0];                                      // 0x0088(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableRopeWalkMovementMode");
		return ptr;
	}


	void SetTurnSec(float InStartTurnSec, float InEndTurnSec);
	void SetStartInterpolationAnimMontage(class UAnimMontage* InAnimMontage, float InStartInterpolationMontageSec, float InEndInterpolationMontageSec, float InInterpolationRate);
};


// Class JackGame.JackPlayableSurisuriMovementMode
// 0x0080 (0x0108 - 0x0088)
class UJackPlayableSurisuriMovementMode : public UJackPlayableSplineMovementMode
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0088(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableSurisuriMovementMode");
		return ptr;
	}


	void SetStartInterpolationAnimMontage(class UAnimMontage* InAnimMontage, float InStartInterpolationMontageSec, float InEndInterpolationMontageSec, float InInterpolationRate);
};


// Class JackGame.JackPlayableUmaRaceMovementMode
// 0x0048 (0x0088 - 0x0040)
class UJackPlayableUmaRaceMovementMode : public UJackPlayableDefaultMovementMode
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0040(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableUmaRaceMovementMode");
		return ptr;
	}

};


// Class JackGame.JackPlayableV104GakeMovementMode
// 0x0020 (0x0128 - 0x0108)
class UJackPlayableV104GakeMovementMode : public UJackPlayableSurisuriMovementMode
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0108(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayableV104GakeMovementMode");
		return ptr;
	}


	void SetUpperDir(const struct FVector& InUpperDir, float InRotInterpSpeed);
	void SetStartInterpolation(float InMaxInterpSec, float InStartInterpolationMontageSec, float InEndInterpolationMontageSec, float InInterpolationRate);
};


// Class JackGame.JackPlayerAnimationStateMachine
// 0x0000 (0x00E0 - 0x00E0)
class UJackPlayerAnimationStateMachine : public UJackFriendAnimationStateMachine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerAnimationStateMachine");
		return ptr;
	}

};


// Class JackGame.JackPlayerAnimInstance
// 0x0040 (0x0D20 - 0x0CE0)
class UJackPlayerAnimInstance : public UJackPlayableAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0CE0(0x0008) MISSED OFFSET
	TEnumAsByte<EJackPlayerAnimBaseStateMachineMode>   BaseStateMachineType;                                     // 0x0CE8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackPlayableMovementDefault>          PlayableMovementDetaultType;                              // 0x0CE9(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackPlayableMovement>                 PlayableMovementType;                                     // 0x0CEA(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackVehicle>                          RideVehicleType;                                          // 0x0CEB(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSlippingOff;                                             // 0x0CEC(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRighthandUpForLadder;                                    // 0x0CED(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnterToShotBowgunState;                                  // 0x0CEE(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLeaveFromShotBowgunState;                                // 0x0CEF(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlendSpaceValueX;                                         // 0x0CF0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ParadeWaitMotionRate;                                     // 0x0CF4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ParadeWaitMotionRateInterpSpeed;                          // 0x0CF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0CFC(0x0004) MISSED OFFSET
	float                                              WalkRunUpperBodyAnimRate;                                 // 0x0D00(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WalkRunUpperBodyAnimRateInterpSpeed;                      // 0x0D04(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdlingMovementRateThreshould;                             // 0x0D08(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseStateUpperBodyAnimBlendWeight;                        // 0x0D0C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BaseStateUpperBodyAnimBlendWeightInterpSpeed;             // 0x0D10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsInBattle;                                              // 0x0D14(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDashRun;                                                 // 0x0D15(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xA];                                       // 0x0D16(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerAnimInstance");
		return ptr;
	}


	void UpdateBaseStateMachine();
	void SetUpperBodyAnimationBlendEnabled(bool bEnable);
	void SetBaseStateMachineType(TEnumAsByte<EJackPlayerAnimBaseStateMachineMode> InType);
	void ResetToTransition();
	bool IsSlippingOff();
	bool IsRightHandUp();
	bool IsReuiredTransitionState(TEnumAsByte<EJackPlayerAnimInstanceStateMachineState> TransitionState);
	bool IsAutoRapelingInLadder();
	struct FJackArmIKResult GetRightArmIKReslt();
	TEnumAsByte<EJackPlayableMovement> GetPlayableMovementType();
	TEnumAsByte<EJackPlayableMovementDefault> GetPlayableMovementDefaultType();
	struct FJackArmIKResult GetLeftArmIKReslt();
	float GetBlendSpaceValueY();
	float GetBlendSpaceValueX();
	TEnumAsByte<EJackPlayerAnimBaseStateMachineMode> GetBaseStateMachineType();
};


// Class JackGame.JackDofFocalDistanceOverrider
// 0x0018 (0x0050 - 0x0038)
class UJackDofFocalDistanceOverrider : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackDofFocalDistanceOverrider");
		return ptr;
	}

};


// Class JackGame.JackPlayerCameraComponent
// 0x01D0 (0x0A30 - 0x0860)
class UJackPlayerCameraComponent : public UCameraComponent
{
public:
	unsigned char                                      UnknownData00[0x1C8];                                     // 0x0860(0x01C8) MISSED OFFSET
	class UJackDofFocalDistanceOverrider*              DofFocalDistanceOverrider;                                // 0x0A28(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerCameraComponent");
		return ptr;
	}

};


// Class JackGame.JackPlayerCameraManager
// 0x1C20 (0x3710 - 0x1AF0)
class AJackPlayerCameraManager : public APlayerCameraManager
{
public:
	struct FTViewTarget                                NonCameraActorViewTarget;                                 // 0x1AF0(0x0570) (Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x2060(0x0008) MISSED OFFSET
	class USphereComponent*                            CollisionComponent;                                       // 0x2068(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           HiddenControlCollisionComponent;                          // 0x2070(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           DisclosedControlCollisionComponent;                       // 0x2078(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CloseupHiddenControlCollisionComponent;                   // 0x2080(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CloseupDisclosedControlCollisionComponent;                // 0x2088(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UMaterialBillboardComponent*                 UIDepthMaskComponent;                                     // 0x2090(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              DitherHiddenTime;                                         // 0x2098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1674];                                    // 0x209C(0x1674) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerCameraManager");
		return ptr;
	}


	void SetListenerLocationAlpha(float InAlpha);
	void SetHiddenControlBeginOverlapEnabled(bool bOn);
	void SetCameraLightDisable(TEnumAsByte<EJackCameraLightControlPurpose> Purpose, bool bDisable);
	void OnChangeCameraAndPlayerMarkerCollisionIgnored(bool bIgnored);
	void OnCameraLightDisableChanged(bool bDisable);
	void OnCameraFovChanged(float NewFOV);
	void Latent_WaitCameraInterpEnd(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void JackStopCamearFade(TEnumAsByte<EJackCameraFadeCategory> Layer);
	void JackSetManualCameraFade(TEnumAsByte<EJackCameraFadeCategory> Layer, TEnumAsByte<EJackCameraFadeZLayer> ZLayer, const struct FLinearColor& Color, float Alpha, bool bShouldFadeAudio);
	void JackPlayCameraFade(TEnumAsByte<EJackCameraFadeCategory> Layer, TEnumAsByte<EJackCameraFadeZLayer> ZLayer, const struct FLinearColor& Color, float Alpha, float Time, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void HiddenControlCollisionComponent_OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	class AEmitterCameraLensEffectBase* FindCameraLensEffectBP(class UClass* LensEffectEmitterClass);
	void DiscloseControlCollisionComponent_OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void CloseupHiddenControlCollisionComponent_OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CloseupDiscloseControlCollisionComponent_OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
};


// Class JackGame.JackPlayerCharacter
// 0x0060 (0x14A0 - 0x1440)
class AJackPlayerCharacter : public AJackPlayableCharacter
{
public:
	class UJackEquipmentControlComponent*              EquipmentControlComponent;                                // 0x1440(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackLookAtComponent*                        LookAtComponent;                                          // 0x1448(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackFriendAnimationSMComponent*             AnimSMComponent;                                          // 0x1450(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharacterType;                                            // 0x1458(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x1459(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAttachObjectDelegate;                                   // 0x1460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDetachObjectDelegate;                                   // 0x1470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              JumpDelayMaxSeconds;                                      // 0x1480(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashJumpDelayMaxSeconds;                                  // 0x1484(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1488(0x0004) MISSED OFFSET
	bool                                               bJumpAccepted;                                            // 0x148C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bReserveFirstParadeAnimation;                             // 0x148D(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x148E(0x0002) MISSED OFFSET
	struct FRotator                                    TurnRotationRateDuringDash;                               // 0x1490(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x149C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerCharacter");
		return ptr;
	}


	void OnReleaseDashButton();
	void OnPressDashButton();
	void OnMovementDisabledChanged(bool bNewCondition);
	void OnJumpRequested();
	void OnFieldActionDisabledChanged(bool bNewCondition);
	void OnDetachObjectDelegate__DelegateSignature();
	void OnAttachObjectDelegate__DelegateSignature();
	bool IsIdling();
	bool IsDelayJump();
};


// Class JackGame.JackPlayerInput
// 0x0000 (0x03A8 - 0x03A8)
class UJackPlayerInput : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerInput");
		return ptr;
	}

};


// Class JackGame.JackPlayerMarker
// 0x0030 (0x03C8 - 0x0398)
class AJackPlayerMarker : public AActor
{
public:
	class USceneComponent*                             RootSceneComponent;                                       // 0x0398(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x03A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackInteractorComponent*                    InteractorComponent;                                      // 0x03A8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B0(0x0010) MISSED OFFSET
	class UJackWeatherAffectComponent*                 CachedWeatherAffectComponent;                             // 0x03C0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerMarker");
		return ptr;
	}


	void OnSymbolEncountDisableChangedBP(bool bDisable);
	void OnSymbolEncountDisableChanged(bool bDisable);
	void OnChangeCameraAndPlayerMarkerCollisionIgnored(bool bIgnored);
};


// Class JackGame.JackPlayerMovementComponent
// 0x0020 (0x0E70 - 0x0E50)
class UJackPlayerMovementComponent : public UJackPlayableMovementComponent
{
public:
	float                                              BrakingDecelerationFloating;                              // 0x0E50(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              FloatingGroundFriction;                                   // 0x0E54(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0E58(0x000C) MISSED OFFSET
	float                                              SlipOffFloorAngle;                                        // 0x0E64(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bCancelSlipOffOnFreeFalling;                              // 0x0E68(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0E69(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerMovementComponent");
		return ptr;
	}

};


// Class JackGame.JackPlayerState
// 0x0000 (0x0428 - 0x0428)
class AJackPlayerState : public APlayerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPlayerState");
		return ptr;
	}

};


// Class JackGame.JackPostProcessControlComponent
// 0x0000 (0x01A0 - 0x01A0)
class UJackPostProcessControlComponent : public UJackCharacterComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPostProcessControlComponent");
		return ptr;
	}

};


// Class JackGame.JackPostProcessVolume
// 0x0000 (0x08F0 - 0x08F0)
class AJackPostProcessVolume : public APostProcessVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPostProcessVolume");
		return ptr;
	}

};


// Class JackGame.JackPreloadAssetTest
// 0x0038 (0x03D0 - 0x0398)
class AJackPreloadAssetTest : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0398(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackPreloadAssetTest.PreloadAssets
	unsigned char                                      UnknownData01[0x10];                                      // 0x03A8(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackPreloadAssetTest.PreloadClasses
	unsigned char                                      UnknownData02[0x10];                                      // 0x03B8(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackPreloadAssetTest.PreloadActorAssets
	class AActor*                                      ChildActor;                                               // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPreloadAssetTest");
		return ptr;
	}

};


// Class JackGame.JackPreloadDataList
// 0x00C0 (0x0458 - 0x0398)
class AJackPreloadDataList : public AActor
{
public:
	bool                                               bButton;                                                  // 0x0398(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bButton2;                                                 // 0x0399(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bButton5;                                                 // 0x039A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x039B(0x0005) MISSED OFFSET
	struct FJackLDT_LevelStreamingStatus               MapStart;                                                 // 0x03A0(0x0010) (Edit, BlueprintVisi)
	struct FName                                       CallName;                                                 // 0x03B0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bButton4;                                                 // 0x03B8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bButton3;                                                 // 0x03B9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x03BA(0x0006) MISSED OFFSET
	TArray<struct FString>                             LevelDataView;                                            // 0x03C0(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<struct FString>                             LevelDataBloc;                                            // 0x03D0(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<struct FString>                             LevelDataNoVisible;                                       // 0x03E0(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x03F0(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackPreloadDataList.LevelNPC
	unsigned char                                      UnknownData03[0x10];                                      // 0x0400(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackPreloadDataList.LevelMonster
	struct FJackPreloadDataListLevelStatus             LevelPersis;                                              // 0x0410(0x0030)
	TArray<struct FJackPreloadDataListLevelStatus>     LevelData;                                                // 0x0440(0x0010) (ZeroConstructor)
	bool                                               bDebug;                                                   // 0x0450(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0451(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPreloadDataList");
		return ptr;
	}

};


// Class JackGame.JackPreloadMapManager
// 0x0028 (0x0060 - 0x0038)
class UJackPreloadMapManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
	TArray<class UObject*>                             SaveObjects;                                              // 0x0048(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPreloadMapManager");
		return ptr;
	}

};


// Class JackGame.JackPreloadMapVolume
// 0x0018 (0x03E8 - 0x03D0)
class AJackPreloadMapVolume : public AVolume
{
public:
	struct FJackLDT_MapStart                           MapStart;                                                 // 0x03D0(0x0010) (Edit, BlueprintVisi)
	bool                                               bTriggerEnabled;                                          // 0x03E0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bClearPreloadMapWhenEndOverlap;                           // 0x03E1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDivisionDownload;                                        // 0x03E2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x03E3(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPreloadMapVolume");
		return ptr;
	}


	class UTextRenderComponent* GetDebugTextComponent();
};


// Class JackGame.JackPresetMaterialTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackPresetMaterialTrack : public UInterpTrack
{
public:
	TArray<struct FJackPresetMaterialKey>              KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPresetMaterialTrack");
		return ptr;
	}

};


// Class JackGame.JackPresetMaterialTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackPresetMaterialTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPresetMaterialTrackInst");
		return ptr;
	}

};


// Class JackGame.JackProjectile
// 0x0098 (0x0430 - 0x0398)
class AJackProjectile : public AActor
{
public:
	class UProjectileMovementComponent*                MovementComp;                                             // 0x0398(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class USphereComponent*                            CollisionComp;                                            // 0x03A0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleComp;                                             // 0x03A8(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              ProjectileLifeSpan;                                       // 0x03B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AfterImpactLifeSpan;                                      // 0x03B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AfterImpactSoundFadeoutTime;                              // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsAttach;                                                // 0x03BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03BD(0x0003) MISSED OFFSET
	int                                                ExplosionDamage;                                          // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExplosionRadius;                                          // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionEffect;                                          // 0x03D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TrailEffect;                                              // 0x03D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BumpNormalSize;                                           // 0x03E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrailDecalMinHeight;                                      // 0x03E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrailDecalMinDistance;                                    // 0x03E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrailDecalAddSize;                                        // 0x03EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x03F0(0x0038) MISSED OFFSET
	bool                                               bHitTimingCallbackCalled;                                 // 0x0428(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0429(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackProjectile");
		return ptr;
	}


	void OnProjectileBeginOverlap(const struct FHitResult& HitResult);
	void OnImpact(const struct FHitResult& HitResult);
};


// Class JackGame.JackProjectileMovementComponent
// 0x0028 (0x0208 - 0x01E0)
class UJackProjectileMovementComponent : public UProjectileMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01E0(0x0004) MISSED OFFSET
	float                                              DelayMovementSeconds;                                     // 0x01E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnProjectileBeginOverlap;                                 // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01F8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackProjectileMovementComponent");
		return ptr;
	}


	void OnUpdateComponentBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnProjectileBeginOverlapDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
};


// Class JackGame.JackPropActor
// 0x0018 (0x03B0 - 0x0398)
class AJackPropActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	class UJackMatineeControlComponent*                MatineeControlComponent;                                  // 0x03A0(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPropActor");
		return ptr;
	}


	void SetHiddenControl(TEnumAsByte<EJackPropHiddenPurpose> Purpose, bool bNewHidden);
	void OnHiddenInGameChanged(bool bNewHiddenInGame);
	bool IsHiddenControl(TEnumAsByte<EJackPropHiddenPurpose> Purpose);
};


// Class JackGame.JackPropsComponent
// 0x00E0 (0x0280 - 0x01A0)
class UJackPropsComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x01A0(0x0058) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPropAttached;                                           // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPropDetached;                                           // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bAsyncLoadOnBeginPlay;                                    // 0x0218(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	class UJackStreamObjectsHolder*                    AsyncLoadedClassesHolder;                                 // 0x0220(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0228(0x0050) MISSED OFFSET
	class UDataTable*                                  DT_AttachedProps;                                         // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPropsComponent");
		return ptr;
	}


	void JackPropDetachSignature__DelegateSignature(const struct FName& PropName);
	void JackPropAttachSignature__DelegateSignature(const struct FName& PropName, class AActor* PropActor);
	bool IsAttachedAnyProps();
	bool IsAttached(const struct FName& PropName);
	void GetPropActorList(TArray<class AJackPropActor*>* OutActorList);
	class AJackPropActor* GetPropActor(const struct FName& PropName);
	bool Detach(const struct FName& PropName);
	class AJackPropActor* Attach(const struct FName& PropName);
};


// Class JackGame.JackScheduledAIController
// 0x05D0 (0x0B50 - 0x0580)
class AJackScheduledAIController : public AJackAIController
{
public:
	unsigned char                                      UnknownData00[0x54C];                                     // 0x0580(0x054C) MISSED OFFSET
	TWeakObjectPtr<class UAnimMontage>                 SuspendAnimation[0x2];                                    // 0x0ACC(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x74];                                      // 0x0ADC(0x0074) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackScheduledAIController");
		return ptr;
	}

};


// Class JackGame.JackRandomAIController
// 0x0008 (0x0B58 - 0x0B50)
class AJackRandomAIController : public AJackScheduledAIController
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0B50(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRandomAIController");
		return ptr;
	}

};


// Class JackGame.JackRecastFilter
// 0x0000 (0x0038 - 0x0038)
class UJackRecastFilter : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRecastFilter");
		return ptr;
	}

};


// Class JackGame.JackRecipeBookManager
// 0x0080 (0x00B8 - 0x0038)
class UJackRecipeBookManager : public UObject
{
public:
	class UDataTable*                                  RecipeBookDataTable;                                      // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  RecipeDataTable;                                          // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x70];                                      // 0x0048(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRecipeBookManager");
		return ptr;
	}


	TArray<struct FJackMessageArgumentData> MakeGetAndReadRecipeBookMessageTag(const struct FName& ItemID, const struct FString& ItemNameTagString, const struct FString& RareTagString);
	void MakeBrowsedRecipeIDList();
	void MakeBlacksmithNewRecipeList();
	void MakeBlacksmithNewRecipeBoolList();
	void STATIC_LearningRecipeSerifuExecution(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TArray<struct FName> LearningList, const struct FName& TextID, const struct FString& TagString, bool bLastTagIsBr, bool bForceMessageEnd);
	bool LearningRecipeBookFromItemId(const struct FName& ItemID, TArray<struct FName>* OutLearningList);
	bool IsNewRecipeExists();
	bool IsLearnedRecipeBookFromItemId(const struct FName& ItemID);
	struct FString GetRecipeName(const struct FName& RecipeId);
	struct FString GetRecipeBookNameFromItemId(const struct FName& ItemID);
	struct FString GetRecipeBookName(const struct FName& RecipeBookID);
	int GetRecipeBookId(const struct FName& RecipeBookID);
	int GetRecipeBookEntryNumberFromItemId(const struct FName& ItemID);
	int GetRecipeBookEntryNumber(const struct FName& RecipeBookID);
	TArray<struct FName> GetRecipeBookEntryIdFromItemId(const struct FName& ItemID);
	TArray<struct FName> GetRecipeBookEntryId(const struct FName& RecipeBookID);
	struct FName GetProductName(const struct FName& RecipeId);
	TArray<int> GetMaterialNumberFromRecipeId(const struct FName& RecipeId);
	TArray<struct FName> GetMaterialIdFromRecipeId(const struct FName& RecipeId);
	TArray<struct FName> GetLearningRecipeList();
	float GetLearningRecipeCompleteRate();
	TArray<struct FName> GetLearningRecipeBookList();
	TArray<struct FName> GetLearningNewRecipeList();
	TArray<struct FName> GetLearningBlacksmithRecipeList(TEnumAsByte<EJackFusigiKaziParts> Type);
	void AddBrowsedRecipeBookList();
};


// Class JackGame.JackReelController
// 0x0020 (0x0058 - 0x0038)
class UJackReelController : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0038(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackReelController");
		return ptr;
	}

};


// Class JackGame.JackReelUtility
// 0x0000 (0x0038 - 0x0038)
class UJackReelUtility : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackReelUtility");
		return ptr;
	}

};


// Class JackGame.JackRenkeiManager
// 0x04C8 (0x0860 - 0x0398)
class AJackRenkeiManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0398(0x0014) MISSED OFFSET
	bool                                               bStartText;                                               // 0x03AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bStartTextMonster;                                        // 0x03AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03AE(0x0002) MISSED OFFSET
	float                                              StartTextTime;                                            // 0x03B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	struct FName                                       StartTextCamera;                                          // 0x03B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RenkeiParticle1Location;                                  // 0x03C0(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     RenkeiParticle2Location;                                  // 0x03CC(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     RenkeiParticleBGLocation;                                 // 0x03D8(0x000C) (Edit, IsPlainOldData)
	bool                                               bVisibleBattleWhiteLine_PGRenkei;                         // 0x03E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bVisibleBattleWhiteLine_MatineeResult;                    // 0x03E5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x03E6(0x0002) MISSED OFFSET
	struct FVector                                     RenkeiDamageParticleLocation;                             // 0x03E8(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x03F4(0x0004) MISSED OFFSET
	TArray<struct FName>                               IgnoreMonsterPhysicalPropertyID;                          // 0x03F8(0x0010) (Edit, ZeroConstructor)
	float                                              RenkeiSkipFadeTime;                                       // 0x0408(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RenkeiEndFadeTime;                                        // 0x040C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackRenkeiEndCamera>                  RenkeiEndCameraMode;                                      // 0x0410(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	float                                              RenkeiEndAfterTime;                                       // 0x0414(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EJackCharacter>>                CharacterChangeRenkeiOrder;                               // 0x0418(0x0010) (Edit, ZeroConstructor)
	TArray<class AMatineeActor*>                       MatineeActorList;                                         // 0x0428(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              SpectacleShowSuccessRate;                                 // 0x0438(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	TArray<struct FJackSpectacularShowData>            SpectacularShowData;                                      // 0x0440(0x0010) (Edit, ZeroConstructor)
	TArray<struct FJackRenkeiFormation>                JackRenkeiFormation;                                      // 0x0450(0x0010) (Edit, ZeroConstructor)
	float                                              JackRenkeiFormationInterval;                              // 0x0460(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JackRenkeiFormationScale;                                 // 0x0464(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JackRenkeiFormationMiniSize;                              // 0x0468(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JackRenkeiFormationMaxSize;                               // 0x046C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x280];                                     // 0x0470(0x0280) MISSED OFFSET
	TArray<class UJackGameCharacter*>                  TargetCharacters;                                         // 0x06F0(0x0010) (ZeroConstructor)
	TArray<class UJackGameCharacter*>                  HiddenCharacterList;                                      // 0x0700(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData08[0x50];                                      // 0x0710(0x0050) MISSED OFFSET
	class UJackStreamObjectsHolder*                    StreamObjectsHolder;                                      // 0x0760(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UJackStreamObjectsHolder*                    VoiceStreamObjectsHolder;                                 // 0x0768(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData09[0x10];                                      // 0x0770(0x0010) MISSED OFFSET
	class UJackRenkeiResourceManager*                  RenkeiResourceManager;                                    // 0x0780(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x88];                                      // 0x0788(0x0088) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               CheckAllTextureStreamLoadedActor;                         // 0x0810(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class AActor>>               RenkeiHiddenControlIgnoredActors;                         // 0x0820(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData11[0x30];                                      // 0x0830(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRenkeiManager");
		return ptr;
	}


	void SetupMatineeActor(class AMatineeActor* MatineeActor);
	void SetMatineeRenkeiSkip(bool InEnable);
	void SetHiddenControlByMatineeRenkei(class AJackCharacter* Actor, TEnumAsByte<EJackCharacterHiddenPurpose> Purpose, bool bNewHidden);
	void RenkeiTeleport(class AJackCharacter* Character, const struct FVector& DestLocation, const struct FRotator& DestRotation, bool bIsATest, bool bNoCheck);
	void RemoveHiddenControlIgnoredActors();
	void ReleaseMatineeActor(class AMatineeActor* MatineeActor);
	void OnStartMatineeRenkei_CreateMatineeSkipUI();
	void OnSetBattleWhiteLineHiddenDecal(bool InHidden);
	void OnMatineeRenkeiStart(bool bSuccess);
	void OnMatineeRenkeiPlay(const struct FName& RenkeiName, const struct FName& RenkeiLevelName, TArray<class AJackCharacter*> AttackerCharaList, class AJackCharacter* TargetCharacter1);
	void OnMatineeRenkeiEndFadeStart(float InFadeTime);
	void OnMatineeRenkeiEnd();
	void OnMatineeRenkeiDivisionLoad(TArray<struct FName> RenkeiLevelNames, TArray<struct FName> LevelNamePass);
	void OnMatineeMonsterDamageReaction();
	void OnMatineeLoadingEnd();
	void OnCreateMatineeSkipUI();
	bool IsSpectaclShowSuccess();
	bool IsRenkeiPlay();
	bool IsMatineeRenkeiSkip();
	bool IsMatineeRenkeiPlay();
	bool IsAllTextureStreamLoaded();
	void InitializeMatineeActor();
	TEnumAsByte<EJackMatineeRenkeiMonsterSize> GetMatineeMonsterSize();
	bool CheckMonsterRenkei(class UJackGameCharacter* TriggerGameCharacter, const struct FJackActionData& ActionData, class UJackGameCharacter** OutRenkeiJoinMember);
	void AddHiddenControlIgnoredActors(TArray<class AActor*> InActors);
};


// Class JackGame.JackRenkeiResourceManager
// 0x00C8 (0x0100 - 0x0038)
class UJackRenkeiResourceManager : public UObject
{
public:
	TMap<unsigned char, class UJackStreamObjectsHolder*> ResourceCache;                                            // 0x0038(0x0050) (ZeroConstructor, Transient)
	TArray<class UJackStreamObjectsHolder*>            ActionResourceCache;                                      // 0x0088(0x0010) (ZeroConstructor, Transient)
	TArray<class UJackStreamObjectsHolder*>            ActionVoiceResourceCache;                                 // 0x0098(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x58];                                      // 0x00A8(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRenkeiResourceManager");
		return ptr;
	}

};


// Class JackGame.JackReservedEffectComponent
// 0x01D0 (0x0370 - 0x01A0)
class UJackReservedEffectComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x170];                                     // 0x01A0(0x0170) MISSED OFFSET
	TArray<TWeakObjectPtr<class UJackBurstEffect>>     FiredBurstEffects;                                        // 0x0310(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x0320(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackReservedEffectComponent");
		return ptr;
	}


	void FireActionEffectDirect(class UClass* EffectClassTemplate, class AJackCharacter* TargetCharacter);
	void DeactivateActionEffectDirect(class AJackActionEffect* InDeactivateEffect);
};


// Class JackGame.JackReservedPlayerControlExecutor
// 0x0000 (0x0398 - 0x0398)
class AJackReservedPlayerControlExecutor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackReservedPlayerControlExecutor");
		return ptr;
	}

};


// Class JackGame.JackResetAnimDynamicsTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackResetAnimDynamicsTrack : public UInterpTrack
{
public:
	TArray<struct FJackResetAnimDynamicsTrackKey>      KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackResetAnimDynamicsTrack");
		return ptr;
	}

};


// Class JackGame.JackResetAnimDynamicsTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackResetAnimDynamicsTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackResetAnimDynamicsTrackInst");
		return ptr;
	}

};


// Class JackGame.JackRigidBodyComponent
// 0x0D60 (0x0F00 - 0x01A0)
class UJackRigidBodyComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01A0(0x0008) MISSED OFFSET
	TArray<struct FJackRigidBodyPhysicsBlendWeightInfo> PhysicsBlendWeightInfos;                                  // 0x01A8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData01[0x78];                                      // 0x01B8(0x0078) MISSED OFFSET
	struct FJackAnimSimulationPartsInfo                AnimSimulationPartsInfos[0x7];                            // 0x0230(0x01B0) (Edit, DisableEditOnInstance)
	class UDataTable*                                  UpperAnimDynamicsStateTable;                              // 0x0E00(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  LowerAnimDynamicsStateTable;                              // 0x0E08(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  HairAnimDynamicsStateTable;                               // 0x0E10(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  MantleAnimDynamicsStateTable;                             // 0x0E18(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  WindRandomizePresetTable;                                 // 0x0E20(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  WindRandomizeVehiclePresetTable;                          // 0x0E28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackAnimExp_DynamicsExpressionTables> DynamicsTableList;                                        // 0x0E30(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData02[0xC0];                                      // 0x0E40(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRigidBodyComponent");
		return ptr;
	}


	void SetPhysicsBlendWeightMultiplier(EJackRigidBodyControlPurpose Purpose, float Multiplier);
	void SetAnimExpressionBlendWeight(EJackDynamicBonePartsSlot Parts, EJackRigidBodyControlPurpose Purpose, float BlendWeight);
	void SetAnimExpressionBlendSpeed(EJackDynamicBonePartsSlot Parts, float BlendSpeed);
	void SetAnimDynamicsBlendWeight(EJackDynamicBonePartsSlot Parts, EJackRigidBodyControlPurpose Purpose, float BlendWeight);
	void SetAnimDynamicsBlendSpeed(EJackDynamicBonePartsSlot Parts, float BlendSpeed);
	void OnSetupSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent);
	void OnPredictedLODLevelChanged(class USkinnedMeshComponent* SkinndMeshComponent, int NewLODLevel, int MaxLODLevel);
	void IgnoreAnimExpressionBlendWeightByAnimCurve(EJackDynamicBonePartsSlot Parts, EJackRigidBodyControlPurpose Purpose, bool bIgnore);
	void IgnoreAnimDynamicsBlendWeightByAnimCurve(EJackDynamicBonePartsSlot Parts, EJackRigidBodyControlPurpose Purpose, bool bIgnore);
	float GetPhysicsBlendWeightMultiplier(EJackRigidBodyControlPurpose Purpose);
	float GetAnimExpressionBlendWeight(EJackDynamicBonePartsSlot Parts);
	float GetAnimExpressionBlendSpeed(EJackDynamicBonePartsSlot Parts);
	float GetAnimDynamicsBlendWeight(EJackDynamicBonePartsSlot Parts);
	float GetAnimDynamicsBlendSpeed(EJackDynamicBonePartsSlot Parts);
	void CallOnPredictedLODLevelChanged(class USkinnedMeshComponent* SkinndMeshComponent, int NewLODLevel, int MaxLODLevel);
};


// Class JackGame.JackRotationControl
// 0x0010 (0x0048 - 0x0038)
class UJackRotationControl : public UObject
{
public:
	TArray<struct FJackRotationInfo>                   RotationInfos;                                            // 0x0038(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRotationControl");
		return ptr;
	}

};


// Class JackGame.JackRouletteAccessor
// 0x0000 (0x0038 - 0x0038)
class UJackRouletteAccessor : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRouletteAccessor");
		return ptr;
	}


	bool IsRedNumber(int InNumber);
};


// Class JackGame.JackRouletteBall
// 0x0108 (0x04A0 - 0x0398)
class AJackRouletteBall : public AActor
{
public:
	float                                              StartHeight;                                              // 0x0398(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              EndHeight;                                                // 0x039C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              OneBetStopRotateAngle;                                    // 0x03A0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              OneBetStopRotateAngleRange;                               // 0x03A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundWheelLoop;                                           // 0x03A8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundBallMtl;                                             // 0x03B0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundBallRck;                                             // 0x03B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundBallPocket;                                          // 0x03C0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DesiredAngleSpeed;                                        // 0x03C8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	class UCurveFloat*                                 SplineTimeOfSpeed;                                        // 0x03D0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PocketInPositionOffset;                                   // 0x03D8(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	struct FVector                                     PocketInBallVelocityScale;                                // 0x03E4(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	class USplineComponent*                            SplineComponent;                                          // 0x03F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        BallMeshComponent;                                        // 0x03F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x0400(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRouletteBall");
		return ptr;
	}


	void UpdateOrbit();
	void Start(float PlayTimeMax);
	void SetState(TEnumAsByte<EJackMiniGameRouletteBallState> InState);
	bool IsEnd();
	bool IsAnimationEnd();
	void InitializeInstance(class USplineComponent* Object, class UStaticMeshComponent* MeshObject);
	float GetTargetAngle(class AStaticMeshActor* Mesh);
	int GetCurrentState();
	float GetAngle();
};


// Class JackGame.JackRouletteBetData
// 0x0050 (0x0088 - 0x0038)
class UJackRouletteBetData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRouletteBetData");
		return ptr;
	}

};


// Class JackGame.JackRouletteMenu
// 0x0058 (0x03F0 - 0x0398)
class AJackRouletteMenu : public AActor
{
public:
	float                                              CursorSpeed;                                              // 0x0398(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                CursorX;                                                  // 0x039C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                CursorY;                                                  // 0x03A0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	class UCurveFloat*                                 AlphaAnimCurve;                                           // 0x03A8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MagnificationOffsetX;                                     // 0x03B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MagnificationOffsetY;                                     // 0x03B4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<class UJackRouletteBetData*>                BetDataArray;                                             // 0x03B8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03C8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRouletteMenu");
		return ptr;
	}


	void SetCursor(int X, int Y);
	int RevertBetCoin();
	void ResetCursor();
	bool MoveCursor(int X, int Y, bool bIsKeyPressed, bool bImmidiate);
	bool JudgeResultTest(int Number, TArray<int> BetNumber);
	bool JudgeResult(int Number);
	void JackRouletteCreateWidgetDelegate__DelegateSignature(class UJackUMGWidgetBase* Widget, const struct FVector2D& Position, int MagnificationIndex);
	bool IsCurrentTreasureBox();
	bool IsBetCoin();
	int GetTotalBetCoin();
	int GetSelectTreasureBoxNo();
	TArray<struct FJackRouletteBetCoinSaveData> GetMenuSaveData();
	int GetMagnification();
	struct FVector2D GetCurrentCursorTargetPos();
	struct FVector2D GetCurrentCursorPos();
	TArray<int> GetCurrentBetNumberArray();
	int GetCanBetCoinNum(int Coin, int OneCoin);
	TArray<int> GetBetNumberArray();
	int GetBetCoinNum();
	int GetBetCoin();
	class UJackRouletteBetData* Find(const struct FString& Name);
	class UJackRouletteBetData* Current();
	void CreateWidgetMagnification(int ResultNumber, class UCanvasPanel* CanvasPanelRoot, class UClass* WidgetClass, const struct FScriptDelegate& Delegate);
	bool CanBet();
	int CalcDividend(int Number, bool bIsJackPot);
	void AddBetCoinAll(int Coin, int Num, TArray<class UJackUMGWidgetBase*> WidgetArray);
	void AddBetCoin(int Coin, class UJackUMGWidgetBase* Widget);
};


// Class JackGame.JackRouletteWheel
// 0x00C8 (0x0460 - 0x0398)
class AJackRouletteWheel : public AActor
{
public:
	float                                              JackPotDecelerationAngle;                                 // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JackPotDecelerationAngleRange;                            // 0x039C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JackPotNearDecelerationAngle;                             // 0x03A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JackPotNearDecelerationAngleRange;                        // 0x03A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JackPotLowerLimitAngleSpeed;                              // 0x03A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JackPotStopOffset;                                        // 0x03AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 JackPotCurve;                                             // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 JackPotNearCurve;                                         // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JackPotCameraDemoStartAngle;                              // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DesiredAngleVelocity;                                     // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StopRandomOffsetRatio;                                    // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x94];                                      // 0x03CC(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRouletteWheel");
		return ptr;
	}


	void SetRouletteEndDelegate(const struct FScriptDelegate& InDelegate);
	void SetRouletteEndCameraDemoDelegate(const struct FScriptDelegate& InDelegate);
	void SetCameraEndDelegate(const struct FScriptDelegate& InDelegate);
	struct FVector GetResultPocketLocationDistance(float InOffsetRadius);
	struct FVector GetResultPocketLocation();
	int GetResultIDNumber(float BallAngle);
	int GetResultDisplayNumber(float BallAngle);
	struct FVector GetJackPotRotationAngle(float OffsetRadius);
	float GetJackPotResetAngle();
	int GetIDFromDisplayNumber(int DisplayNumber);
	int GetDisplayNumberFromID(int ID);
	float GetCurrentEndAngleRatioForNearJackPot();
	float GetCurrentEndAngleRatio();
	float GetAngle();
	void Delegate__DelegateSignature();
	float ClampAngle(float AngleEuler);
};


// Class JackGame.JackTriggerVolume
// 0x0000 (0x03D0 - 0x03D0)
class AJackTriggerVolume : public ATriggerVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTriggerVolume");
		return ptr;
	}

};


// Class JackGame.JackRuraArea
// 0x0008 (0x03D8 - 0x03D0)
class AJackRuraArea : public AJackTriggerVolume
{
public:
	TEnumAsByte<EJackRuraFail>                         FailType;                                                 // 0x03D0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03D1(0x0003) MISSED OFFSET
	int                                                Level;                                                    // 0x03D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRuraArea");
		return ptr;
	}

};


// Class JackGame.JackRuraBase
// 0x01D0 (0x0568 - 0x0398)
class AJackRuraBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET
	bool                                               bNoUseAnimMontageJumpWaitEnd;                             // 0x03A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     RuraCeilCheckChannel;                                     // 0x03A1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03A2(0x0002) MISSED OFFSET
	float                                              CeilLength;                                               // 0x03A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CeilLowerLength;                                          // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	struct FName                                       StartAnimName;                                            // 0x03B0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       StartAnimNonPlayerName;                                   // 0x03B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               StartAnimVehicleFromName;                                 // 0x03C0(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData03[0x18];                                      // 0x03D0(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackRuraBase.StartAnimV011
	unsigned char                                      UnknownData04[0x18];                                      // 0x03E8(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackRuraBase.StartAnimShip
	unsigned char                                      UnknownData05[0x18];                                      // 0x0400(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackRuraBase.StartA028Anim
	struct FName                                       EndAnimName;                                              // 0x0418(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       SplSingAnimName;                                          // 0x0420(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       SplSingAnimNonPlayerName;                                 // 0x0428(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               SplSingAnimVehicleName;                                   // 0x0430(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	struct FName                                       SplPlayAnimName;                                          // 0x0440(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       SplPlayAnimNonPlayerName;                                 // 0x0448(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               SplPlayAnimVehicleName;                                   // 0x0450(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	struct FName                                       SplPlayEndAnimName;                                       // 0x0460(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       SplPlayEndAnimNonPlayerName;                              // 0x0468(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               SplPlayEndAnimVehicleName;                                // 0x0470(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData06[0x18];                                      // 0x0480(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackRuraBase.RuraSoundAtShipOrKetos
	unsigned char                                      UnknownData07[0x18];                                      // 0x0498(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackRuraBase.RuraEndSoundAtShipOrKetos
	struct FName                                       RuraUse;                                                  // 0x04B0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       RuraCannotUse;                                            // 0x04B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       RuraMissTextIdStrangePower;                               // 0x04C0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ChimeraUse;                                               // 0x04C8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ChimeraCannotUse;                                         // 0x04D0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ChimeraMissTextIdStrangePower;                            // 0x04D8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       RiremitoUse;                                              // 0x04E0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       RiremitoCannotUse;                                        // 0x04E8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       RiremitoMissTextIdStrangePower;                           // 0x04F0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ItemUse;                                                  // 0x04F8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ItemCannotUse;                                            // 0x0500(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ItemMissTextIdStrangePower;                               // 0x0508(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       MissTextIdCeil;                                           // 0x0510(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x50];                                      // 0x0518(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackRuraBase");
		return ptr;
	}


	void StartJump(TEnumAsByte<EJackCharacter> InCharaType, TEnumAsByte<EJackRuraPurpose> InType, const struct FName& InJumpTag, TEnumAsByte<EJackItem_Bag> BagType, int ItemIndex);
	void SetRuraFailSetting(TEnumAsByte<EJackRuraFail> InFailType, int Level);
	void STATIC_ResetRuraJumpPurpose(class UObject* WorldContext);
	void OnStartJumpNoAnimMontageStart(TEnumAsByte<EJackRuraFail> InType);
	void OnStartJump(TEnumAsByte<EJackRuraPurpose> InPurpose, const struct FName& InJumpTag);
	void OnRiremitoJumpNoAnimMontageStart(TEnumAsByte<EJackRuraFail> InType);
	void OnEndJump();
	void OnDebugCheckOverlapActor(class AActor* InActor);
	void OnDebugCheck(TEnumAsByte<EJackRuraFail> InFail);
	void Latent_StartJump(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EJackRuraPurpose> InType, const struct FName& InJumpTag, TEnumAsByte<EJackItem_Bag> BagType, int ItemIndex, TEnumAsByte<EJackCharacter> InCharaType);
	void Latent_EndJump(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	bool IsCancelEnd();
	struct FName STATIC_GetJumpTag(class UObject* WorldContext);
	TEnumAsByte<EJackRuraPurpose> STATIC_GetJumpPurpose(class UObject* WorldContext);
	void EndJump();
	void DelegateBindWaitEndSerif();
	class AJackRuraBase* STATIC_CreateRuraActor(class UObject* WorldContextObject);
};


// Class JackGame.JackSafeAreaManager
// 0x0058 (0x03F0 - 0x0398)
class AJackSafeAreaManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0398(0x0050) MISSED OFFSET
	bool                                               bDebugDrawEnabled;                                        // 0x03E8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSafeAreaManager");
		return ptr;
	}


	bool CalcSafeArea(const struct FVector& InLocation, float InRadius, struct FVector* OutLocation);
};


// Class JackGame.JackSafeAreaVolume
// 0x0010 (0x03E0 - 0x03D0)
class AJackSafeAreaVolume : public AVolume
{
public:
	bool                                               bDirectionEnable;                                         // 0x03D0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPinpointEnable;                                          // 0x03D1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03D2(0x0002) MISSED OFFSET
	TWeakObjectPtr<class AJackLocator>                 PointLocator;                                             // 0x03D4(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInvalid;                                               // 0x03DC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSafeAreaVolume");
		return ptr;
	}

};


// Class JackGame.JackSaveData
// 0xC008 (0xC040 - 0x0038)
class UJackSaveData : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC008];                                    // 0x0038(0xC008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSaveData");
		return ptr;
	}


	void SetMainSlotIndex(int SlotIndex);
	void SetKaziLastTimePlayerLv(int Lv);
	void SetActiveMapID(const struct FName& MapId);
	void RecordRideMonsterVehicle(TEnumAsByte<EJackVehicle> VehicleID);
	void RecordExecuteMonsterRenkei(const struct FName& MonsterRenkeiID);
	void IncrementUseTokugiCount(const struct FName& ActionID);
	void IncrementRenkeiUseCount(const struct FName& RenkeiID);
	void IncrementQuestClearCount();
	void IncrementObjectDestructionCount();
	void IncrementInnStayCount();
	void IncrementCampCount();
	void IncrementBlowAwayMonsterCount();
	void IncrementBattleVictoryCount();
	void IncrementBattleCountBySwordAttack();
	int GetUseTokugiCount(const struct FName& ActionID);
	EJackScenarioPlaythrough GetScenarioPlaythrough();
	int GetRenkeiUseKind();
	int GetRenkeiUseCount();
	int GetQuestClearCount();
	struct FJackOptionData GetOptionData();
	int GetOpenedMonsterZukanCount();
	void GetOpenedMonsterZukan(TArray<struct FName>* OutZukanIDList);
	int GetObjectDestructionCount();
	int GetMonsterVehicleRideKind();
	int GetMonsterRenkeiExecuteKind();
	struct FJackMiniGameData GetMiniGameData();
	int GetMainSlotIndex();
	struct FName GetLatestScenarioFlag(TEnumAsByte<EJackScenarioID> ScenarioID);
	int GetInnStayCount();
	int GetDefeatMonsterTotalCount();
	int GetDefeatMonsterKind();
	int GetDefeatMonsterCount(const struct FName& MonsterID);
	int GetDefeatMetalMonsterTotalCount();
	int GetCampCount();
	int GetBlowAwayMonsterCount();
	int GetBattleVictoryCount();
	int GetBattleCountBySwordAttack();
	TEnumAsByte<EJackScenarioID> GetActiveScenarioID();
	EJackScenarioGroup GetActiveScenarioGroup();
	struct FName GetActiveScenarioFlag();
	struct FName GetActiveMapID();
	void AddDefeatMonsterCount(const struct FName& MonsterID, int AddCount, bool bSkipAchievementCheck);
};


// Class JackGame.JackSaveLoadManager
// 0x00D0 (0x0108 - 0x0038)
class UJackSaveLoadManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0038(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSaveLoadManager");
		return ptr;
	}

};


// Class JackGame.JackSceneInRoomTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSceneInRoomTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSceneInRoomTrack");
		return ptr;
	}

};


// Class JackGame.JackSceneInRoomTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSceneInRoomTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSceneInRoomTrackInst");
		return ptr;
	}

};


// Class JackGame.JackScheduledKira
// 0x0040 (0x03E0 - 0x03A0)
class AJackScheduledKira : public AJackLocator
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x03A0(0x0028) MISSED OFFSET
	class UDataTable*                                  DataTable;                                                // 0x03C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       KiraScheduleID;                                           // 0x03D0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x03D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackScheduledKira");
		return ptr;
	}


	class AActor* OnSpawnKira(const struct FName& ItemID, int ItemNum, const struct FVector& Location, const struct FName& RespawnSaveFlagName);
	bool OnRequestDestroy(class AActor* Actor);
	bool IsAlreadyGotten();
	int GetAppearedKiraCount();
	void ForceSetReplacementSec(float Seconds);
};


// Class JackGame.JackScheduledNPC
// 0x32B0 (0x43C0 - 0x1110)
class AJackScheduledNPC : public AJackNPC
{
public:
	TEnumAsByte<EJackNPCType>                          NPCType;                                                  // 0x1110(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharacterType;                                            // 0x1111(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackPipipiType>                       PipipiType;                                               // 0x1112(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x1113(0x0005) MISSED OFFSET
	struct FName                                       ScheduleJumpFinishEventName;                              // 0x1118(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       TalkStartEventName;                                       // 0x1120(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       TalkSequenceEventName;                                    // 0x1128(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       TalkEndEventName;                                         // 0x1130(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ForceTalkStartEventName;                                  // 0x1138(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ForceTalkSequenceEventName;                               // 0x1140(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       ForceTalkEndEventName;                                    // 0x1148(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ExtraPropsIDList;                                         // 0x1150(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	struct FJackSerifuAutomationFlags                  SerifuAutomationFlags;                                    // 0x1160(0x0005) (Edit, BlueprintVisi)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1165(0x0003) MISSED OFFSET
	class UAnimMontage*                                DefaultAnimMontageAfterInterruptWait;                     // 0x1168(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                AnimMontageTurnWhileTalking;                              // 0x1170(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimationAsset*                             SynchroAnimationWhileRiding;                              // 0x1178(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExtraNPCCapsuleComponentClass;                            // 0x1180(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_SkipFootIK_Distance;                        // 0x1188(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_SkipFacial_Distance;                        // 0x118C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_SkipAnimDynamics_Distance;                  // 0x1190(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_SkipLookAt_Distance;                        // 0x1194(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_PauseOwner_Distance;                        // 0x1198(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_HiddenOwner_Distance;                       // 0x119C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LoadReduction_SkipSkeletalMeshComponent_Distance;         // 0x11A0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LoadReduction_SkipSkeletalMeshComponent_Velocity;         // 0x11A4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UsingDitherDistance;                                      // 0x11A8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendSpaceAccelerationUp;                                 // 0x11AC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BlendSpaceAccelerationDown;                               // 0x11B0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultSpeed;                                             // 0x11B4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumTrackSpeed;                                        // 0x11B8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AfterInterruptPlayerLeaveDistance;                        // 0x11BC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bInitialHide;                                             // 0x11C0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bThinCapsuleRadiusEnable;                                 // 0x11C1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bGroundSlopeMatching;                                     // 0x11C2(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSynchroAnimationWithProps;                               // 0x11C3(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNeverPlaySlotAnimation;                                  // 0x11C4(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNeverEnabledFootIK;                                      // 0x11C5(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x11C6(0x0002) MISSED OFFSET
	int                                                HazukasiiNoroiTalkRate;                                   // 0x11C8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x11CC(0x0004) MISSED OFFSET
	TArray<struct FJackScheduledNPCMoveParameter>      MoveParameterList;                                        // 0x11D0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TWeakObjectPtr<class AJackScheduledNPC>            RidingCharacter;                                          // 0x11E0(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AJackScheduledNPC>            RodeCharacter;                                            // 0x11E8(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AActor>                       GazeTriggerActor;                                         // 0x11F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x108];                                     // 0x11F8(0x0108) MISSED OFFSET
	TWeakObjectPtr<class UJackInteractiveActorComponent> InteractiveActorComponent;                                // 0x1300(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UJackInteractorComponent>     InteractorComponent;                                      // 0x1308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UJackPropsComponent>          PropsComponent;                                           // 0x1310(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackLoadReductionComponent*                 LoadReductionComponent;                                   // 0x1318(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x178];                                     // 0x1320(0x0178) MISSED OFFSET
	TWeakObjectPtr<class UAnimMontage>                 AfterInterruptTurnAnimation;                              // 0x1498(0x0008) (ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UAnimMontage>                 AfterInterruptWaitAnimation;                              // 0x14A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2F18];                                    // 0x14A8(0x2F18) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackScheduledNPC");
		return ptr;
	}


	void TurnToActorInBPControl(class AActor* Gaze, class UAnimMontage* AnimMontage, float Speed, bool bAnimationStop);
	void TalkTurnSetting(TEnumAsByte<EJackNPCTalkGazeMode> GazeMode, class AJackCharacter* Gaze);
	void StartTalkEx(class AActor* SayActor, bool bOverrideTalkParameter, const struct FJackTalkParameter& OverrideTalkParameter, TArray<struct FJackMessageArgumentData> OverrideTagValueList);
	void StartTalk(class AActor* SayActor, bool bOverrideTalkParameter, const struct FJackTalkParameter& OverrideTalkParameter);
	void SetupPartyTalkVoiceTag(TEnumAsByte<EJackCharacter> InVoiceCharacter, const struct FName& InTextId);
	void SetupPartyTalkVoice(const struct FJackPartyTalkDescription& InDescription);
	void SetSchedulePattern(int NextPatternID, bool bUsingStack);
	void SetReactionExternalTrigger(TEnumAsByte<EJackNPCReactionExternalTrigger> Trigger);
	void SetLoadReduction_SkipLookAt_Distance(float Distance);
	void SetLoadReduction_SkipFootIK_Distance(float Distance);
	void SetLoadReduction_HiddenOwner_Distance(float Distance);
	void SetInterruptAccept(bool bTalk, bool bPlayerAvoid, bool bEscapeFastMoving, bool bReactionAroundPlayer, bool bStopAtPlayerForTalk);
	void SetImportance(TEnumAsByte<EJackNPCImportance> NowImportance);
	void SetForceFixedLocation(bool bFlag, bool bCollisionCheck);
	void SetForceAfterInterruptPlayerLeaveDistance(float Distance);
	void SetExecuteNextScheduleBeforeMovingComplete(bool bMode);
	void SetCampInitialize();
	void SetBlendSpaceAcceleration(float AccelerationUp, float AccelerationDown);
	void ScheduleEntryStart(int StartHour, int StartMinute, int EndHour, int EndMinute, int Pattern, bool bLoop, bool bDisappear, bool bDoNotSkipTickAtLoadReduction, bool bIgnoreCollision, bool bDoNotSkipTickAtLoadReductionDoSkip);
	void ScheduleEntry_WanderAround(class AActor* Center, float Radius, float Speed, int MinWaitMinute, int MaxWaitMinute, int DurationMinute, int ScheduleControlIndex, int ScheduleControlCounter);
	void ScheduleEntry_WaitSynchroNPC(class AJackScheduledNPC* SynchroNPC);
	void ScheduleEntry_WaitScheduleControlCounter(int Index, int Counter);
	void ScheduleEntry_TurnToLocation(const struct FVector& Gaze, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void ScheduleEntry_TurnToComponent(class UPrimitiveComponent* Gaze, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void ScheduleEntry_TurnToAngle(float Angle, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void ScheduleEntry_TurnToActor(class AActor* Gaze, float Speed, float Allowance, class UAnimMontage* AnimMontage);
	void ScheduleEntry_TrackToActor(class AActor* Actor, int DurationMinute, int ScheduleControlIndex, int ScheduleControlCounter);
	void ScheduleEntry_Teleport(const struct FVector& Location, float Angle);
	void ScheduleEntry_SynchroNPCTurnToActor(class AJackScheduledNPC* SynchroNPC, class AActor* Gaze, float Speed, float Allowance, class UAnimMontage* AnimMontage, bool bWait);
	void ScheduleEntry_SynchroNPCAnimation(class AJackScheduledNPC* SynchroNPC, class UAnimMontage* AnimMontage, bool bStop, bool bWait);
	void ScheduleEntry_SetTalkParameter(const struct FName& FrontMessageName, const struct FName& BehindMessageName, TEnumAsByte<EJackNPCTalkGazeMode> GazeMode, class UAnimMontage* StartAnimMontage, class UAnimMontage* EndAnimMontage, class UAnimMontage* EndWaitAnimMontage, bool bPlayAnimation, bool bUseCommonTalkCamera, bool bDisableTalkSoonAfterTalk, const struct FName& StartEventName, const struct FName& SequenceEventName, const struct FName& EndEventName);
	void ScheduleEntry_SetSynchroNPC(class AJackScheduledNPC* SynchroNPC, float FormationAngle, float FormationDistance);
	void ScheduleEntry_SetScheduleControlCounter(int Index, int Counter);
	void ScheduleEntry_SetMonologueInfo(const struct FString& FukidasiID, bool bOnceOnly);
	void ScheduleEntry_SetInterruptMode(bool bAcceptTalk, bool bAcceptPlayerAvoid, bool bAcceptEscapeFastMoving);
	void ScheduleEntry_SetBlendSpaceNo(int BlendSpaceNo);
	void ScheduleEntry_SetAttachObject(class AActor* AttachObject, const struct FName& SocketName, bool bAttachImmediately);
	void ScheduleEntry_Ride(class AJackScheduledNPC* RideCharacter, const struct FName& RideSocketName);
	void ScheduleEntry_ResumeSchedulePattern();
	void ScheduleEntry_ReleaseSynchroNPC(class AJackScheduledNPC* SynchroNPC);
	void ScheduleEntry_NearActorAction(class AActor* CheckActor, float DistanceThreshold, float ResetDistance, int PatternID, bool bUsingStack, const struct FName& EventName);
	void ScheduleEntry_MoveToLocation(const struct FVector& Goal, float Speed, class UAnimMontage* AnimMontage);
	void ScheduleEntry_MoveToComponent(class UPrimitiveComponent* Goal, float Speed, class UAnimMontage* AnimMontage);
	void ScheduleEntry_MoveToActor(class AActor* Goal, float Speed, class UAnimMontage* AnimMontage);
	void ScheduleEntry_LoopTop();
	void ScheduleEntry_LookAtLocation(const struct FVector& Location, bool bSingleNode, float Distance, float Angle);
	void ScheduleEntry_LookAtEnd();
	void ScheduleEntry_LookAtCharacter(class AJackCharacter* Character, const struct FName& Socket, bool bSingleNode, float Distance, float Angle);
	void ScheduleEntry_IncScheduleControlCounter(int Index);
	void ScheduleEntry_CallCustomEvent(const struct FName& EventName);
	void ScheduleEntry_AttachObjectAnimation(class AActor* AttachObject, class UAnimMontage* AnimMontage, bool bStop);
	void ScheduleEntry_AnimationStop(class UAnimMontage* AnimMontage);
	void ScheduleEntry_Animation(class UAnimMontage* AnimMontage, class UAnimMontage* AdditiveAnimMontage, int Minute, int ScheduleControlIndex, int ScheduleControlCounter, class UAnimMontage* ScheduleChangeAnimMontage1, class UAnimMontage* ScheduleChangeAnimMontage1_Additive, class UAnimMontage* ScheduleChangeAnimMontage2, class UAnimMontage* ScheduleChangeAnimMontage2_Additive);
	void ScheduleEntry_Alight();
	void ResumeSchedulePattern();
	void PlayAnimationInBPControl(class UAnimMontage* AnimMontage, class UAnimMontage* AdditiveAnimMontage, float AdditiveRate, bool bCanSkipImmidiately);
	void PlayAnimationByTypeInBPControl(const struct FName& AnimationID, bool bCanSkipImmidiately);
	void OverwriteMoveSpeed();
	void OnReplaceNPCTalkEndAnimation(class UAnimMontage* AnimMontage, bool bForceSkipAnimation);
	void OnInitializeProps();
	void MovableForciblyEvenIfNotGrounded();
	void LookAtStartSetting();
	void LookAtEndSetting();
	void Latent_WaitForTalk(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Latent_WaitForInitialize(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bStartBPControl, bool bWaitOnGround);
	bool IsValidMonologue();
	bool IsInterruptMode();
	bool IsInterruptAccept(TEnumAsByte<EJackNPCInterruptAccept> AcceptFlag);
	bool IsInitialized();
	bool IsFocusedByPlayer();
	bool IsFirstGrounded();
	bool IsDoNotCloseFukidasi();
	bool IsCompletedSchedule();
	struct FJackTalkParameter GetTalkParameter(bool bCorrectGazeMode);
	TEnumAsByte<EJackNPCTalkMode> GetTalkMode();
	TArray<struct FJackMessageArgumentData> GetTagValueList();
	int GetSchedulePattern();
	float GetMaxSpeed(int BlendSpaceIndex);
	TEnumAsByte<EJackNPCImportance> GetImportance();
	float GetBlendSpaceSpeed();
	float GetBlendSpaceRate(int Index);
	void ForciblyGrounded();
	void FinishTalkStartEvent();
	void FinishTalkSequenceEvent();
	void FinishTalkEndEvent();
	class UAnimMontage* CorrectTalkPlayAnimation(const struct FName& MessageName, bool bOriginalPlayAnimation, class UAnimMontage* AnimMontage);
	TEnumAsByte<EJackNPCTalkGazeMode> CorrectTalkGazeMode(const struct FName& MessageName, bool bTalkBehind);
	void ClearSchedule();
};


// Class JackGame.JackScheduledNPCManager
// 0x0320 (0x06B8 - 0x0398)
class AJackScheduledNPCManager : public AActor
{
public:
	class UDataTable*                                  ReactionTable;                                            // 0x0398(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ReactionAnimationTable;                                   // 0x03A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  InterruptControlTable;                                    // 0x03A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  UsoTalkTable;                                             // 0x03B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackHazukasiiNoroiTalk>             HazukasiiNoroiTalkParams;                                 // 0x03B8(0x0010) (Edit, ZeroConstructor)
	struct FScriptMulticastDelegate                    CompleteActionInBPControl;                                // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x210];                                     // 0x03D8(0x0210) MISSED OFFSET
	TMap<int, struct FJackScheduledNPCAppendObjectInfo> AppendObjectInfoList;                                     // 0x05E8(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0638(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackScheduledNPCManager");
		return ptr;
	}


	struct FName UsoWoTsukuTalkCheck(class AJackScheduledNPC* NPC);
	void RequestAsyncLoadAppendObjectCallback(TArray<struct FSoftObjectPath> TargetsToStream, TArray<class UObject*> LoadedObjects, int UniqueNumber);
	struct FJackHazukasiiNoroiTalkParam HazukasiiNoroiTalkCheckByRate(int InRate);
	struct FJackHazukasiiNoroiTalkParam HazukasiiNoroiTalkCheck(class AJackScheduledNPC* NPC);
	void CompleteActionInBPControl__DelegateSignature(class AJackScheduledNPC* NPC, TEnumAsByte<EJackNPCActionTypeInBPControl> ActionType);
};


// Class JackGame.JackSeparateTranslucencyTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSeparateTranslucencyTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSeparateTranslucencyTrack");
		return ptr;
	}

};


// Class JackGame.JackSeparateTranslucencyTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSeparateTranslucencyTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSeparateTranslucencyTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSerifuInputDisableTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSerifuInputDisableTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSerifuInputDisableTrack");
		return ptr;
	}

};


// Class JackGame.JackSerifuInputDisableTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSerifuInputDisableTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSerifuInputDisableTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSetBlinkEnableTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSetBlinkEnableTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetBlinkEnableTrack");
		return ptr;
	}

};


// Class JackGame.JackSetEmotionTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackSetEmotionTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetEmotionTrack");
		return ptr;
	}

};


// Class JackGame.JackSetEmotionTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSetEmotionTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetEmotionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSetLowerFacePoseTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackSetLowerFacePoseTrack : public UInterpTrack
{
public:
	class UDataTable*                                  FaceNameTable;                                            // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackSetLowerFacePoseKeyValue>       KeyArray;                                                 // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetLowerFacePoseTrack");
		return ptr;
	}

};


// Class JackGame.JackSetToneTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackSetToneTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetToneTrack");
		return ptr;
	}

};


// Class JackGame.JackSetToneTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSetToneTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetToneTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSetUpperFacePoseTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackSetUpperFacePoseTrack : public UInterpTrack
{
public:
	class UDataTable*                                  FaceNameTable;                                            // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackSetUpperFacePoseKeyValue>       KeyArray;                                                 // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetUpperFacePoseTrack");
		return ptr;
	}

};


// Class JackGame.JackSetWorldTimeTrack
// 0x0010 (0x00C0 - 0x00B0)
class UJackSetWorldTimeTrack : public UInterpTrackFloatBase
{
public:
	TArray<struct FJackSetWorldTimeTrackInfo>          TimeInfos;                                                // 0x00B0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetWorldTimeTrack");
		return ptr;
	}

};


// Class JackGame.JackSetWorldTimeTrackInst
// 0x0018 (0x0050 - 0x0038)
class UJackSetWorldTimeTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSetWorldTimeTrackInst");
		return ptr;
	}

};


// Class JackGame.JackShadowRadiusThresholdTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackShadowRadiusThresholdTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackShadowRadiusThresholdTrack");
		return ptr;
	}

};


// Class JackGame.JackShadowTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackShadowTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackShadowTrack");
		return ptr;
	}

};


// Class JackGame.JackShareManager
// 0x00A8 (0x00E0 - 0x0038)
class UJackShareManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0038(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackShareManager");
		return ptr;
	}

};


// Class JackGame.JackSibariManager
// 0x0020 (0x0058 - 0x0038)
class UJackSibariManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnSibariSettingModify;                                    // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSibariManager");
		return ptr;
	}


	void SibariSettingModifyDelegate__DelegateSignature(TEnumAsByte<EJackSibari> Type, bool bFlag);
	void SetSibariPlayFlag(TEnumAsByte<EJackSibari> Type, bool bFlag);
	void SetSibariPlayDisplayFlag(bool bFlag);
	void ResetSibariPlayFlag();
	bool IsSibariPlayFlag(TEnumAsByte<EJackSibari> Type);
	bool IsSibariPlayDisplayFlag();
	int GetSibariPlayCount();
};


// Class JackGame.JackSkipAnimationIntervalTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackSkipAnimationIntervalTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSkipAnimationIntervalTrack");
		return ptr;
	}

};


// Class JackGame.JackSkipAnimationIntervalTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackSkipAnimationIntervalTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSkipAnimationIntervalTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSkipSuspendTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSkipSuspendTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSkipSuspendTrack");
		return ptr;
	}

};


// Class JackGame.JackSkipSuspendTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSkipSuspendTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSkipSuspendTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSkipTimelineTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSkipTimelineTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSkipTimelineTrack");
		return ptr;
	}

};


// Class JackGame.JackSkipTimelineTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSkipTimelineTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSkipTimelineTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSlotUtils
// 0x0000 (0x0038 - 0x0038)
class UJackSlotUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSlotUtils");
		return ptr;
	}

};


// Class JackGame.JackSnapToGroundTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackSnapToGroundTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSnapToGroundTrack");
		return ptr;
	}

};


// Class JackGame.JackSoftBodyComponent
// 0x0110 (0x02B0 - 0x01A0)
class UJackSoftBodyComponent : public UJackCharacterComponent
{
public:
	class UMaterialInterface*                          OutlineMaterial;                                          // 0x01A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xD4];                                      // 0x01AC(0x00D4) MISSED OFFSET
	float                                              ClothBlendModeChangeSpeed;                                // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	TArray<class USkeletalMeshComponent*>              ClothMeshes;                                              // 0x0288(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0298(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSoftBodyComponent");
		return ptr;
	}


	void SetClothBlendWeightMultiplier(EJackSoftBodyControlPurpose Purpose, float Multiplier);
	void OnPredictedLODLevelChanged(class USkinnedMeshComponent* SkinndMeshComponent, int NewLODLevel, int MaxLODLevel);
	float GetClothBlendWeightMultiplier(EJackSoftBodyControlPurpose Purpose);
	void EvaluateClothMeshesAssignment(TArray<class USkeletalMeshComponent*> SkeletalMeshComponents);
	void CallOnPredictedLODLevelChanged(class USkinnedMeshComponent* SkinndMeshComponent, int NewLODLevel, int MaxLODLevel);
	void ApplyClothBlendWeightMultiplier();
};


// Class JackGame.JackSoundContext
// 0x0030 (0x0068 - 0x0038)
class UJackSoundContext : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
	class USoundBase*                                  SoundBase;                                                // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSoundContext");
		return ptr;
	}

};


// Class JackGame.JackEnvSoundContext
// 0x0018 (0x0080 - 0x0068)
class UJackEnvSoundContext : public UJackSoundContext
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackEnvSoundContext");
		return ptr;
	}

};


// Class JackGame.JackSoundEffectContext
// 0x0000 (0x0068 - 0x0068)
class UJackSoundEffectContext : public UJackSoundContext
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSoundEffectContext");
		return ptr;
	}

};


// Class JackGame.JackSoundManager
// 0x0090 (0x00C8 - 0x0038)
class UJackSoundManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    SoundChangeWeatherDelegate;                               // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	bool                                               bAllowChangeBGM;                                          // 0x0050(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0051(0x000F) MISSED OFFSET
	TArray<class UJackSoundContext*>                   SoundList;                                                // 0x0060(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0070(0x0028) MISSED OFFSET
	bool                                               bForceMuteMusic;                                          // 0x0098(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FJackSoundRainFootstepAssets                RainFootstepAssets;                                       // 0x00A0(0x0028) (Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSoundManager");
		return ptr;
	}


	void StopInGameSound(float InFadeTime);
	void StopEnvSound(float InDuration);
	void StopAllSounds(float FadeOutTime);
	void SetVoiceSoundVolume(float InVolume, float InFadeTime);
	void SetRainFootstepSound(const struct FJackSoundRainFootstepAssets& InRainFootstepAssets);
	void SetRain(bool IsRain);
	void SetInGameSoundVolume(float InVolume, float InFadeTime, bool bIsWithVoice);
	void SetInGameCutSceneCategoryVolume(float InVolume, float InFadeTime);
	void SetFieldSoundVolume(float Volume, float FadeTime);
	void SetDokodemoKaziCategoryVolume(float InVolume, float InFadeTime);
	void SetCutSceneCategoryVolume(float InVolume, float InFadeTime);
	void SetChangeBGMAllowed(bool IsChangeBGM);
	void SetBattleFieldCategoryVolume(float InVolume, bool bIsSetCategory);
	void PlaySEFromSound(class USoundBase* InSoundBase);
	void JackSoundChangeWeatherDelegate__DelegateSignature(bool InEventTag, TEnumAsByte<EJackWorldWeather> InWeatherType, TEnumAsByte<EJackWorldWindLevel> InWindLevelType);
	bool IsValidEnvSoundByMapId(const struct FName& InMapId, bool bInNightTime, TEnumAsByte<EJackWorldWeather> InWeatherType, TEnumAsByte<EJackWorldWindLevel> InWindLevelType);
	bool IsRain();
	bool IsPlayEnvSound();
	bool IsIdle();
	bool IsEnableAnimNotifyFootstep();
	void FadeOutAllSounds(float FadeOutTime, bool bFadeOutBGM);
	void EnableRainFootstepSound(bool IsRainFootstepSound);
	void EnableAnimNotifyFootstep(bool bIsEnable);
};


// Class JackGame.JackSoundMiscControlTrack
// 0x0010 (0x00A0 - 0x0090)
class UJackSoundMiscControlTrack : public UInterpTrack
{
public:
	TArray<struct FJackSoundMiscControlTrackKey>       KeyArray;                                                 // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSoundMiscControlTrack");
		return ptr;
	}

};


// Class JackGame.JackSoundMiscControlTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackSoundMiscControlTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSoundMiscControlTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSphereComponent
// 0x0020 (0x0780 - 0x0760)
class UJackSphereComponent : public USphereComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0760(0x0008) MISSED OFFSET
	struct FName                                       AutoAttachSocketName;                                     // 0x0768(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EAttachLocation>                       AutoAttachType;                                           // 0x0770(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0771(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSphereComponent");
		return ptr;
	}

};


// Class JackGame.JackSplinePathCameraData
// 0x0020 (0x0060 - 0x0040)
class UJackSplinePathCameraData : public UJackCameraData
{
public:
	struct FRotator                                    MoveAngleMin;                                             // 0x0040(0x000C) (Edit, IsPlainOldData)
	struct FRotator                                    MoveAngleMax;                                             // 0x004C(0x000C) (Edit, IsPlainOldData)
	float                                              CenteringLerpSpeed;                                       // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSplinePathCameraData");
		return ptr;
	}

};


// Class JackGame.JackSpotLightInnerConeAngleTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackSpotLightInnerConeAngleTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSpotLightInnerConeAngleTrack");
		return ptr;
	}

};


// Class JackGame.JackSpotLightInnerConeAngleTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackSpotLightInnerConeAngleTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSpotLightInnerConeAngleTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSpotLightOuterConeAngleTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackSpotLightOuterConeAngleTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSpotLightOuterConeAngleTrack");
		return ptr;
	}

};


// Class JackGame.JackSpotLightOuterConeAngleTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackSpotLightOuterConeAngleTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSpotLightOuterConeAngleTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSQEXNGWordManager
// 0x0030 (0x0068 - 0x0038)
class UJackSQEXNGWordManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0038(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSQEXNGWordManager");
		return ptr;
	}


	TArray<struct FString> GetNGWordList();
};


// Class JackGame.JackStaticMeshCollisionActor
// 0x0008 (0x03B0 - 0x03A8)
class AJackStaticMeshCollisionActor : public AStaticMeshActor
{
public:
	class UStaticMeshComponent*                        CollisionStaticMeshComponent;                             // 0x03A8(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackStaticMeshCollisionActor");
		return ptr;
	}

};


// Class JackGame.JackAocManager
// 0x0090 (0x00C8 - 0x0038)
class UJackAocManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0038(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackAocManager");
		return ptr;
	}

};


// Class JackGame.JackStoreManager
// 0x0038 (0x0070 - 0x0038)
class UJackStoreManager : public UObject
{
public:
	class UJackAocManager*                             JackAocManager;                                           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0040(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackStoreManager");
		return ptr;
	}


	bool OpenVoiceDramaStore();
	bool OpenPresentItemStore();
	bool OpenPresentCodeInputScreen();
	bool OpenOmakeStore();
	bool OpenFukkatunoJumonStore();
	bool OpenDuoAppStore();
	bool IsCheckingBrowseNetwork();
	bool IsBrowseOpenRequest();
	bool IsBrowseOpen();
	TEnumAsByte<EJackNetworkCheckResult> GetCheckBrowseNetworkResult();
	TEnumAsByte<EJackStoreResult> GetBrowseResult();
	void CheckBrowseNetwork();
};


// Class JackGame.JackStreamableManager
// 0x0100 (0x0138 - 0x0038)
class UJackStreamableManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF0];                                      // 0x0038(0x00F0) MISSED OFFSET
	TArray<class UJackStreamObjectsReceiver*>          StreamObjectsReceivers;                                   // 0x0128(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackStreamableManager");
		return ptr;
	}

};


// Class JackGame.JackStreamObjectsReceiver
// 0x0058 (0x0090 - 0x0038)
class UJackStreamObjectsReceiver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0038(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackStreamObjectsReceiver");
		return ptr;
	}

};


// Class JackGame.JackStreamObjectsHolder
// 0x0030 (0x00C0 - 0x0090)
class UJackStreamObjectsHolder : public UJackStreamObjectsReceiver
{
public:
	TArray<class UObject*>                             LoadedObjects;                                            // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackStreamObjectsHolder");
		return ptr;
	}

};


// Class JackGame.JackSynchroCaptionTrack
// 0x0018 (0x00A8 - 0x0090)
class UJackSynchroCaptionTrack : public UInterpTrack
{
public:
	TArray<struct FJackSynchroCaptionTrackKey>         SynchroCaptionTrack;                                      // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bAvailableWhenForwards : 1;                               // 0x00A0(0x0001) (Edit)
	unsigned char                                      bAvailableWhenBackwards : 1;                              // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSynchroCaptionTrack");
		return ptr;
	}

};


// Class JackGame.JackSynchroCaptionTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackSynchroCaptionTrackInst : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSynchroCaptionTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSynchronizeTimelineByBGMTrack
// 0x0008 (0x00B0 - 0x00A8)
class UJackSynchronizeTimelineByBGMTrack : public UJackToggleBaseTrack
{
public:
	bool                                               bIsStartedCSSkip;                                         // 0x00A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSynchronizeTimelineByBGMTrack");
		return ptr;
	}

};


// Class JackGame.JackSynchronizeTimelineByBGMTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackSynchronizeTimelineByBGMTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSynchronizeTimelineByBGMTrackInst");
		return ptr;
	}

};


// Class JackGame.JackSystemData
// 0x0088 (0x00C0 - 0x0038)
class UJackSystemData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x0038(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackSystemData");
		return ptr;
	}


	void SetVoiceDramaDLCompletion(bool bDLCompletion);
	void SetClearedSecondPlaythrough(bool bCleared);
	void SetClearedPlayerName(const struct FString& InPlayerName);
	bool IsVoiceDramaDLCompletion();
	bool IsPlayedSibariPlayOnce();
	bool IsCreatedSaveDataOnce();
	bool IsClearedSecondPlaythrough();
	bool IsAgreeOnlineService();
	bool GetDLCInstallFlag(EJackDLCIndex InFlag);
	struct FString GetClearedPlayerName();
	struct FName GetActiveScenarioFlag();
	void AgreeOnlineService(bool bIsAgree);
};


// Class JackGame.JackTalkCameraData
// 0x0018 (0x0370 - 0x0358)
class UJackTalkCameraData : public UJackPlayerCameraData
{
public:
	TArray<float>                                      CanTalkCameraChangedCollisionCheckAngle;                  // 0x0358(0x0010) (Edit, ZeroConstructor)
	float                                              AvoidanceAngle;                                           // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AvoidanceSpeed;                                           // 0x036C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTalkCameraData");
		return ptr;
	}

};


// Class JackGame.JackTalkComponent
// 0x00C0 (0x0260 - 0x01A0)
class UJackTalkComponent : public UJackCharacterComponent
{
public:
	TWeakObjectPtr<class UJackFacialControlComponent>  FacialControlComponent;                                   // 0x01A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       TalkBaseSocket;                                           // 0x01A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LowerFacePose_SuppressRandomLipSync;                      // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x01B8(0x0018) MISSED OFFSET
	class UJackStreamObjectsHolder*                    PartyTalkVoiceSet;                                        // 0x01D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x01D8(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTalkComponent");
		return ptr;
	}

};


// Class JackGame.JackTextData
// 0x0000 (0x0038 - 0x0038)
class UJackTextData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextData");
		return ptr;
	}

};


// Class JackGame.JackTextDataBattle
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataBattle : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataBattle");
		return ptr;
	}

};


// Class JackGame.JackTextDataFukidasi
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataFukidasi : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataFukidasi");
		return ptr;
	}

};


// Class JackGame.JackTextDataGame
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataGame : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataGame");
		return ptr;
	}

};


// Class JackGame.JackTextDataGuide
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataGuide : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataGuide");
		return ptr;
	}

};


// Class JackGame.JackTextDataLocalization
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataLocalization : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataLocalization");
		return ptr;
	}

};


// Class JackGame.JackTextDataMenu
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataMenu : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataMenu");
		return ptr;
	}

};


// Class JackGame.JackTextDataMiniGame
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataMiniGame : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataMiniGame");
		return ptr;
	}

};


// Class JackGame.JackTextDataSystem
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataSystem : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataSystem");
		return ptr;
	}

};


// Class JackGame.JackTextDataTest
// 0x0000 (0x0038 - 0x0038)
class UJackTextDataTest : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextDataTest");
		return ptr;
	}

};


// Class JackGame.JackTextMacroReplaceManager
// 0x0110 (0x0148 - 0x0038)
class UJackTextMacroReplaceManager : public UObject
{
public:
	class UDataTable*                                  MacroInfoDataTable;                                       // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  TagInfoDataTable;                                         // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  FixTagInfoDataTable;                                      // 0x0048(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  FrenchCheckVowelDataTable;                                // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GermanCaseChangeDataTable;                                // 0x0058(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GermanCheckLastIsSDataTable;                              // 0x0060(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ActionArticleInfoDataTable;                               // 0x0068(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  ItemArticleInfoDataTable;                                 // 0x0070(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  MeosiSlotItemArticleInfoDataTable;                        // 0x0078(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  MeosiSlotMonsterArticleInfoDataTable;                     // 0x0080(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  MonsterArticleInfoDataTable;                              // 0x0088(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  NpcArticleInfoDataTable;                                  // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  OddEffectArticleInfoDataTable;                            // 0x0098(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  RenkeiArticleInfoDataTable;                               // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x00A8(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextMacroReplaceManager");
		return ptr;
	}


	void SetDebugSettingInfoVowelFlag(bool VowelFlag);
	void SetDebugSettingInfoSoloFlag(bool SoloFlag);
	void SetDebugSettingInfoSingleFlag(bool SingleFlag);
	void SetDebugSettingInfoProNounFlag(bool ProNounFlag);
	void SetDebugSettingInfoPlrNounFlag(bool PlrNounFlag);
	void SetDebugSettingInfoPatchim(EJackPatchimType Patchim);
	void SetDebugSettingInfoLongerStringFlag(bool Flag);
	void SetDebugSettingInfoListFlag(bool ListFlag);
	void SetDebugSettingInfoLastIsSFlag(bool LastIsSFlag);
	void SetDebugSettingInfoGender(EJackNounGender Gender);
	void SetDebugSettingInfoEnableFlag(bool Flag);
	struct FString MacroReplaceList(const struct FString& InTextStr, bool bList);
	struct FString MacroReplaceBP(const struct FString& InTextStr, TArray<struct FJackMessageArgumentData> InArgs, bool bList);
	bool GetDebugSettingInfoVowelFlag();
	bool GetDebugSettingInfoSoloFlag();
	bool GetDebugSettingInfoSingleFlag();
	bool GetDebugSettingInfoProNounFlag();
	bool GetDebugSettingInfoPlrNounFlag();
	EJackPatchimType GetDebugSettingInfoPatchim();
	bool GetDebugSettingInfoLongerStringFlag();
	bool GetDebugSettingInfoListFlag();
	bool GetDebugSettingInfoLastIsSFlag();
	EJackNounGender GetDebugSettingInfoGender();
	bool GetDebugSettingInfoEnableFlag();
	struct FString DebugMacroReplace(const struct FString& InTextStr, class UDataTable* LongestArticleInfoDataTable, class UDataTable* LongestValueDataTable);
};


// Class JackGame.JackTextManager
// 0x0170 (0x01A8 - 0x0038)
class UJackTextManager : public UObject
{
public:
	TArray<struct FJackTextDataTableContainer>         TextDataTableList;                                        // 0x0038(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackTextDataTableContainer>         TextPackDataTableList;                                    // 0x0048(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  OverrideTextDataTable;                                    // 0x0058(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, EJackTextType>                  OverrideTextTypeFromTextPack;                             // 0x0060(0x0050) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0xF8];                                      // 0x00B0(0x00F8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextManager");
		return ptr;
	}


	struct FString GetTextRaw(const struct FName& InTextId);
	struct FString GetTextFromTextPackBP(const struct FName& TextID);
	struct FName GetTalkerIDFromTextID(const struct FName& TextID);
	struct FString GetSLocationTitle(const struct FName& MapVolumeID, bool bIgnoreOpenFlag);
	struct FJackPartyTalkDescription GetPartyTalkData(TEnumAsByte<EJackCharacter> CharacterID, bool bPriorityTalk);
	struct FString GetNPCDisplayName(const struct FName& NPCID);
	struct FString GetMLocationTitle(const struct FName& MapVolumeID, bool bIgnoreOpenFlag);
	struct FString GetMapDisplayName(const struct FName& MapId, bool bMacroReplace, bool bIsList);
	struct FName GetJackCharacterNPCID(TEnumAsByte<EJackCharacter> CharacterID);
	struct FString GetJackCharacterDisplayName(TEnumAsByte<EJackCharacter> CharacterID);
	struct FString GetBoukenGuideText();
	struct FName DetermineBoukenGuideIDinBP(TEnumAsByte<EJackScenarioID> ScenarioID, const struct FName& ScenarioFlag);
	struct FJackPartyTalkDescription Debug_GetPartyTalkDataBP(TEnumAsByte<EJackScenarioID> ScenarioID, const struct FName& MapId, const struct FName& ScenarioFlag, TEnumAsByte<EJackCharacter> CharacterID, bool bPriorityTalk, bool bCamp);
};


// Class JackGame.JackTextSetGinkou
// 0x0000 (0x0038 - 0x0038)
class UJackTextSetGinkou : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextSetGinkou");
		return ptr;
	}

};


// Class JackGame.JackTextSetKyoukai
// 0x0000 (0x0038 - 0x0038)
class UJackTextSetKyoukai : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextSetKyoukai");
		return ptr;
	}

};


// Class JackGame.JackTextSetShop
// 0x0000 (0x0038 - 0x0038)
class UJackTextSetShop : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextSetShop");
		return ptr;
	}

};


// Class JackGame.JackTextSetYadoya
// 0x0000 (0x0038 - 0x0038)
class UJackTextSetYadoya : public UJackTextData
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextSetYadoya");
		return ptr;
	}

};


// Class JackGame.JackTextureFolderComponent
// 0x0050 (0x0780 - 0x0730)
class UJackTextureFolderComponent : public UPrimitiveComponent
{
public:
	TArray<class UTexture*>                            Textures;                                                 // 0x0730(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0740(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<class UStaticMesh*>                         StaticMeshs;                                              // 0x0750(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<class USkeletalMesh*>                       SkeletalMeshs;                                            // 0x0760(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<class UMaterialInterface*>                  MaterialCache;                                            // 0x0770(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextureFolderComponent");
		return ptr;
	}

};


// Class JackGame.JackTextureStreamingSlaveDummyActor
// 0x0008 (0x03A0 - 0x0398)
class AJackTextureStreamingSlaveDummyActor : public AActor
{
public:
	float                                              BoostFactor;                                              // 0x0398(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTextureStreamingSlaveDummyActor");
		return ptr;
	}

};


// Class JackGame.JackTiltAlongGroundComponent
// 0x0190 (0x0470 - 0x02E0)
class UJackTiltAlongGroundComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02E0(0x0008) MISSED OFFSET
	class UMeshComponent*                              TargetMeshComponent;                                      // 0x02E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FName>                               SocketNames;                                              // 0x02F0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              TiltAngleMax;                                             // 0x0300(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TraceSphereRadius;                                        // 0x0304(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x144];                                     // 0x0308(0x0144) MISSED OFFSET
	bool                                               bBlendEnable;                                             // 0x044C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x044D(0x0003) MISSED OFFSET
	float                                              BlendInTime;                                              // 0x0450(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           BlendInEasingFunc;                                        // 0x0454(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	float                                              BlendOutTime;                                             // 0x0458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EEasingFunc>                           BlendOutEasingFunc;                                       // 0x045C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x13];                                      // 0x045D(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTiltAlongGroundComponent");
		return ptr;
	}

};


// Class JackGame.JackTimeComponent
// 0x0020 (0x01C0 - 0x01A0)
class UJackTimeComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x01A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTimeComponent");
		return ptr;
	}


	void SetActorTimeDilation(TEnumAsByte<EJackTimeDilationPurpose> InPurpose, float InTimeDilation);
};


// Class JackGame.JackTimeLineJumperTrack
// 0x0000 (0x00A0 - 0x00A0)
class UJackTimeLineJumperTrack : public UJackInterpTrackNameBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTimeLineJumperTrack");
		return ptr;
	}

};


// Class JackGame.JackTimeLineJumperTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackTimeLineJumperTrackInst : public UJackLastPositionInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTimeLineJumperTrackInst");
		return ptr;
	}

};


// Class JackGame.JackTitleGameMode
// 0x0058 (0x0660 - 0x0608)
class AJackTitleGameMode : public AJackGameModeBase
{
public:
	class UDataTable*                                  FukkatunojumonDataTable;                                  // 0x0608(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  FukkatunojumonItemDataTable;                              // 0x0610(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  FukkatunojumonLevelUpDataTable;                           // 0x0618(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GameResumeSettingFlagDataTable;                           // 0x0620(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GameResumeSettingPartyDataTable;                          // 0x0628(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GameResumeSettingItemDataTable;                           // 0x0630(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GameResumeSettingMonsterZukanDataTable;                   // 0x0638(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GameResumeSettingItemZukanDataTable;                      // 0x0640(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PafuPafuModeClass;                                        // 0x0648(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  TokugiPanelInfoDataTable;                                 // 0x0650(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class AJackPafuPafuMode*                           PafuPafuMode;                                             // 0x0658(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTitleGameMode");
		return ptr;
	}

};


// Class JackGame.JackTitlePlayerController
// 0x0000 (0x0930 - 0x0930)
class AJackTitlePlayerController : public AJackPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTitlePlayerController");
		return ptr;
	}

};


// Class JackGame.JackToBeContinuedTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackToBeContinuedTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackToBeContinuedTrack");
		return ptr;
	}

};


// Class JackGame.JackToBeContinuedTrackInst
// 0x0008 (0x0048 - 0x0040)
class UJackToBeContinuedTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackToBeContinuedTrackInst");
		return ptr;
	}

};


// Class JackGame.JackTokiNoKesinAnimInstance
// 0x0010 (0x0BF0 - 0x0BE0)
class UJackTokiNoKesinAnimInstance : public UJackAnimInstance
{
public:
	bool                                               bIsSit;                                                   // 0x0BE0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMove;                                                  // 0x0BE1(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x0BE2(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTokiNoKesinAnimInstance");
		return ptr;
	}

};


// Class JackGame.JackTokugiManager
// 0x0000 (0x0038 - 0x0038)
class UJackTokugiManager : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTokugiManager");
		return ptr;
	}


	void SetIncreaseTokugiPoint(TEnumAsByte<EJackCharacter> TargetCharacter, bool bIncrease);
	void ResetTokugiPanel(TEnumAsByte<EJackCharacter> TargetCharacter);
	void ResetSkillLine(TEnumAsByte<EJackCharacter> TargetCharacter, TEnumAsByte<EJackSkillLine> SkillLineType);
	void OpenTokugiPanel(const struct FName& TokugiPanelID, bool bConsumePoint);
	bool IsOpenTokugiPanel(const struct FName& TokugiPanelID);
	bool IsIncreaseTokugiPoint(TEnumAsByte<EJackCharacter> TargetCharacter);
	struct FString GetTokugiPanelText(const struct FName& TokugiPanelID, EJackActionTextType TextType);
	TEnumAsByte<EJackCharacter> GetTokugiPanelTargetCharacter(const struct FName& TokugiPanelID);
	int GetTokugiPanelConsumePoint(const struct FName& TokugiPanelID);
};


// Class JackGame.JackTripleManager
// 0x0088 (0x0480 - 0x03F8)
class AJackTripleManager : public APawn
{
public:
	TMap<struct FName, class UClass*>                  MiniGameMap;                                              // 0x03F8(0x0050) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0448(0x0008) MISSED OFFSET
	class UJackMeosiSlotSimulationComponent*           MeosiSlotSimulationComponent;                             // 0x0450(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0458(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    PlayMovieRequestDelegate;                                 // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0470(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTripleManager");
		return ptr;
	}


	void StartTriple();
	void ResumeTriple();
	void PauseTriple();
	bool IsTripleRunning();
	void ForceDisableTriple60fps(bool InDisable);
	void EndTriple();
	void Draw2DWorld(class AHUD* HUD);
	void CallEndMiniGame();
};


// Class JackGame.JackTriplePlayerController
// 0x0000 (0x0930 - 0x0930)
class AJackTriplePlayerController : public AJackPlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTriplePlayerController");
		return ptr;
	}

};


// Class JackGame.JackTripleUtils
// 0x0000 (0x0038 - 0x0038)
class UJackTripleUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTripleUtils");
		return ptr;
	}

};


// Class JackGame.JackUIInputSettings
// 0x0048 (0x0080 - 0x0038)
class UJackUIInputSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0038(0x0004) MISSED OFFSET
	float                                              InputProhibitionTime;                                     // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJackUIKeyRepeatSetting                     ButtonKeyRepeatSetting;                                   // 0x0040(0x0020) (Edit, DisableEditOnInstance)
	TArray<TEnumAsByte<EJackGamePlayerCondition>>      UIDisableConditionList;                                   // 0x0060(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              StickToButtonThreshold;                                   // 0x0070(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StickToButtonAngle;                                       // 0x0074(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScrollVelocityScale;                                      // 0x0078(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUIInputSettings");
		return ptr;
	}

};


// Class JackGame.JackUIInputManager
// 0x00D0 (0x0108 - 0x0038)
class UJackUIInputManager : public UObject
{
public:
	struct FScriptMulticastDelegate                    InputDelegate;                                            // 0x0038(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData00[0xA2];                                      // 0x0048(0x00A2) MISSED OFFSET
	bool                                               LeftStickButtonLeft;                                      // 0x00EA(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               LeftStickButtonRight;                                     // 0x00EB(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               LeftStickButtonUp;                                        // 0x00EC(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               LeftStickButtonDown;                                      // 0x00ED(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET
	float                                              StickToButtonThreshold;                                   // 0x00F0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StickToButtonAngle;                                       // 0x00F4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ScrollVelocityScale;                                      // 0x00F8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StickInputLength;                                         // 0x00FC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StickInputAngle;                                          // 0x0100(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0104(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUIInputManager");
		return ptr;
	}


	void JackUIInputDelegate__DelegateSignature(struct FJackUIInputDelegateInfo* InDelegateInfo);
	float GetStickToButtonThreshold();
	float GetStickToButtonAngle();
	float GetStickInputLength();
	float GetStickInputAngle();
	float GetScrollVelocityScale();
};


// Class JackGame.JackUIMapManager
// 0x0080 (0x00B8 - 0x0038)
class UJackUIMapManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	struct FVector2D                                   MapOpenTextureSizeMin;                                    // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackMapSymbolTextureDic>            MapSymbolTexture;                                         // 0x0058(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EJackUMGTextColorSet>                  VisitedNeighborMapItemColor;                              // 0x0068(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUMGTextColorSet>                  NotVisitNeighborMapItemColor;                             // 0x0069(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUMGTextColorSet>                  RecentlyNeighborMapItemColor;                             // 0x006A(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHighlightRecentlyNeighborMapItem;                        // 0x006B(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x006C(0x001C) MISSED OFFSET
	TArray<struct FJackMapJourneyInfo>                 JourneyInfoList;                                          // 0x0088(0x0010) (ZeroConstructor)
	TArray<struct FJackMapUserData>                    MapUserDataList;                                          // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUIMapManager");
		return ptr;
	}


	TArray<class UJackUMGNeighborMapInfo*> GetNeighborMapInfoList(const struct FName& MapVolumeID, const struct FName& RecentlyMapVolumeID);
};


// Class JackGame.JackUmaRaceAccessor
// 0x0040 (0x0078 - 0x0038)
class UJackUmaRaceAccessor : public UObject
{
public:
	bool                                               bIsUsePathNo;                                             // 0x0038(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0039(0x001F) MISSED OFFSET
	TArray<class UCameraAnim*>                         CameraAnimDatas;                                          // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0068(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceAccessor");
		return ptr;
	}


	void UnloadResultCameraAnimAsset(class UObject* WorldContextObject);
	void SetTaduna(bool bIsEnable);
	void SetStartDash(bool bIsSuccess);
	void SetSelectRank(TEnumAsByte<EJackUmaRaceRank> InSelectRank);
	void SetPrizeForParticipation(const struct FName& Name);
	void SetInputDisableMEPurpose(bool bIsDisable);
	void SetGeneratePhysicsObject(bool bIsEnable);
	void SetGenerateGoalObject(bool bIsEnable);
	void SetGenerateEffectObject(bool bIsEnable);
	void SetDifficulty(TEnumAsByte<EJackUmaRaceDifficulty> InType);
	void SaveLastSelectRank(TEnumAsByte<EJackUmaRaceRank> InRank);
	bool SaveClearRank(int InClearRank);
	void RandomUnitLocation(TArray<class AJackUmaRaceUnit*> Units);
	void LoadResultCameraAnimAsset(class UObject* WorldContextObject);
	bool IsUsualRoute(TEnumAsByte<EJackUmaRaceRank> InRank, class UDataTable* InDataTable);
	bool IsStartDashCheck();
	bool IsStartDash();
	bool IsReleaseRankMessage(TEnumAsByte<EJackUmaRaceRank> InRank);
	bool IsReleaseNextRank();
	bool IsReleaseNewRank();
	bool IsGeneratePhysicsObject();
	bool IsGenerateGoalObject();
	bool IsGenerateEffectObject();
	bool IsFreeRaceRelease();
	bool IsEnableTaduna();
	bool IsAllRankClear();
	bool IsActiveAllRankClear();
	void InitializeValue();
	bool GetWishClear();
	struct FName GetTitleRankTextId(TEnumAsByte<EJackUmaRaceRank> InRank);
	TEnumAsByte<EJackUmaRaceRank> GetSelectRank();
	bool GetSekaiHoukaiFlag();
	struct FName GetResultItem();
	bool GetRankRelease(TEnumAsByte<EJackUmaRaceRank> InRank);
	struct FName GetRankName(TEnumAsByte<EJackUmaRaceRank> InRank);
	bool GetRankClearFlag(TEnumAsByte<EJackUmaRaceRank> InRank);
	struct FName GetPrizeForParticipation();
	TEnumAsByte<EJackUmaRaceRank> GetPlayableMaxRank();
	struct FName GetNowRankTitleCaptionId();
	struct FString GetNowRankTitleCaption();
	struct FName GetNextRankTitleCaptionId();
	struct FString GetNextRankTitleCaption();
	TEnumAsByte<EJackUmaRaceRank> GetLastSelectRank();
	float GetLapTime(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InRank, int LapNo);
	int GetGoalRank();
	TEnumAsByte<EJackUmaRaceFarisFlagState> GetFarisFlag();
	TEnumAsByte<EJackUmaRaceDifficulty> GetDifficulty();
	float GetDesiredRankTime(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InSelectRank);
	void GetDecompositionTime(float InTime, int* OutMinite, int* OutSeconds, int* OutMiliSeconds);
	float GetClearTime(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InRank);
	int GetClearRank(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InRank);
	int GetClearItemNumFromName(const struct FName& InName, const struct FJackDataTableUmaRaceMapData& InData, int GoalRank);
	int GetClearItemNum(TEnumAsByte<EJackUmaRaceRank> InRank, const struct FJackDataTableUmaRaceMapData& InData, int GoalRank);
	struct FName GetClearItemFromName(class UObject* WorldContextObject, const struct FName& InName, const struct FJackDataTableUmaRaceMapData& InData, int GoalRank);
	struct FName GetClearItem(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InRank, const struct FJackDataTableUmaRaceMapData& InData, int GoalRank);
	struct FName GetClearEventItemGetName(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InRank, const struct FJackDataTableUmaRaceMapData& InData, int GoalRank);
	TEnumAsByte<EJackUmaRaceRank> GetAvaibalePlayRank();
	bool Get2ndWorldFlag();
	void EndUmaRace();
	void EnableStartDashCheck();
	void DisableStartDashCheck();
	void DebugReleaseRank(class UObject* WorldContextObject, TEnumAsByte<EJackUmaRaceRank> InRank);
	void DebugClearAllRank();
	void BeginUmaRace();
	void ApplyReleaseRankMessage(TEnumAsByte<EJackUmaRaceRank> InRank);
	void ApplyPrizeForParticipationItem(class UObject* WorldContextObject, const struct FJackDataTableUmaRaceMapData& InData);
	void ApplyNextReleaseRank();
};


// Class JackGame.JackUmaRaceAIController
// 0x0010 (0x0590 - 0x0580)
class AJackUmaRaceAIController : public AJackAIController
{
public:
	class UJackVehicleControllerComponent*             VehicleControllerComponent;                               // 0x0580(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UJackVehicleRiderControllerComponent*        VehicleRiderControllerComponent;                          // 0x0588(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceAIController");
		return ptr;
	}

};


// Class JackGame.JackUmaRaceCameraData
// 0x0010 (0x0368 - 0x0358)
class UJackUmaRaceCameraData : public UJackPlayerCameraData
{
public:
	float                                              DeltaMovementLerpSpeed;                                   // 0x0358(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DeltaMovementLeapSpeedMax;                                // 0x035C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDeltaMovementLerp;                                     // 0x0360(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0361(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceCameraData");
		return ptr;
	}

};


// Class JackGame.JackUmaRaceCameraResult
// 0x0038 (0x03D0 - 0x0398)
class AJackUmaRaceCameraResult : public AActor
{
public:
	class USceneComponent*                             SceneComponent;                                           // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCameraAnimInst*                             CameraAnimInst;                                           // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FJackUmaRaceCameraAnimData>          CameraAnimCuts;                                           // 0x03A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET
	class APawn*                                       OwnerPawn;                                                // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceCameraResult");
		return ptr;
	}

};


// Class JackGame.JackUmaRaceEntranceDebugMenu
// 0x0010 (0x03A8 - 0x0398)
class AJackUmaRaceEntranceDebugMenu : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0398(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceEntranceDebugMenu");
		return ptr;
	}

};


// Class JackGame.JackUmaRaceGimmick
// 0x0018 (0x03B0 - 0x0398)
class AJackUmaRaceGimmick : public AActor
{
public:
	bool                                               bIsWallHit;                                               // 0x0398(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x17];                                      // 0x0399(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceGimmick");
		return ptr;
	}


	void RemoveVehicle(class AJackVehicleUmaRace* Vehicle);
	bool IsWallHit();
	bool IsIncludePathNo(TArray<int> CheckNumber, TArray<int> PathNumberArray, class AJackUmaRaceUnit* Unit);
	bool STATIC_IsIncludeNumber(TArray<int> CheckNumber, TArray<int> MatchNumber);
	TArray<class AJackVehicleUmaRace*> GetVehicleArray();
	void AddVehicle(class AJackVehicleUmaRace* Vehicle);
};


// Class JackGame.JackUmaRaceHud
// 0x0000 (0x0398 - 0x0398)
class AJackUmaRaceHud : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceHud");
		return ptr;
	}


	void OnUpdateTimer(float InRaceTime, int Minite, int Seconds, int MiliSeconds, int InLap, int InLapMinite, int InLapSeconds, int InLapMiliSeconds);
	void OnUpdatePlayerRank(int Rank);
	void OnRetireBegin();
	void OnIntervalTimeEnd();
	void OnHealGauge(float Percent, bool bForceChangeState);
	void OnEndBrake();
	void OnDashStart();
	void OnDashGaugeUpdate(float Percent);
	void OnDashGaugeStateChange(TEnumAsByte<EJackUmaRaceDashGaugeState> Type);
	void OnDashEnd();
	void OnBeginBrake();
	void OnApplyPlayerLapTime(int Number, float LapTime, int Minite, int Seconds, int MiliSeconds, int TotalMinite, int TotalSeconds, int TotalMiliSeconds, bool bNewRecord, bool bLastLap, bool bFinalLap, bool bLapNewRecord);
};


// Class JackGame.JackUmaRaceManager
// 0x00E8 (0x0480 - 0x0398)
class AJackUmaRaceManager : public AActor
{
public:
	class UClass*                                      HUDClass;                                                 // 0x0398(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PlayerControllerClass;                                    // 0x03A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FarisPlayerVehicleClass;                                  // 0x03A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUmaRaceHorseType>                 FarisPlayerVehicleType;                                   // 0x03B0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03B1(0x0003) MISSED OFFSET
	float                                              ForceRetireTime;                                          // 0x03B4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x48];                                      // 0x03B8(0x0048) MISSED OFFSET
	TArray<class UDataTable*>                          EntryDataTable;                                           // 0x0400(0x0010) (ZeroConstructor)
	TArray<class UDataTable*>                          TimeScheduleDataTableArray;                               // 0x0410(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0420(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceManager");
		return ptr;
	}


	void UnPossessController();
	bool Unmount();
	void StartRace();
	class AJackUmaRaceHud* SpawnHud();
	void SetShowDebugInfo(bool bIsEnable);
	void SetLapCountNum(int InLapCountNum);
	void SetCourseJudgePath(class USplineComponent* InSplineComponent);
	void SaveLapTimes();
	void ResetGame();
	void RegistEntryDataTable(class UDataTable* Data);
	void RandomEntrySetting();
	void QuantizeRaceTime();
	void PossessController(class AJackCharacter* Character);
	void OnGiveUp();
	void OnForceRetireBp();
	void MountAll();
	void Mount(int Index, class AJackCharacter* PlayerCharacter);
	bool IsTimeUp();
	bool IsStateIdle();
	bool IsMountOK();
	bool IsGiveUp();
	bool IsClearBestTime();
	bool IsCheckGoal();
	TArray<class AJackUmaRaceUnit*> GetUnits();
	TArray<float> GetUnitRatioArray();
	int GetUnitNum();
	class AJackUmaRaceUnit* GetUnit(int Index);
	class AJackFieldPlayerUmaRaceController* GetUmaRacePlayerController();
	class USplineComponent* GetSplinePath(int No);
	TArray<struct FJackUmaRaceResultParameter> GetResultFromTime();
	TArray<struct FJackUmaRaceResultParameter> GetResult();
	float GetRaceTime();
	int GetPlayerRankFromLapTime();
	int GetPlayerGoalRank();
	int GetLapCountNum();
	class AJackUmaRaceHud* GetHUD();
	TArray<TEnumAsByte<EJackUmaRaceHorseType>> GetHorseTypes();
	struct FName GetClearItem(const struct FJackDataTableUmaRaceMapData& InData);
	struct FName GetClearEventItemGetName(const struct FJackDataTableUmaRaceMapData& InData, int InGoalRank);
	void ForceDashEnd();
	void Finalize();
	void EndRace();
	void EnableInputUnits();
	void DisableInputUnits();
	void DebugLog();
	void ChangeCameraMode();
	float CalcPlayerToDistance(class AJackUmaRaceUnit* Unit);
	float CalcPlayerRatio();
	void ApplyResult();
	void ApplyClearEventItemGet(const struct FJackDataTableUmaRaceMapData& InData, int GoalRank);
	void AddUnit(class AJackUmaRaceUnit* Unit);
	void AddSplinePathArray(TArray<class AJackUmaRaceSplinePath*> InComponents);
};


// Class JackGame.JackUmaRaceSplinePath
// 0x0008 (0x03A0 - 0x0398)
class AJackUmaRaceSplinePath : public AActor
{
public:
	class USplineComponent*                            SplineComponent;                                          // 0x0398(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceSplinePath");
		return ptr;
	}


	void SetSplineComponent(class USplineComponent* InSplineComponent);
};


// Class JackGame.JackUmaRaceState
// 0x0008 (0x03A0 - 0x0398)
class AJackUmaRaceState : public AActor
{
public:
	TEnumAsByte<EJackUmaRaceGameState>                 State;                                                    // 0x0398(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0399(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceState");
		return ptr;
	}


	void SetState(TEnumAsByte<EJackUmaRaceGameState> State);
	bool IsChanged();
	TEnumAsByte<EJackUmaRaceGameState> GetState();
	void ClearChange();
};


// Class JackGame.JackUmaRaceUnit
// 0x00C0 (0x0458 - 0x0398)
class AJackUmaRaceUnit : public AActor
{
public:
	TArray<class AJackUmaRaceSplinePath*>              SplinePathDatas;                                          // 0x0398(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	float                                              SpawnOffsetZ;                                             // 0x03A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsTimeSchedule;                                          // 0x03AC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03AD(0x0003) MISSED OFFSET
	float                                              RecordLapIntervalTime;                                    // 0x03B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              P008Scale;                                                // 0x03B4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector                                     P008LocationOffset;                                       // 0x03B8(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	class AJackVehicleUmaRace*                         Vehicle;                                                  // 0x03C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class AJackCharacter>               Character;                                                // 0x03D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                                      // 0x03D8(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUmaRaceUnit");
		return ptr;
	}


	void SetUmaRaceManager(class AJackUmaRaceManager* InManager);
	void SetSplinePathData(TArray<class AJackUmaRaceSplinePath*> InSplinePathDataArray);
	void SetSplineGoalData(TArray<class USplineComponent*> InSplineData);
	void SetSplineData(TArray<class USplineComponent*> SplineDataArray);
	void SetPaddockNumber(int InPaddockNumber);
	void RecordLap();
	bool IsPlayer();
	float GetTotalLapTime();
	float GetRaceTime();
	struct FString GetPlayerName();
	int GetPathNo();
	int GetPaddockNumber();
	float GetLastLapTime();
	TArray<float> GetLapTimeArray();
	int GetLapCount();
	int GetImpactPriority();
	TEnumAsByte<EJackUmaRaceHorseType> GetHorseType();
	int GetGoalRank();
	float GetFootStepVolume(int InLap);
	float GetCourseRatioCache();
	void AdjustFloor();
};


// Class JackGame.JackUMGWindowBase
// 0x0090 (0x0400 - 0x0370)
class UJackUMGWindowBase : public UJackUMGWidgetBase
{
public:
	class UClass*                                      CursorAsset;                                              // 0x0370(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInFocus;                                               // 0x0378(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0379(0x0007) MISSED OFFSET
	TArray<class UJackUMGItemBase*>                    SelectItemList;                                           // 0x0380(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	TArray<class UJackUMGItemBase*>                    SelectStaticItemList;                                     // 0x0390(0x0010) (ExportObject, ZeroConstructor)
	class UJackUMGItemBase*                            SelectedItem;                                             // 0x03A0(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGItemBase*                            InFocusEventItem;                                         // 0x03A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidget*                                     SelectedHighlightPanel;                                   // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGWidgetBase*                          CursorWidget;                                             // 0x03B8(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TEnumAsByte<EJackUMGWindowCursorMoveMode>          CursorHorizontalMoveMode;                                 // 0x03C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUMGWindowCursorMoveMode>          CursorHorizontalLoopMode;                                 // 0x03C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUMGWindowCursorMoveMode>          CursorVerticalMoveMode;                                   // 0x03C2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUMGWindowCursorMoveMode>          CursorVerticalLoopMode;                                   // 0x03C3(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03C4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnItemListControlEvent;                                   // 0x03C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                CursorZOrderOffset;                                       // 0x03D8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CursorFindAngle;                                          // 0x03DC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGMenuBGMode>                    MenuBGMode;                                               // 0x03E0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x03E1(0x000F) MISSED OFFSET
	TArray<struct FJackUMGCursorMoveSetting>           CursorMoveSettingList;                                    // 0x03F0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWindowBase");
		return ptr;
	}


	void UpdateCursorPosition();
	void SetVisibleAllItem(bool InIsVisible);
	void SetTextureOfPanelWithResize(class UTexture2D* InTexture, class UImage* InImagePanel, class UCanvasPanel* InFramePanel);
	void SetSelectedHighlightPanel(class UWidget* InHighlightPanel);
	void SetItemList(class UCanvasPanel* InItemListCanvas, class UJackUMGItemBase* InItemBase);
	void SetCursorOffsetOfAllItemBase(const struct FVector2D& InOffset);
	void SetCursorMoveMode(TEnumAsByte<EJackUMGWindowCursorMoveMode> InHorizontalMoveMode, TEnumAsByte<EJackUMGWindowCursorMoveMode> InHorizontalLoopMode, TEnumAsByte<EJackUMGWindowCursorMoveMode> InVerticalMoveMode, TEnumAsByte<EJackUMGWindowCursorMoveMode> InVerticalLoopMode);
	void SetActivateItemList(bool IsActivate, class UJackUMGItemBase* HiliteItem);
	void SelectItemFromTextId(const struct FName& TextID);
	void SelectItemFromRef(class UJackUMGItemBase* Item);
	void SelectItemFromIndex(int Index);
	void SelectItemFromId(const struct FName& ItemID);
	void OnDidNotMoveCursor(class UJackUMGItemBase* InSelectedItem, int MoveDirection);
	bool MoveCursor(int Direction, const struct FJackKeyStatus& InKey);
	void JackOnItemListControlEventDelegate__DelegateSignature(const struct FName& EventName, class UJackUMGItemBase* InItemBase);
	bool IsSelectiveItem();
	bool IsEmptyItemList();
	void InitWindow(class UCanvasPanel* ItemListCanvas, int ZOrder);
	struct FVector2D GetVisibleSizeFromItemList();
	class UJackUMGItemBase* GetVisibleBottomItemBase(bool bIsIgnoreVisibilty);
	float GetVisibleBottomFromItemList(bool bIsIgnoreVisibilty);
	class UJackUMGItemBase* GetSelectedItem();
	int GetNumSelectItem();
	class UJackUMGItemBase* GetItemFromTextId(const struct FName& TextID);
	class UJackUMGItemBase* GetItemFromId(const struct FName& ItemID);
	void FinishShowWindowDelegate();
	void EmptyStaticItemList();
	void EmptyCursorMoveSetting();
	void DoItemListControlEvent(const struct FName& InEventTag, class UJackUMGItemBase* InItemBase);
	void DoEnterBySelectedItem();
	void DoCancelBySelectedItem();
	void AddStaticItemList(class UJackUMGItemBase* InItemBase);
	void AddCursorMoveSetting(const struct FJackUMGCursorMoveSetting& Data);
};


// Class JackGame.JackUMG3DWindowBase
// 0x0000 (0x0400 - 0x0400)
class UJackUMG3DWindowBase : public UJackUMGWindowBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMG3DWindowBase");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorBase
// 0x0008 (0x0040 - 0x0038)
class UJackUMGAccessorBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorBase");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorBattle
// 0x0168 (0x01A8 - 0x0040)
class UJackUMGAccessorBattle : public UJackUMGAccessorBase
{
public:
	struct FScriptMulticastDelegate                    ChangePhotoModeDelegate;                                  // 0x0040(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class AJackBattlePlayerController*                 BattlePlayerController;                                   // 0x0050(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackGameCharacter*                          BattleCaster;                                             // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CasterCharaType;                                          // 0x0060(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	class UJackGameCharacter*                          BattleTarget;                                             // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UJackGameCharacter*>                  TargetList;                                               // 0x0070(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bIsDirectionEdge;                                         // 0x0080(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	class UJackUMGUIActionInfo*                        UIActionInfoRef;                                          // 0x0088(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  SelectSoubiRegionType;                                    // 0x0090(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x117];                                     // 0x0091(0x0117) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorBattle");
		return ptr;
	}


	void ShowAllMonsterNamePlate();
	void SetUIActionInfo(class UJackUMGUIActionInfo* InActionInfo);
	void SetSelectSoubiRegionType(TEnumAsByte<EJackEquipmentRegion> InRegionType);
	void SetSakusenYoyaku(bool InFlag);
	void SetReturnedIrekae(bool InFlag);
	void SetRenkeiMemberAnimation(int InCaster, TArray<struct FText> InMember);
	struct FVector SetRengekiOffset(class UJackGameCharacter* InGameCharacter, float InHoff, float InVoff, float RengekiIkiti);
	void SetMatineeSkip(bool IsMatineeSkip);
	void SetLeftAxisFromBattleCameraMode();
	void SetExecCharactersNumber(int InNumber);
	void SetCursorSaveTargetGroup(class UJackGameCharacter* InPlayerRef, class UJackGameCharacter* InTargetRef, int InGroupIndex);
	void SetBattleTarget(class UJackGameCharacter* InCharacter);
	void SetBattleMenuCommand(TEnumAsByte<EJackUMGBattleMenuCommand> InBattleMenuCommand);
	int SelectTargetInKey(TEnumAsByte<EJackKeys> InKey, class UJackGameCharacter* InGameCharacter);
	int SelectGroupListInKey(TEnumAsByte<EJackKeys> InKey, TArray<class UJackUMGItemData*> InDataList, class UJackGameCharacter* InGameCharacter);
	void ResetRenkeiMemberAnimation(bool Initial);
	void OpenBattleIrekaeMenu();
	void OnTargetFocusChanged(class UJackGameCharacter* InTarget);
	void OnJumonFocusChanged(const struct FName& InActionId);
	void OnBattleMenuFirstOpen(class UJackGameCharacter* InTarget);
	void JackUMGBattleChangePhotoModeDelegate__DelegateSignature(bool bIsPhotoMode);
	bool IsReturnedIrekae();
	bool IsPhotoModeActivated();
	bool IsOnOddEffectStatusByParty(TEnumAsByte<EJackUMGMemberList> InMemberType, const struct FName& InOddEffectStatusId);
	void InputDelegate(struct FJackUIInputDelegateInfo* InDelegateInfo);
	void HideAllMonsterNamePlate();
	void GetTokugiNotAvailableReason(class UJackGameCharacter* GameCharacter, const struct FName& ActionID, EJackTokugiNotAvailableReason* NotAvailableReason, struct FName* OutActionId, struct FName* OutNeedEquippedWeaponStyleTextId);
	TArray<class UJackUMGItemData*> GetTargetList(bool bIsWithPlayer);
	TArray<class UJackUMGItemData*> GetTargetGroupList(bool bIsWithPlayer);
	TEnumAsByte<EJackRenkeiSpectacleShowStatus> GetSpectacleShowStatus();
	int GetSmallestNameIdentifierTarget(TArray<class UJackGameCharacter*> InCharaList);
	bool GetSakusenYoyaku();
	TArray<class UJackUMGItemData*> GetRenkeiList(class UJackGameCharacter* InCaster, bool IsOptimisation);
	struct FJackDataTableRenkei GetRenkeiInfoFromRenkeiId(const struct FName& InRenkeiId);
	int GetNearTargetMenuIndex();
	int GetNearTargetIndex(TArray<class UJackGameCharacter*> InCharaList);
	class UJackGameCharacter* GetNearTargetCharacter(bool IsEnemy);
	int GetNearGroupIndex(TArray<class UJackUMGItemData*> InGroupList);
	int GetMinimumHPTargetIndex();
	class UJackUMGUIActionInfo* GetKougekiUIActionInfo();
	int GetFirstTargetMenuIndex(const struct FName& InActionId);
	class UJackGameCharacter* GetFirstTargetCharacter(const struct FName& InActionId, bool IsEnemy);
	int GetExecCharactersNumber();
	int GetCursorSaveTargetIndex(class UJackGameCharacter* InPlayerRef, TEnumAsByte<EJackCursorSaveTarget> InSaveTarget);
	int GetCursorSaveTargetFromCharaTypeList(class UJackGameCharacter* InPlayerRef, TArray<TEnumAsByte<EJackCharacter>> InCharaTypeList);
	TEnumAsByte<EJackUMGBattleMenuCommand> GetBattleMenuCommand();
	int GetBattleCassterMP();
	class UJackGameCharacter* GetBattleCasster();
	TArray<class UJackUMGItemData*> GetActionMemberList(TEnumAsByte<EJackUMGUIActionFlow> InUIFlowType, TEnumAsByte<EJackCharacter> InWithoutCharType);
	void ExitFirstBattleMenu();
	void CloseBattleIrekaeMenu();
	void ClearSelectedTarget();
	void ChangeMonsterNamePlateShowFlag(bool bIncrease);
	bool CanRenkei(TArray<struct FName> InMemberList);
	bool CanOpenRenkei(class UJackGameCharacter* InCaster);
	void BindKeyBattleSakusenYoyaku();
	int BattleCommandMenuItem(class UJackGameCharacter* InCaster, class UJackGameCharacter* InTarget, class UJackUMGUIActionInfo* InActionInfo, bool IsDontSaveCursor);
	int BattleCommandMenu(class UJackGameCharacter* InCaster, class UJackGameCharacter* InTarget, TEnumAsByte<EJackUMGBattleMenuCommand> InCommandType, const struct FName& InActionId, int InIndex, bool IsDontSaveCursor);
};


// Class JackGame.JackUMGItemData
// 0x0050 (0x0088 - 0x0038)
class UJackUMGItemData : public UObject
{
public:
	int                                                DataNumber;                                               // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TextID;                                                   // 0x0048(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                GeneralValue;                                             // 0x0050(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<class UJackUMGDataContainer*>               ContainerList;                                            // 0x0058(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bResidentData;                                            // 0x0068(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bAllocatedData;                                           // 0x0069(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1E];                                      // 0x006A(0x001E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemData");
		return ptr;
	}


	void SetSortNo(int InTypeSortNo, int InNameSortNo, int InParamSortNo, int InRegion);
	bool HasItemContainer(const struct FName& InTag);
	int GetTypeSortNo();
	struct FName GetTextId();
	int GetSortNo();
	int GetRegion();
	int GetParamSortNo();
	int GetNameSortNo();
	struct FName GetItemId();
	struct FJackUMGItemContainer GetItemContainer(const struct FName& InTag, bool bAllowNoData);
	int GetGeneralValue();
	int GetDataIndex();
	class UJackUMGDataContainer* GetDataContainerObject(const struct FName& InTag, bool bAllowNoData);
	TEnumAsByte<EJackCharacter> GetCharacterType();
	void GetCharacterNameText(struct FText* OutCharacterName);
	void GetCharacterNameString(struct FString* OutCharacterName);
	TEnumAsByte<EJackItem_Bag> GetBagType();
	void GetBagNameText(struct FText* OutBagName);
	void GetBagNameString(struct FString* OutBagName);
	void ClearContainer();
	void AddItemVisibilityContainer(const struct FName& InTag, bool InIsVisible);
	void AddItemValueContainer(const struct FName& InTag, int InValue, bool InIsVisible);
	void AddItemTextureContainer(const struct FName& InTag, class UTexture2D* InTexture, bool InIsVisible);
	void AddItemTextContainer(const struct FName& InTag, const struct FText& InText, bool InIsVisible);
	void AddItemObjectContainer(const struct FName& InTag, class UObject* InObject, bool InIsVisible);
	void AddItemMaterialContainer(const struct FName& InTag, class UMaterial* InImage, bool InIsVisible);
};


// Class JackGame.JackUMGBattleGroupInfo
// 0x0040 (0x00C8 - 0x0088)
class UJackUMGBattleGroupInfo : public UJackUMGItemData
{
public:
	int                                                Group;                                                    // 0x0088(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FText                                       Name;                                                     // 0x0090(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                Count;                                                    // 0x00A8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<class UJackGameCharacter*>                  List;                                                     // 0x00B0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       Unit;                                                     // 0x00C0(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGBattleGroupInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorCommon
// 0x0120 (0x0160 - 0x0040)
class UJackUMGAccessorCommon : public UJackUMGAccessorBase
{
public:
	class UDataTable*                                  DataTableTabiNoKokoroe;                                   // 0x0040(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  DataTableCoinShopTable;                                   // 0x0048(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB0];                                      // 0x0050(0x00B0) MISSED OFFSET
	struct FName                                       RestartPointEventCaptionId;                               // 0x0100(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RestartPointCaptionId;                                    // 0x0108(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RestartPointTownCaptionId;                                // 0x0110(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RestartNoMessageId;                                       // 0x0118(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       OmoideId;                                                 // 0x0120(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        TokugiPanelCharacterType;                                 // 0x0128(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bExitGame;                                                // 0x0129(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x012A(0x0002) MISSED OFFSET
	int                                                BoukenMode;                                               // 0x012C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UJackUMGWidgetBase*                          TenseiWidgetSave;                                         // 0x0130(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UDataTable*                                  DataTableVoiceDramaScenario;                              // 0x0138(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  BookMarkIcon;                                             // 0x0140(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDLComp;                                                // 0x0148(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	TArray<class UTexture2D*>                          StaffListTextures;                                        // 0x0150(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorCommon");
		return ptr;
	}


	void WithdrawGold(int Value);
	void WaitCloseTabiNoKokoroeFromBP(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void UpdateLocaltionTitle();
	void ShowTokugiPanalAtBattleResultDebugTest(TEnumAsByte<EJackCharacter> CharacterType);
	void SetUtinaosiNoHouju(int InCount);
	void SetInFusigiKazi(bool bInFlag);
	void SetCasinoCoin(int InCount);
	void SetCampMenuInCamp(bool bInCampMenu);
	void PhotoMode();
	void OnOpenTokugiPanelAtBattleResult(TEnumAsByte<EJackCharacter> CharacterType);
	void OnDisplayTabiNoKokoroe(const struct FName& Key);
	void OnCloseTokugiPanel();
	void OnCloseTabiNoKokoroe();
	bool IsVoiceDramaDLComplete();
	bool IsTaughtTabiNoKokoroe(const struct FName& Key);
	bool IsSelectTutorial();
	bool IsScenarioVaildInterruption(int ItemIndex);
	bool IsScenarioLastVaildInterruption(int ItemIndex);
	bool IsOpenNakamaMenu();
	bool IsLanguageKorea();
	bool IsInFusigiKazi();
	bool IsGameFlag(const struct FName& InFlagName);
	int IncreaseGold(int InGold);
	int GetUtinaosiNoHoujuGettableCount();
	int GetUtinaosiNoHouju();
	bool GetUnlockUtinaosiNoHoujuFlag();
	bool GetUnlockCasinoCoinFalg();
	void GetTabiNoKokoroePageDataList(const struct FName& Key, TArray<struct FJackUMGTabiNoKokoroePageData>* OutPageDataList);
	void GetTabiNoKokoroeData(const struct FName& Key, struct FString* OutTitleText, struct FString* OutMainText, bool* bOutDisplayTexture);
	class UJackUMGItemData* GetSyougouData(const struct FName& InSyougouId);
	int GetStaffListSize();
	class UTexture2D* GetStaffList(int InPage);
	TArray<class UJackUMGItemData*> GetShortcutMenuCommandList();
	class UTexture2D* GetScenarioBookMarkIcon();
	int GetPlayTimeSeconds();
	int GetPlayTimeMinutes();
	int GetPlayTimeHour();
	struct FString GetMiddleLocationTitle(const struct FName& MapVolumeID, bool bIgnoreOpenFlag);
	int GetMedal();
	struct FString GetLocationTitle(const struct FName& InMapId);
	int GetLimitUtinaosiNoHouju();
	int GetLimitOfGold();
	int GetLimitOfDeposit();
	int GetLimitMedal();
	int GetLimitCasinoCoin();
	bool GetIsInCamp();
	int GetGold();
	TArray<struct FString> GetFukkatuLocation();
	void GetDLCDataVoiceDramaScenario(const struct FName& Key, struct FString* OutScenarioMinute, struct FString* OutScenarioSecond);
	int GetDeposit();
	void GetDataVoiceDramaScenario(const struct FName& Key, struct FString* OutTitleText, struct FString* OutScenarioMinute, struct FString* OutScenarioSecond, int* OutScenarioNo);
	struct FString GetCurrentSmallLocationTitle();
	int GetCoinAndHoujuExchangeRatio();
	int GetCasinoCoinGettableCount();
	int GetCasinoCoin();
	bool GetCampMenuInCamp();
	void DisplayTabiNoKokoroeFromBP(const struct FName& Key);
	void DepositGold(int Value);
	int DecreaseGold(int InGold);
	int CheckGold(int InGold);
	void BindKeyPhotoMode();
};


// Class JackGame.JackUMGCasinoCoinBase
// 0x0000 (0x0370 - 0x0370)
class UJackUMGCasinoCoinBase : public UJackUMGWidgetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCasinoCoinBase");
		return ptr;
	}


	void UpdateWindowCasino(int InCasinoCoin);
	void SetCasinoCoin(int InCasinoCoin);
};


// Class JackGame.JackUMGDressupCoordinateInfo
// 0x0090 (0x00D0 - 0x0040)
class UJackUMGDressupCoordinateInfo : public UJackUMGAccessorBase
{
public:
	TEnumAsByte<EJackCharacter>                        CharacterType;                                            // 0x0040(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGMitameSoubiState>              State;                                                    // 0x0041(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLocked;                                                // 0x0042(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsOpend;                                                 // 0x0043(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFirstOpen;                                             // 0x0044(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHasNewMark;                                              // 0x0045(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquipped;                                              // 0x0046(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGTextColorSet>                  DisplayColor;                                             // 0x0047(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       NameId;                                                   // 0x0048(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FJackUMGSoubiData                           SoubiData;                                                // 0x0050(0x0070) (BlueprintVisi, BlueprintReadOnly)
	TArray<struct FJackUMGMitameItemInfo>              ItemList;                                                 // 0x00C0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGDressupCoordinateInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorCoordinate
// 0x0088 (0x00C8 - 0x0040)
class UJackUMGAccessorCoordinate : public UJackUMGAccessorBase
{
public:
	struct FName                                       SavedCoordinateNameId;                                    // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SelectedCoordinateNameId;                                 // 0x0048(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       MitameNasiTextId;                                         // 0x0050(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MitameChangeableTextId;                                   // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MitameUnchangeableTextId;                                 // 0x0060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LockReasonLevelTextId;                                    // 0x0068(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LockReasonNoroiTextId;                                    // 0x0070(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       LockReasonVehicleTextId;                                  // 0x0078(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0080(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorCoordinate.EquippedMitameIcon
	unsigned char                                      UnknownData01[0x18];                                      // 0x0098(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorCoordinate.NoEquipmentMitameIcon
	TArray<struct FName>                               CanChangeFlags;                                           // 0x00B0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorCoordinate");
		return ptr;
	}


	void STATIC_SetModrenSoubiWindowAdjustPanels(const struct FJackUMGSoubiWindowMitameAdjust& InAdjustData, class UWidget* InTitlePanel, class UWidget* InStatusPanel, class UWidget* InSetimeiPanel);
	void SetMitameSoubiListToWindow(class UJackUMGBrowserBase* InBrowserBase, TEnumAsByte<EJackCharacter> InCharacterType);
	bool SetDressupCoordinateNameId(TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InDressupCoordinateName, bool bInLastIgnoreEquipment);
	bool IsOpendMitameSoubiAll(TEnumAsByte<EJackCharacter> InCharacterType);
	bool IsNewMark(TEnumAsByte<EJackCharacter> InCharacterType);
	bool IsLastIgnoreEquipment();
	bool IsEquipmentDressupCoordinate(TEnumAsByte<EJackCharacter> CharacterType, struct FName* OutTextId);
	struct FName GetMitameNasiTextId();
	class UTexture2D* GetMitameIcon(bool bIsEquipped, bool bIsList);
	TEnumAsByte<EJackDressupCoordinateLockReason> GetEquipmentDressupCoordinate(TEnumAsByte<EJackCharacter> InCharacterType);
	class UJackUMGDressupCoordinateInfo* GetDressupCoordinateInfoFromNameId(TEnumAsByte<EJackCharacter> InCharacterType, const struct FName& InCoordinateName, bool bIsSoubiList);
	class UJackUMGDressupCoordinateInfo* GetDressupCoordinateInfoFromCharacter(TEnumAsByte<EJackCharacter> InCharacterType);
	bool DisplayFirstMessage(TEnumAsByte<EJackCharacter> InCharacterType);
	void CoordinateInfoUpdateByScene(class UJackUMGDressupCoordinateInfo* InCoordinateInfo, bool bIsKeepFirstOpen);
	void ClearNewMark(TEnumAsByte<EJackCharacter> InCharacterType);
};


// Class JackGame.JackUMGRetryItemSyousai
// 0x0040 (0x0078 - 0x0038)
class UJackUMGRetryItemSyousai : public UObject
{
public:
	int                                                PictorialBookNo;                                          // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       ItemName;                                                 // 0x0048(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                CountStack;                                               // 0x0060(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquipped;                                              // 0x0064(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	struct FName                                       RecipeName;                                               // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InBagIndex;                                               // 0x0070(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGRetryItemSyousai");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorFusigiKazi
// 0x0428 (0x0468 - 0x0040)
class UJackUMGAccessorFusigiKazi : public UJackUMGAccessorBase
{
public:
	TEnumAsByte<EJackFusigiKaziCreateCategory>         CreateCategoryType;                                       // 0x0040(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackFusigiKaziParts>                  PartsType;                                                // 0x0041(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackFusigiKaziMaterialSpecial>        MaterialSpecialType;                                      // 0x0042(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackFusigiKaziCreateFrame>            CreateFrameType;                                          // 0x0043(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackFusigiKaziGameStat>               GameStatType;                                             // 0x0044(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	TArray<int>                                        SelectPartsList;                                          // 0x0048(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class AJackCharacter*                              KaziPlayerCharacter;                                      // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AActor*                                      KaziInteractiveActor;                                     // 0x0060(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET
	class UJackFusigiKaziGameAction*                   KaziAction;                                               // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class UJackFusigiKaziQualityAnalysis*              QualityAnalysis;                                          // 0x0088(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class UJackUMGWidgetBase*                          FusigiKaziParts[0x16];                                    // 0x0090(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AJackFusigiKaziGameMain*                     CaptureBP;                                                // 0x0140(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	class UJackUMGSerifuWindowController*              SerifuWindowController;                                   // 0x0148(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                                      // 0x0150(0x0068) MISSED OFFSET
	TArray<class UJackUMGItemData*>                    RecipeItemList;                                           // 0x01B8(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<class UJackUMGItemData*>                    MaterialItemList;                                         // 0x01C8(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<class UJackUMGItemData*>                    UseMaterialItemList;                                      // 0x01D8(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<int>                                        NeedMaterialList;                                         // 0x01E8(0x0010) (Edit, ZeroConstructor, EditConst)
	class UJackFusigiKaziItemCountList*                NeedMaterialItemList[0x5];                                // 0x01F8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x248];                                     // 0x0220(0x0248) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorFusigiKazi");
		return ptr;
	}


	bool WasCanselKey();
	float UpdateGaugeReferenceHP(int GaugeIndex, float DeltaTime);
	int UpdateDisplayTemperature(float DeltaTime);
	int UpdateCursorInput(const struct FScriptDelegate& InDelegate, TEnumAsByte<EJackKeys> KeyType);
	void SubtractNeedMaterialItem();
	TArray<class UJackUMGItemData*> SortRecipeItemList(TEnumAsByte<EJackUMGItemSortType> InSortType);
	void SettingSelectItemInfo(const struct FName& RecipeName);
	void SettingSelectActionInfo_TokugiList(class UJackUMGItemBase* TokugiItem);
	void SettingSelectActionInfo(const struct FName& ActionName);
	void SettingRecipeInfo(const struct FName& RecipeName);
	void SettingGameStartInfo(bool RetryFlag, int QualityValue);
	void SetTemperatureChangeValue(int GoalTemperature, float ChangeTime);
	void SetSuccessNum_Retry(int SuccessNum);
	void SetSuccessNum_Normal(int SuccessNum);
	struct FVector2D SetSelectStartCursorPos();
	void SetSelectRecipeName(const struct FName& RecipeName);
	void SetSelectActionCategoryName(const struct FName& CategoryName);
	void SetSaveCurrentBGMID(const struct FName& InSaveBGMID);
	void SetRetryMaterialBonus(int BonusNum);
	void SetRetryGameInfo(TEnumAsByte<EJackItem_Bag> BagType, const struct FName& InBagItemID, class UJackUMGRetryItemSyousai* ItemSyousai);
	void SetResetActiveTime(int ActiveTime);
	bool SetRecipeRank(const struct FName& RecipeName, int QualityRank, bool IgnoreCheckFg);
	void SetPartsTypeFromRecipe(const struct FName& InRecipeName);
	void SetMaterialSpecialTarget();
	void SetLastTimePlayerLv(int Lv);
	void SetKaziWidgetParts(TEnumAsByte<EJackFusigiKaziUMGParts> KaziPartsType, class UJackUMGWidgetBase* KaziWidget);
	void SetKaziPlayerCharacter(class AJackCharacter* Chr);
	TEnumAsByte<EJackFusigiKaziParts> SetKaziPartsTypeForIndex(int Index);
	void SetKaziPartsType(TEnumAsByte<EJackFusigiKaziParts> KaziParts);
	void SetKaziMaterialInfo(int RecipeNo);
	void SetKaziInteractiveActor(class AActor* KaziActor);
	void SetKaziGamePlayNum_Retry(int PlayNum);
	void SetKaziGamePlayNum_Normal(int PlayNum);
	void SetKaziCaptureBP(class AJackFusigiKaziGameMain* BPObject);
	void SetKaziActionLeftUp(const struct FVector2D& LeftUpPos);
	void SetHissatuUseFlag(bool Flag);
	void SetHissatuSelectListFlag(bool HissatuFlag);
	void SetHissatuPossibleFlag(bool Flag);
	void SetGaugeColorUpdateFlag(int GaugeIndex, bool EnableFlag);
	void SetGameStat(TEnumAsByte<EJackFusigiKaziGameStat> Stat);
	void SetCreateCategory(TEnumAsByte<EJackFusigiKaziCreateCategory> CategoryType);
	void SetBuckupSelectTokugiIndex(int TokugiIndex);
	void SetBuckupSelectCategoryID(const struct FName& CategoryID);
	void SetBuckupCursorPos(const struct FVector2D& BuckupPos);
	void SetBackupTopCommandIndex(int CommandIndex);
	void SetBackupSortType(TEnumAsByte<EJackItem_Bag> BagType, TEnumAsByte<EJackUMGItemSortType> SortType);
	void RunRecover(float ApplyTime);
	bool RunAction(int Index, float ApplyTime);
	void ResetCelectNewRecipeViewFlag();
	void RequestRetryFlow(bool RetryFg);
	void RequestNextStat(TEnumAsByte<EJackFusigiKaziGameStat> NextStat);
	void RequestAction();
	void ReplaceRetryItem(const struct FName& ResultItemID);
	void RemoveRetryItem(const struct FName& SubtractItemID);
	void ReflectResultKaziItem(const struct FName& ResultItemID, bool EquipAttachFg);
	int RecoverGaugeSetting();
	void OverwriteBackupKaziGamePlayNum();
	void NextTurn();
	void KaziEnd();
	bool JudgeMaterialSpecialRun();
	TEnumAsByte<EJackFusigiKaziGameResult> JudgeKaziGameResult();
	bool JudgeHissatuCharge();
	void JackMiniGameFusigiKaziInputDelegate__DelegateSignature(const struct FName& InEventTag);
	bool IsTableBreakdown();
	bool IsSpecifiedDokodemoKaziTimePassed(float InPassedTime);
	bool IsNewRecipeView();
	bool IsNewRecipe();
	bool IsLastAction();
	bool IsKaziTableLevelUp();
	bool IsHaveRecipeNeedItems(const struct FName& RecipeName);
	bool IsGaugeEnable(int GaugeIndex);
	bool IsEndRunAction();
	bool IsEnableGaugeSpace();
	bool IsCursorActionSelected();
	bool IsCharacterEquipDualSword(TEnumAsByte<EJackItem_Bag> InBagType);
	bool IsCelectNewRecipeView();
	bool IsActionEnableKnockMass();
	void InitTurn();
	void InitSetting();
	void InitScebeCaptureBP(class USceneCaptureComponent2D* SceneCaptureComponent);
	void InitRequiredMaterialInfo(int InIndex, const struct FName& InItemId, struct FJackUMGRequiredMaterialInfo* RequiredMaterialInfo);
	void InitKaziGame();
	void InitializeDokodemoKaziStartTime();
	void InitEffectInfo(class UJackUMGWidgetBase* EffectWidget, TEnumAsByte<EJackFusigiKaziEffect> EffectType, int ActionIndex, const struct FVector2D& BaseOffset);
	float GetWaitGaugeMoveTimer();
	float GetValuePos(float HPVal, int GaugeIndex, float BaseSize);
	TArray<class UJackUMGItemData*> GetUseMaterialItemList();
	struct FName GetUseMaterialItemID(int MaterialIndex);
	TEnumAsByte<EJackCharacter> GetUseMaterialCharacterType(int MaterialIndex);
	TEnumAsByte<EJackEquipmentRegion> GetUseEquipCharaRegion(int MaterialIndex);
	TEnumAsByte<EJackCharacter> GetUseEquipCharacterType(int MaterialIndex);
	float GetUnderCorrectionPercentage(const struct FName& ItemID);
	int GetUnderCorrectionDifficulty(const struct FName& ItemID);
	TEnumAsByte<EJackFusigiKaziPossibleType> GetTypeRetryPossible(const struct FName& ItemID);
	TArray<int> GetTopMenuUnEnableList();
	TEnumAsByte<EJackFusigiKaziGameTokugi> GetTokugiTypeFromActionID(const struct FName& ActionID);
	struct FName GetTokugiActionName(const struct FName& ActionID);
	int GetTargetUseInfoListIndex(TEnumAsByte<EJackFusigiKaziMaterialUseInfo> UseType, int Limit);
	int GetSuccessNum_Total();
	int GetSuccessNum_Retry();
	int GetSuccessNum_Normal();
	bool GetStartMaterialSpecial();
	bool GetStartHissatuCharge();
	struct FName GetSelectTokugiName();
	struct FName GetSelectRecipeName();
	TArray<int> GetSelectPartsList();
	TArray<class UJackUMGItemData*> GetSelectPartsItemList();
	TEnumAsByte<EJackUMGTextColorSet> GetSelectNeedCPColor();
	struct FName GetSelectMaterialMessage(TArray<struct FName> MaterialNameTable, int GroupIndex);
	struct FString GetSelectMaterialGroupMessage(const struct FName& ItemID);
	struct FName GetSelectActionType();
	int GetSelectActionSortIndex();
	struct FName GetSelectActionSetumeiMessageID();
	int GetSelectActionNumData(int NumIndex);
	int GetSelectActionNeedCP();
	struct FName GetSelectActionName();
	int GetSelectActionKaisin();
	int GetSelectActionGetLV();
	struct FName GetSelectActionComment();
	struct FName GetSaveCurrentBGMID();
	int GetRetryMaterialNum(const struct FName& ItemID);
	int GetRetryMaterialItemNum();
	int GetRetryMaterialBonus();
	struct FName GetRetryListItemID(TEnumAsByte<EJackItem_Bag> InBagType, int BagItemIndex, TArray<class UJackUMGItemData*> RetryItemList);
	class UJackUMGRetryItemSyousai* GetRetryItemSyousaiWithBagType(TEnumAsByte<EJackItem_Bag> InBagType, int BagItemIndex, TArray<class UJackUMGItemData*> RetryItemList);
	int GetRetryItemSelectEnableNum(TEnumAsByte<EJackItem_Bag> InBagType, TArray<class UJackUMGItemData*> BagItemList);
	TArray<class UJackUMGItemData*> GetRetryItemListNew(TEnumAsByte<EJackItem_Bag> InBagType, EJackUMGItemClassRefineType InRefineType);
	TEnumAsByte<EJackItem_Bag> GetRetryItemBagType();
	bool GetRetryGameFlag();
	bool GetRetryFlow();
	int GetRetryBaseQuality();
	struct FName GetRetryBaseItemID();
	int GetRetryAddQualityValue(TEnumAsByte<EJackFusigiKaziGameResult> ResultType);
	int GetResetActiveTime();
	float GetRequestAfterWaitTime(int Index);
	int GetRequestActionDamage(int Index);
	int GetRecipeRank(const struct FName& RecipeName);
	struct FName GetRecipeName(const struct FName& ItemID);
	TEnumAsByte<EJackFusigiKaziParts> GetRecipeItemPartsType(const struct FName& RecipeName);
	TArray<class UJackUMGItemData*> GetRecipeItemList();
	int GetRecipeIndex(const struct FName& RecipeName);
	class UJackFusigiKaziQualityAnalysis* GetQualityAnalysis();
	int GetPowerUpCP(int JudgeStartLevel, int PlayerLevel);
	int GetPlayerCP();
	struct FText GetPartsNameFromItemID(const struct FName& InItemId);
	struct FName GetPartsName(int PartsID);
	struct FVector2D GetPanelImageOffset();
	TArray<class UJackUMGItemData*> GetNewRecipeList();
	int GetNeedMaterialNum(int MaterialIndex);
	float GetMorphValue(int GaugeIndex);
	TEnumAsByte<EJackFusigiKaziMetalMaterial> GetMetalMaterialType(TEnumAsByte<EJackFusigiKaziParts> PType);
	TEnumAsByte<EJackEquipmentRegion> GetMessageArgEquipRegion();
	TEnumAsByte<EJackCharacter> GetMessageArgEquipCharacter();
	int GetMaterialUseMemberNum(int MaterialIndex);
	int GetMaterialUseInfoNum(TEnumAsByte<EJackFusigiKaziMaterialUseInfo> UseType);
	TEnumAsByte<EJackFusigiKaziMaterialUseInfo> GetMaterialUseInfo(int MaterialIndex);
	TArray<class UJackUMGItemData*> GetMaterialItemList();
	TArray<struct FName> GetMaterialGroupItems(const struct FName& ItemID);
	struct FVector2D GetMassPos(int GaugeIndex);
	struct FString GetLearningTokugiSetumeiID(TEnumAsByte<EJackFusigiKaziGameTokugi> TokugiType);
	int GetLastTimePlayerLv();
	TEnumAsByte<EJackFusigiKaziKuwasikuQuality> GetKuwasikuQualityType();
	int GetKeta(int Num);
	class UJackUMGWidgetBase* GetKaziWidgetParts(TEnumAsByte<EJackFusigiKaziUMGParts> KaziPartsType);
	int GetKaziTemperature();
	TEnumAsByte<EJackFusigiKaziParts> GetKaziPartsType();
	struct FName GetKaziPartsAbbreviatedName();
	int GetKaziMaterialNeedNum(int MaterialIndex);
	int GetKaziMaterialItemNo(int MaterialIndex);
	TEnumAsByte<EJackFusigiKaziGameResult> GetKaziGameResult();
	int GetKaziGamePlayNum_Total();
	int GetKaziGamePlayNum_Retry();
	int GetKaziGamePlayNum_Normal();
	struct FVector2D GetKaziFrameLeftUp();
	TEnumAsByte<EJackFusigiKaziParts> GetKaziCategory_PartsType(const struct FString& CategoryName, int KaziIndex);
	int GetKaziCategory_Index(const struct FName& PartsName, const struct FString& CategoryName);
	class AJackFusigiKaziGameMain* GetKaziCaptureBP();
	TArray<class UJackUMGItemData*> GetKaziActionList();
	struct FVector2D GetKaziActionLeftUp();
	int GetKaziActionKnockNum(const struct FName& ActionName);
	int GetKaziActionDataGetLV(const struct FName& ActionName);
	struct FVector2D GetKaziActionCursorPos(const struct FName& ActionName, int CursorIndex);
	class UJackFusigiKaziGameAction* GetKaziAction();
	struct FVector2D GetKanadokoPanelSize();
	bool GetKaisinFlag(int Index);
	int GetItemTotalNum(const struct FName& ItemID);
	int GetItemQualityRank(const struct FName& ItemID);
	struct FName GetItemIdFromRecipeName(const struct FName& RecipeName);
	int GetItemGroupTotalNum(const struct FName& ItemID);
	TEnumAsByte<EJackEquipmentRegion> GetItemEquipRegion();
	int GetItemCountTotalNum(int MaterialIndex);
	int GetItemCountPlusTotalNum(int MaterialIndex, int ItemRank);
	float GetIdealVal(int GaugeIndex);
	bool GetHissatuUseFlag();
	bool GetHissatuSelectListFlag();
	bool GetHissatuPossibleFlag();
	float GetGaugeWidth(int GaugeIndex);
	float GetGaugeSuccessMin(int GaugeIndex);
	float GetGaugeSuccessMax(int GaugeIndex);
	struct FVector2D GetGaugeScale(int GaugeIndex);
	float GetGaugeSafetyMin(int GaugeIndex);
	float GetGaugeSafetyMax(int GaugeIndex);
	float GetGaugeReferenceHP(int GaugeIndex);
	struct FVector2D GetGaugePos(int GaugeIndex, float BaseSize);
	float GetGaugeMaxHP(int GaugeIndex);
	float GetGaugeHP(int GaugeIndex);
	bool GetGaugeColorUpdateFlag(int GaugeIndex);
	float GetGaugeAvg();
	int GetGameTurn();
	TEnumAsByte<EJackFusigiKaziGameStat> GetGameStat();
	struct FVector2D GetFrameSize();
	struct FName GetEnableMaterialItemNameInGroup(const struct FName& ItemID, int EnableIndex);
	TEnumAsByte<EJackFusigiKaziEffect> GetEffectBeforeAction();
	TEnumAsByte<EJackFusigiKaziEffect> GetEffectAfterAction(int Index);
	int GetDisplayTemperature();
	int GetDifficultyRank(const struct FName& ItemID);
	int GetCursorPosToGaugeIndex(const struct FName& ActionName, int CursorIndex);
	struct FVector2D GetCursorPos(const struct FVector& StartPos, const struct FVector& RelativePos);
	struct FVector2D GetCursorMassPos(int Index);
	TEnumAsByte<EJackFusigiKaziMetalMaterial> GetCreateMetalType();
	TEnumAsByte<EJackFusigiKaziKanagata> GetCreateKanagataType();
	int GetCreateItemDisplayStatusParam(const struct FName& InItemId, TEnumAsByte<EJackItem_ParameterType> ParamType);
	TEnumAsByte<EJackFusigiKaziCreateFrame> GetCreateFrameType(TEnumAsByte<EJackFusigiKaziParts> PType);
	TEnumAsByte<EJackFusigiKaziCreateCategory> GetCreateCategory();
	TArray<struct FName> GetCreatableItemNameGroup();
	struct FName GetCreatableItemName(int GroupIndex);
	void GetBulkBuyingList(TArray<struct FJackUMGRequiredMaterialInfo> InRequiredMaterialList, TArray<struct FJackUIItemBulkBuyingInfo>* OutBulkBuyingList);
	int GetBuckupSelectTokugiIndex();
	struct FName GetBuckupSelectCategoryID();
	struct FVector2D GetBuckupCursorPos();
	struct FVector2D GetBalloonGeneratePos(int Index, const struct FVector2D& MassOffset);
	int GetBackupTopCommandIndex();
	TEnumAsByte<EJackUMGItemSortType> GetBackupSortType(TEnumAsByte<EJackItem_Bag> BagType);
	int GetActionUseTemperature(const struct FName& ActionName);
	struct FName GetActionSetumeiMessageID_Tokugi(const struct FName& ActionName);
	int GetActionNeedCPForTokugi(const struct FName& ActionID);
	int GetActionNeedCP();
	struct FName GetActionNameForCategory(const struct FName& CategoryName);
	struct FName GetActionDataNameForIndex(int Index);
	struct FName GetActionCategoryName(const struct FName& ItemID);
	bool EffectAddToScreen(class UJackUMGWidgetBase* AddWidget, int ZOrder);
	void DisplayKaisinMessage();
	bool DebugIsDebugDrawRecipeLv();
	bool DebugIsDebugDrawGaugeInfo();
	bool DebugGetKaziCameraMoveEnable();
	void CreateSelectPartsList();
	void CreateRecipeList();
	void CreateNewRecipeList();
	void CreateNeedMaterialList(const struct FName& RecipeName);
	TEnumAsByte<EJackFusigiKaziDifficultyType> ConvertUnderDifficultyStringToEnum(const struct FString& Difficulty);
	void CloseKaisinMessage();
	void ClearStartMaterialSpecial();
	void ClearStartHissatuCharge();
	void ClearKaziWidgetParts(TEnumAsByte<EJackFusigiKaziUMGParts> KaziPartsType);
	void ClearKaziMaterialInfo();
	void ClearKaziGame();
	void ClearBackupSortType();
	void CheckOutOtherAchievement();
	bool CheckMaterialUseInfo(TEnumAsByte<EJackFusigiKaziMaterialUseInfo> UseType);
	struct FName CheckLearningTokugi(int JudgeStartLevel, int PlayerLevel, bool bHissatuCheck);
	void CheckFusigiKaziAchievement();
	void ChangeUseMaterialItemListData(int MaterialIndex, const struct FName& NewItemID);
	int CalcRetryMaterialBonus();
	struct FVector2D BuckupSelectStartCursorPos();
	int AddRetryMaterialItemNum(int AddVal);
	void AddBrowsedRecipeBook();
};


// Class JackGame.JackUMGAccessorItem
// 0x0460 (0x04A0 - 0x0040)
class UJackUMGAccessorItem : public UJackUMGAccessorBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	struct FJackUMGBagEventTag                         BagEventTag;                                              // 0x0050(0x0038) (Edit, BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGActionIcons                         ActionIcons;                                              // 0x0088(0x0078) (Edit)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0100(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGAccessorItem.NoEquipmentHandednessIcon
	unsigned char                                      UnknownData02[0x10];                                      // 0x0110(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGAccessorItem.NoEquipmentHandIcon
	unsigned char                                      UnknownData03[0x18];                                      // 0x0120(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.NoEquipmentHeadIcon
	unsigned char                                      UnknownData04[0x18];                                      // 0x0138(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.NoEquipmentBodyIcon
	unsigned char                                      UnknownData05[0x18];                                      // 0x0150(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.NoEquipmentAccessoryIcon
	unsigned char                                      UnknownData06[0x10];                                      // 0x0168(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGAccessorItem.NoEquipmentItemHandednessIcon
	unsigned char                                      UnknownData07[0x10];                                      // 0x0178(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGAccessorItem.NoEquipmentItemHandIcon
	unsigned char                                      UnknownData08[0x18];                                      // 0x0188(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.NoEquipmentItemHeadIcon
	unsigned char                                      UnknownData09[0x18];                                      // 0x01A0(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.NoEquipmentItemBodyIcon
	unsigned char                                      UnknownData10[0x18];                                      // 0x01B8(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.NoEquipmentItemAccessoryIcon
	unsigned char                                      UnknownData11[0x18];                                      // 0x01D0(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.SecretItemBookIcon
	unsigned char                                      UnknownData12[0x10];                                      // 0x01E8(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGAccessorItem.CharaNumberIcons
	unsigned char                                      UnknownData13[0x18];                                      // 0x01F8(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.OsyareType1Frame
	unsigned char                                      UnknownData14[0x18];                                      // 0x0210(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.OsyareType1Stars
	unsigned char                                      UnknownData15[0x18];                                      // 0x0228(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.OsyareType2Frame
	unsigned char                                      UnknownData16[0x18];                                      // 0x0240(0x0018) UNKNOWN PROPERTY: SoftObjectProperty JackGame.JackUMGAccessorItem.OsyareType2Stars
	unsigned char                                      UnknownData17[0x10];                                      // 0x0258(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGAccessorItem.BagListBackground
	struct FJackUMGParamPercentFlags                   ParamPercentFlags;                                        // 0x0268(0x0012) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData18[0x2];                                       // 0x027A(0x0002) MISSED OFFSET
	int                                                SortMaxNumber;                                            // 0x027C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackUMGCanOnlyBuyOnceItem>          CanOnlyBuyOnceItemList;                                   // 0x0280(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                ShopTradeLimitCount;                                      // 0x0290(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGItemClassRefineData                 ClassRefineData;                                          // 0x0294(0x001F) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x5];                                       // 0x02B3(0x0005) MISSED OFFSET
	struct FJackUMGItemClassRefineName                 ClassRefineName;                                          // 0x02B8(0x00A0) (Edit, DisableEditOnInstance)
	TArray<EJackUMGItemClassRefineType>                SoubiClassRefineList;                                     // 0x0358(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UDataTable*                                  ScheduledKiraDataTable;                                   // 0x0368(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  GmmickDropDataTable;                                      // 0x0370(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FJackUMGScenarioFlagName>            ShopVisitList;                                            // 0x0378(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackUMGScenarioFlagName>            KiraVisitList;                                            // 0x0388(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UTexture2D*>                          SyousaiVisitIcons;                                        // 0x0398(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  EquippedMitameBuiIcon;                                    // 0x03A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NoEquipmentMitameBuiIcon;                                 // 0x03B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  EquippedMitameListIcon;                                   // 0x03B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  NoEquipmentMitameListIcon;                                // 0x03C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCollectVisitMap;                                       // 0x03C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	TArray<struct FName>                               ImageChangeRingItemId;                                    // 0x03D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FJackLDT_GameFlagDataScenario               SenaShortHairScenario1ID;                                 // 0x03E0(0x0010) (Edit, DisableEditOnInstance)
	struct FJackLDT_GameFlagDataScenario               SenaShortHairScenario2ID;                                 // 0x03F0(0x0010) (Edit, DisableEditOnInstance)
	bool                                               SenaShortHairFalse1;                                      // 0x0400(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SenaShortHairFalse2;                                      // 0x0401(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SenaShortHairFalseFlag;                                   // 0x0402(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SenaShortHairTrue1;                                       // 0x0403(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SenaShortHairTrue2;                                       // 0x0404(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               SenaShortHairTrueFlag;                                    // 0x0405(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData21[0x2];                                       // 0x0406(0x0002) MISSED OFFSET
	TArray<struct FName>                               CanNotBulkBuyingItemList;                                 // 0x0408(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData22[0x70];                                      // 0x0418(0x0070) MISSED OFFSET
	class UEnum*                                       EnumClassification;                                       // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEnum*                                       EnumJackItemBag;                                          // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorItem");
		return ptr;
	}


	int SortItemList(TEnumAsByte<EJackUMGItemSortType> InSortType);
	TArray<class UJackUMGItemData*> SortDisplayList(TArray<class UJackUMGItemData*> InItemDataList, TEnumAsByte<EJackUMGItemSortType> InSortType, TEnumAsByte<EJackCharacter> InCharacterType, bool bIsDoNotRenumbers);
	int SortBagItemListByBagType(TEnumAsByte<EJackUMGItemSortType> InSortType, TEnumAsByte<EJackItem_Bag> InBagType);
	int SortBagItemList(TEnumAsByte<EJackUMGItemSortType> InSortType);
	class UJackUMGItemSyousai* SetupItemSyousai(class UJackUMGItemSyousai* InItemSyousai, const struct FName& InItemId, bool bIsEquipmentInfo, bool bIsCategoryIcon, bool bIsBookIcon);
	void SetTargetItemIndexInBag(int InIndex);
	void SetShopId(const struct FName& InShopId);
	void SetShopExchangeId(const struct FName& InExchangeId);
	void SetSelectedItemIndexInBag(int InIndex);
	void SetPassItemId(const struct FName& InPassItemId);
	void SetEquipmentRegion(TEnumAsByte<EJackEquipmentRegion> InRegionType);
	void SetBagTargetTypeWithItemIndex(TEnumAsByte<EJackItem_Bag> InBagType, int InIndex);
	void SetBagTargetType(TEnumAsByte<EJackItem_Bag> InBagType);
	void SetBagTargetName(const struct FName& InEnumName);
	void SetBagSelectedTypeWithItemIndex(TEnumAsByte<EJackItem_Bag> InBagType, int InIndex);
	void SetBagSelectedType(TEnumAsByte<EJackItem_Bag> InBagType);
	void SetBagSelectedName(const struct FName& InEnumName);
	void SetBagListToWindow(class UJackUMGBrowserBase* InBrowserBase, int InDispIndex, bool IsHukuro, bool IsEquipment, bool IsDaizinamono);
	int SetBagItemListToWindow(class UJackUMGBrowserBase* InBrowserBase, TEnumAsByte<EJackItem_Bag> InBagType, EJackUMGItemClassRefineType InRefineType, int InDispIndex, bool bIsDispList);
	void SetActionItemId(const struct FName& InItemId);
	void SetActionItemCount(int InCount);
	void SetActionCommandType(TEnumAsByte<EJackUMGItemActionCommand> InCommandType);
	void ResetUsingShopFlag();
	void RequestAsyncLoadItemPopIconCallback(TArray<struct FSoftObjectPath> TargetsToStream, TArray<class UObject*> LoadedObjects, const struct FName& ItemID);
	void JackUMGLoadedItemPopIconEvent__DelegateSignature(const struct FName& ItemID, class UObject* LoadedObject);
	bool IsPercentParam(TEnumAsByte<EJackItem_ParameterType> InParamType);
	bool IsItemsInBag(bool bIsEquipment);
	bool IsExecutableAction(class UJackUMGUIActionInfo* ActionInfo, TEnumAsByte<EJackCharacter> InTargetCharType, TEnumAsByte<EJackUMGMemberList> InCheckType);
	bool IsEquippedItemInChar(const struct FName& InItemId, TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackEquipmentRegion> InRegionType);
	bool IsEquippedItem(const struct FName& InItemId);
	bool IsCommonBag(TEnumAsByte<EJackItem_Bag> InBagType);
	bool IsCharacterBag(TEnumAsByte<EJackItem_Bag> InBagType);
	bool IsBagOverflow();
	bool IsAutoReleaseItem();
	bool IsActionMember(class UJackUMGUIActionInfo* ActionInfo, TEnumAsByte<EJackUMGMemberList> InListType);
	bool IsAcquisitionPictorialBookNoItem(int PictorialBookNo);
	bool IsAcquiredGoldPass();
	bool GetUsingShopFlag();
	class UJackUMGUIActionInfo* GetUIActionInfo(const struct FName& InActionId);
	struct FJackUMGActionBagInfo GetTargetActionBagInfo();
	class UTexture2D* GetSyousaiVisitIconTexture(TEnumAsByte<EJackUMGItemPlacedAcquisition> InIconType);
	struct FName GetSwapItemId();
	TEnumAsByte<EJackItem_Bag> GetStorageTypeFromItemClass(TEnumAsByte<EJackUMGItemClassification> InItemClassification);
	TArray<struct FString> GetSpecialEffectsMessage(const struct FName& InItemId);
	TEnumAsByte<EJackShop> GetShopType();
	void GetShopTalkTextId(const struct FName& InMessageId, struct FName* OutTextId);
	struct FString GetShopTalkText(const struct FName& InMessageId, struct FName* OutShopMessageId);
	EJackUMGShopResult GetShopResult();
	TArray<class UJackUMGItemData*> GetShopItemList();
	struct FName GetShopId();
	TArray<class UJackUMGItemData*> GetShopEquipmentStateList(const struct FName& InItemId);
	int GetShopCurrency();
	struct FJackUMGActionBagInfo GetSelectedActionBagInfo();
	EJackUIScenarioNumber GetScenarioNo();
	TArray<class UJackUMGItemData*> GetPresentItemList();
	struct FName GetPassItemId();
	struct FText GetParameterNameTextFromParamType(TEnumAsByte<EJackItem_ParameterType> InParamId);
	class UTexture2D* GetNoEquipmentIcon(TEnumAsByte<EJackCharacter> InCharaType, TEnumAsByte<EJackEquipmentRegion> InRegionType, bool bIsItemIcon);
	TArray<class UJackUMGItemData*> GetMedaruItemList();
	struct FText GetListItemNameFromId(const struct FName& InItemId);
	class UJackUMGUIActionInfo* GetItemUIActionInfo(const struct FName& InItemId);
	class UJackUMGItemSyousai* GetItemSyousaiWithBagType(const struct FName& InItemId, bool bIsEquipmentInfo, bool bIsCategoryIcon, bool bIsBookIcon, TEnumAsByte<EJackItem_Bag> InBagType);
	class UJackUMGShopItemSyousai* GetItemSyousaiShop(const struct FName& InItemId);
	TArray<struct FJackUMGItemListInfo> GetItemSyousaiListInSenreki(TArray<class UJackUMGItemData*> InItemDataList);
	TArray<struct FJackUMGItemListInfo> GetItemSyousaiListInFusigiRecipe(TArray<class UJackUMGItemData*> InItemDataList);
	TArray<struct FJackUMGItemListInfo> GetItemSyousaiListByItemIdList(TArray<struct FName> ItemIDList);
	TArray<struct FJackUMGItemListInfo> GetItemSyousaiList(TEnumAsByte<EJackItem_Bag> InBagType, EJackUMGItemClassRefineType InRefineType);
	class UJackUMGItemSyousai* GetItemSyousaiFromBagTypeAndItemIndex(TEnumAsByte<EJackItem_Bag> InBagType, int InItemIndex, bool bIsEquipmentInfo, bool bIsCategoryIcon, bool bIsBookIcon);
	class UJackUMGItemSyousai* GetItemSyousai(const struct FName& InItemId, bool bIsEquipmentInfo, bool bIsCategoryIcon, bool bIsBookIcon);
	class UJackUMGItemQualityInfo* GetItemQualityInfo(int InPictorialBookNo, const struct FName& InItemId);
	class UTexture2D* GetItemPopIconTexture(const struct FName& ItemID);
	struct FJackUMGGetItemData GetItemParameter(const struct FName& InItemId, TEnumAsByte<EJackUMGGetItemParam> InParamType);
	TEnumAsByte<EJackUMGItemOsyareType> GetItemOsyareTypeFromItemId(const struct FName& InItemId);
	TEnumAsByte<EJackUMGItemOsyareType> GetItemOsyareTypeFromAsset(const struct FString& InAssetName);
	class UTexture2D* GetItemOsyareIconTexture(TEnumAsByte<EJackUMGItemOsyareType> InOsyareType, bool bIsStars);
	struct FText GetItemNameFromId(const struct FName& InItemId);
	struct FJackUMGEquipmentParam GetItemMajorParameterType(const struct FName& InItemId);
	TArray<class UJackUMGItemData*> GetItemListFromItemIDList(TArray<struct FName> ItemIDList);
	int GetItemIndexFromRegion(TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackEquipmentRegion> InRegionType);
	struct FName GetItemIdFromBagIndex(TEnumAsByte<EJackItem_Bag> InBagType, int InIndex);
	int GetItemGettableCountInBag(TEnumAsByte<EJackItem_Bag> InBagType, const struct FName& InItemId);
	int GetItemGettableCount(const struct FName& InItemId);
	class UJackUMGUIActionInfo* GetItemEquipmentInfo(TEnumAsByte<EJackItem_Bag> InBagType, int InIndex);
	struct FName GetItemClassRefineTextId(EJackUMGItemClassRefineType InRefineType);
	TEnumAsByte<EJackUMGItemClassification> GetItemClassification(const struct FName& InItemId);
	void GetItemBookIconAssetPtr(const struct FName& InItemId);
	void GetFieldUseItemCommonActionResult(bool* bValidCommonAction, bool* bSuccess);
	TEnumAsByte<EJackEquipmentRegion> GetEquipmentRegion();
	bool GetDropMonsterList(const struct FName& InItemId, int GettableMaxCount, TArray<struct FJackUMGItemGetInfo>* OutMonsterList);
	TArray<struct FJackUMGItemGetInfo> GetDropMapListExternal(const struct FName& InItemId);
	bool GetDropMapList(const struct FName& InItemId, int GettableMaxCount, TArray<struct FJackUMGItemGetInfo>* OutMapList);
	TEnumAsByte<EJackItem_DiscardType> GetDiscardType(const struct FName& InItemId);
	TArray<struct FString> GetCookItemListFromRecipe(const struct FName& InItemId);
	struct FText GetClassificationTextFromType(TEnumAsByte<EJackItem_Classification> InClassType);
	class UTexture2D* GetCharaNumberIcon(int InNumber);
	class UTexture2D* GetCategoryIcon(const struct FName& InItemId);
	TArray<class UJackUMGItemData*> GetCasinoItemList();
	TEnumAsByte<EJackItem_Bag> GetBagTargetType();
	int GetBagTargetItemIndex();
	TEnumAsByte<EJackCharacter> GetBagTargetChar();
	TEnumAsByte<EJackItem_Bag> GetBagSelectedType();
	int GetBagSelectedItemIndex();
	TEnumAsByte<EJackCharacter> GetBagSelectedChar();
	void GetBagNameText(TEnumAsByte<EJackItem_Bag> InBagType, bool IsList, bool IsMotimono, struct FText* OutBagName);
	void GetBagNameString(TEnumAsByte<EJackItem_Bag> InBagType, bool IsList, bool IsMotimono, struct FString* OutBagName);
	struct FString GetBagName(TEnumAsByte<EJackItem_Bag> InBagType, bool IsList);
	class UTexture2D* GetBagListBackground(int NumList);
	TArray<class UJackUMGItemData*> GetBagList(bool IsHukuro, bool IsEquipment, bool IsDaizinamono);
	TArray<class UJackUMGItemData*> GetBagItemListBySoubiItemSwap(TEnumAsByte<EJackItem_Bag> InBagType, bool bIsNitouryuu);
	TArray<class UJackUMGItemData*> GetBagItemList(TEnumAsByte<EJackItem_Bag> InBagType, bool bIsRange, int InGetIndex, int InGetNumItem);
	class UTexture2D* GetBagIconFromType(TEnumAsByte<EJackItem_Bag> InBagType);
	TArray<class UJackUMGItemData*> GetBagEquipmentItemList(TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackEquipmentRegion> InRegionType, bool bIsAllChara, bool bIsFukuro, bool IsOptimisation);
	int GetBagCountBySelected();
	class UJackGameCharacter* GetBagCharacter(TEnumAsByte<EJackItem_Bag> InBagType);
	TEnumAsByte<EJackEquipmentRegion> GetAutoReleaseRegion();
	struct FName GetAutoReleaseItemId();
	struct FName GetActionItemId();
	int GetActionItemCount();
	class UTexture2D* GetActionIcon(EJackActionIconType IconType);
	TEnumAsByte<EJackUMGItemActionCommand> GetActionCommandType();
	void FixupLooks(TEnumAsByte<EJackCharacter> InCharType);
	int FindNoEquipmentItemFromInBag(TEnumAsByte<EJackItem_Bag> InBagType, bool IsEmptyZero);
	int FindItemFromInBag(TEnumAsByte<EJackItem_Bag> InBagType, const struct FName& InItemId, TEnumAsByte<EJackUMGItemFind> InFindType);
	class UJackUMGSerifuWindowController* DisplayUseItemMessage();
	void DebugTest(int InMdoe);
	class UJackUMGItemSyousai* CreateItemSyousai(const struct FName& InItemId, const struct FName& InTextId);
	int CountItemInBag(TEnumAsByte<EJackItem_Bag> InBagType, const struct FName& InItemId);
	int CountItemAllBag(const struct FName& InItemId, bool bWithCommonBag);
	int CountInBag(TEnumAsByte<EJackItem_Bag> InBagType);
	void CheckShoppingAchievement(int InBuyPrice);
	int CheckLeaveAtSort(TEnumAsByte<EJackItem_Bag> InBagType, TArray<class UJackUMGItemData*>* InRemoveList);
	int CheckEquipmentReleaseItem(TEnumAsByte<EJackCharacter> InCharaType, const struct FName& InItemId, struct FName* GetItemId, TEnumAsByte<EJackEquipmentRegion>* GetRegionType);
	int CheckDetachReleaseItem(TEnumAsByte<EJackCharacter> InCharaType, TEnumAsByte<EJackEquipmentRegion> InRegion, struct FName* OutItemId, TEnumAsByte<EJackEquipmentRegion>* OutRegion);
	TEnumAsByte<EJackEquipmentRegion> CheckAccessoryFreeRegion(TEnumAsByte<EJackCharacter> InCharaType, TEnumAsByte<EJackEquipmentRegion> InRegion, class UJackUMGItemSyousai* InItemSyousai, class UJackUMGUIActionInfo* InActionInfo);
	TEnumAsByte<EJackItem_Bag> STATIC_CharTypeToBagType(TEnumAsByte<EJackCharacter> InCharType);
	void CancelAsyncLoadItemPopIcon(class UObject* Target);
	bool CanBeEquippedItemInChar(const struct FName& InItemId, TEnumAsByte<EJackCharacter> InCharType);
	int CalcItemPrice(int ItemBuyPrine);
	TEnumAsByte<EJackCharacter> STATIC_BagTypeToCharType(TEnumAsByte<EJackItem_Bag> InBagType);
	void AsyncLoadItemPopIcon(class UObject* Target, const struct FName& ItemID, const struct FScriptDelegate& LoadedEvent);
	int ActionItem(TEnumAsByte<EJackUMGItemActionCommand> InCommandType, int InArg1);
	int ActionBulkBuy(TArray<struct FJackUIItemBulkBuyingInfo> InBulkBuyingList, bool bIsCalculationOnly);
};


// Class JackGame.JackUMGDispEquipmentState
// 0x0040 (0x0078 - 0x0038)
class UJackUMGDispEquipmentState : public UObject
{
public:
	TEnumAsByte<EJackCharacter>                        CharType;                                                 // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FText                                       CharName;                                                 // 0x0040(0x0018) (BlueprintVisi, BlueprintReadOnly)
	class UTexture2D*                                  FaceIcon;                                                 // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquipment;                                             // 0x0060(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsChanged;                                               // 0x0061(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGItemClassification>            ClassType;                                                // 0x0062(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0063(0x0005) MISSED OFFSET
	TArray<struct FJackUMGEquipmentParam>              Params;                                                   // 0x0068(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGDispEquipmentState");
		return ptr;
	}

};


// Class JackGame.JackUMGItemBagInfo
// 0x00A8 (0x00E0 - 0x0038)
class UJackUMGItemBagInfo : public UObject
{
public:
	TEnumAsByte<EJackItem_Bag>                         BagType;                                                  // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                IndexInBag;                                               // 0x003C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ItemID;                                                   // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       ItemName;                                                 // 0x0048(0x0018) (BlueprintVisi, BlueprintReadOnly)
	struct FText                                       ListItemName;                                             // 0x0060(0x0018) (BlueprintVisi, BlueprintReadOnly)
	struct FText                                       ItemYomi;                                                 // 0x0078(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                ClassificationID;                                         // 0x0090(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FText                                       ClassificationText;                                       // 0x0098(0x0018) (BlueprintVisi, BlueprintReadOnly)
	bool                                               IsEquipments;                                             // 0x00B0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	class UTexture2D*                                  SmallIcon;                                                // 0x00B8(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       Description;                                              // 0x00C0(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                InnerCount;                                               // 0x00D8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemBagInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGShopItemSyousai
// 0x0008 (0x0120 - 0x0118)
class UJackUMGShopItemSyousai : public UJackUMGItemSyousai
{
public:
	bool                                               bIsShopMamono;                                            // 0x0118(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShopOnlyOne;                                           // 0x0119(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShopOpened;                                            // 0x011A(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x011B(0x0001) MISSED OFFSET
	int                                                ExchangeCount;                                            // 0x011C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGShopItemSyousai");
		return ptr;
	}

};


// Class JackGame.JackUMGUIActionInfo
// 0x00D0 (0x0108 - 0x0038)
class UJackUMGUIActionInfo : public UObject
{
public:
	struct FName                                       ItemID;                                                   // 0x0038(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       ItemName;                                                 // 0x0040(0x0018) (BlueprintVisi, BlueprintReadOnly)
	struct FName                                       ActionID;                                                 // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       UsingActionID;                                            // 0x0060(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       UsingEvent;                                               // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       ActionName;                                               // 0x0070(0x0018) (BlueprintVisi, BlueprintReadOnly)
	EJackActionIconType                                IconType;                                                 // 0x0088(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_Classification>              ClassType;                                                // 0x0089(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGItemClassification>            UIClassType;                                              // 0x008A(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackActionCategory                                ActionCategory;                                           // 0x008B(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGUIActionFlow>                  FlowType;                                                 // 0x008C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bExecuteField;                                            // 0x008D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bExecuteBattle;                                           // 0x008E(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x008F(0x0001) MISSED OFFSET
	int                                                Soubi;                                                    // 0x0090(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FName                                       ActionDamageID;                                           // 0x0098(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackActionDamageType                              DamageType;                                               // 0x00A0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FName                                       ActionOddEffectID;                                        // 0x00A8(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               OddEffectID;                                              // 0x00B0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x00C0(0x0010) MISSED OFFSET
	TArray<struct FName>                               DisplayOddEffectId;                                       // 0x00D0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData04[0x1];                                       // 0x00E0(0x0001) MISSED OFFSET
	bool                                               IsEnemyTarget;                                            // 0x00E1(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackActionExtentType                              Extent;                                                   // 0x00E2(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x1];                                       // 0x00E3(0x0001) MISSED OFFSET
	int                                                ExtentExtra;                                              // 0x00E4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsWithoutSelf;                                            // 0x00E8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x00E9(0x0003) MISSED OFFSET
	int                                                DataIndex;                                                // 0x00EC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDougu;                                                 // 0x00F0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsJumon;                                                 // 0x00F1(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsContinuity;                                            // 0x00F2(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCanConsume;                                              // 0x00F3(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquipped;                                              // 0x00F4(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bStoreEquipmentBag;                                       // 0x00F5(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  EquipmentInRegion;                                        // 0x00F6(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentMultiple>                EquipmentMultiple;                                        // 0x00F7(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  EquipmentRegion;                                          // 0x00F8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  MultipleEquipmentRegion;                                  // 0x00F9(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  ReleaseRegion;                                            // 0x00FA(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackItem_EquipmentSE>                 EquipmentSE;                                              // 0x00FB(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                UseMP;                                                    // 0x00FC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                UseGold;                                                  // 0x0100(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsConsumableMP;                                          // 0x0104(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMPSyouhi0;                                             // 0x0105(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMPSyouhiZouka;                                         // 0x0106(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0107(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGUIActionInfo");
		return ptr;
	}


	void SetIsJumon(bool IsJumon);
	bool IsBothHandsEquipment();
	bool IsActionId();
	void GetActionDescriptionString(EJackActionTextType TextType, bool ListFlag, struct FString* OutDescriptiont);
	void GetActionDescription(EJackActionTextType InTextType, bool ListFlag, struct FText* OutDescriptiont);
	void CalcMPSyouhi(TEnumAsByte<EJackCharacter> InCharaType);
};


// Class JackGame.JackUMGItemQualityInfo
// 0x0058 (0x0090 - 0x0038)
class UJackUMGItemQualityInfo : public UObject
{
public:
	int                                                RecipeRank;                                               // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EJackItem_ParameterType>>       MajorParamTypes;                                          // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FText>                               MajorParamNames;                                          // 0x0050(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               SpecalTextIds;                                            // 0x0060(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FString>                             SpecalMessage;                                            // 0x0070(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FJackUMGItemQualityParams>           QualityParams;                                            // 0x0080(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemQualityInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorMantan
// 0x01A8 (0x01E0 - 0x0038)
class UJackUMGAccessorMantan : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	int                                                MantanRecoverLoopCount;                                   // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StandbyMemberCorrection;                                  // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SaveMpBorder;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ManyMpMemberCorrection;                                   // 0x004C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RemineMpCorrection;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KaifukuMaryokuCorrection;                                 // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int64_t                                            InverseCorrection;                                        // 0x0058(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RecoverToStandbyCorrection;                               // 0x0060(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisplayMantanMassage;                                    // 0x0064(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMultiThread;                                          // 0x0065(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0066(0x0002) MISSED OFFSET
	float                                              EisyoSeWaitTime;                                          // 0x0068(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MantanWaitTime;                                           // 0x006C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugUncheckMpValue;                                     // 0x0070(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugOutputMantanLog;                                    // 0x0071(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugOutputActionInfoListLog;                            // 0x0072(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugMinimumRecover;                                     // 0x0073(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x64];                                      // 0x0074(0x0064) MISSED OFFSET
	TArray<class UJackFriendGameCharacter*>            CacheMemberList;                                          // 0x00D8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0xB8];                                      // 0x00E8(0x00B8) MISSED OFFSET
	class UJackGameCharacter*                          TreatCaster;                                              // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackGameCharacter*                          TreatTarget;                                              // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x30];                                      // 0x01B0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorMantan");
		return ptr;
	}


	void OnMantanMessageEnd();
	void JackMantanCommandEndDelegate__DelegateSignature();
	bool IsExecutableMantanCommand(bool bInNearlyFull, bool bInDontCheckParam, bool bInDontCheckAction, bool bInOnlyCheckActionLearned);
	void ExecuteMantanCommand(bool bInNearlyFull, const struct FScriptDelegate& EndEvent);
	void DebugSetMemberMaxHp(TEnumAsByte<EJackCharacter> CharacterType, int MaxHP);
	void DebugSetMemberHp1();
	void DebugExecCheatCommand();
};


// Class JackGame.JackUMGAccessorMemberDataInKyoukai
// 0x0040 (0x0078 - 0x0038)
class UJackUMGAccessorMemberDataInKyoukai : public UObject
{
public:
	int                                                Index;                                                    // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisibleNumber;                                         // 0x003C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharaType;                                                // 0x003D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	struct FString                                     Name;                                                     // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                Level;                                                    // 0x0050(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                RestExp;                                                  // 0x0054(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDead;                                                  // 0x0058(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDoku;                                                  // 0x0059(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsNoroi;                                                 // 0x005A(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x005B(0x0001) MISSED OFFSET
	int                                                HP;                                                       // 0x005C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxHP;                                                    // 0x0060(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HPRate;                                                   // 0x0064(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               OddEffectIdList;                                          // 0x0068(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorMemberDataInKyoukai");
		return ptr;
	}


	struct FName GetOddEffectId(EJackKyoukaiEffectEventType EventType);
	class UJackUMGAccessorMemberDataInKyoukai* STATIC_GetMemberData(class UJackUMGItemData* ItemData);
	bool STATIC_ExistsDeadMember(TArray<class UJackUMGItemData*> ItemDataList);
	void ExecResuscitate(class UObject* Obj);
	void ExecDispel(class UObject* Obj);
	void ExecDetox(class UObject* Obj);
	int CalculateResuscitateCost(class UObject* Obj);
	int CalculateDispelCost(class UObject* Obj);
	int CalculateDetoxCost(class UObject* Obj);
};


// Class JackGame.JackUMGTuyosaSkillGroupData
// 0x0028 (0x0060 - 0x0038)
class UJackUMGTuyosaSkillGroupData : public UObject
{
public:
	struct FString                                     GroupName;                                                // 0x0038(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EJackSkillLine>                        SkillLineType;                                            // 0x0048(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                UsedSkillPoint;                                           // 0x004C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMGItemData*>                    SkillList;                                                // 0x0050(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTuyosaSkillGroupData");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorMemberDataInTuyosa
// 0x00C8 (0x0100 - 0x0038)
class UJackUMGAccessorMemberDataInTuyosa : public UObject
{
public:
	int                                                Index;                                                    // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FText                                       DisplayName;                                              // 0x0040(0x0018) (BlueprintVisi, BlueprintReadOnly)
	class UJackGameCharacter*                          GameCharacter;                                            // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bConstructedOverview;                                     // 0x0060(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bConstructedAll;                                          // 0x0061(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0062(0x0006) MISSED OFFSET
	struct FString                                     Katagaki;                                                 // 0x0068(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UJackUMGSoubiList*                           SoubiList;                                                // 0x0078(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMGItemData*>                    TokusyuList;                                              // 0x0080(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJackUMGItemData*>                    JumonList;                                                // 0x0090(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJackUMGItemData*>                    TokugiList;                                               // 0x00A0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJackUMGTuyosaSkillGroupData*>        SkillGroupList;                                           // 0x00B0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJackUMGItemData*>                    RenkeiList;                                               // 0x00C0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bShowKaziPage;                                            // 0x00D0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	int                                                MaxCP;                                                    // 0x00D4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMGItemData*>                    KaziGameActionList;                                       // 0x00D8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                MaxPageCount;                                             // 0x00E8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxJumonPageCount;                                        // 0x00EC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxTokugiPageCount;                                       // 0x00F0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxSkillPageCount;                                        // 0x00F4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxRenkeiPageCount;                                       // 0x00F8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorMemberDataInTuyosa");
		return ptr;
	}


	bool IsTokusyuInfoOpened();
	bool IsTokusyuEmpty();
	bool IsTokugiInfoOpened();
	bool IsTokugiEmpty();
	bool IsSkillInfoOpened();
	bool IsSkillEmpty();
	bool IsRenkeiInfoOpened();
	bool IsRenkeiEmpty();
	bool IsKaziGameActionListInfoOpened();
	bool IsKaziGameActionListEmpty();
	bool IsJumonInfoOpened();
	bool IsJumonEmpty();
	int GetLastTokugiPageIndex();
	int GetLastSkillPageIndex();
	int GetLastRenkeiPageIndex();
	int GetLastJumonPageIndex();
	void GetActionItemListAtPageIndex(TEnumAsByte<EJackTuyosaPage> PageType, int PageIndexInSkillList, TArray<class UJackUMGItemData*>* DisplayItemList, struct FString* PageTitleSub, int* UsedSkillPoint, int* VerticalItemCount);
};


// Class JackGame.JackUMGTuyosaRenkeiData
// 0x00D0 (0x0108 - 0x0038)
class UJackUMGTuyosaRenkeiData : public UObject
{
public:
	struct FString                                     RenkeiName;                                               // 0x0038(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UTexture2D*                                  RenkeiIcon;                                               // 0x0048(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     Description;                                              // 0x0050(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FJackUMGTuyosaRenkeiCharacterData           CharacterDataA;                                           // 0x0060(0x0028) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGTuyosaRenkeiCharacterData           CharacterDataB;                                           // 0x0088(0x0028) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGTuyosaRenkeiCharacterData           CharacterDataC;                                           // 0x00B0(0x0028) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGTuyosaRenkeiCharacterData           CharacterDataD;                                           // 0x00D8(0x0028) (BlueprintVisi, BlueprintReadOnly)
	bool                                               bAllNeedZone;                                             // 0x0100(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTuyosaRenkeiData");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorMembers
// 0x02C0 (0x0300 - 0x0040)
class UJackUMGAccessorMembers : public UJackUMGAccessorBase
{
public:
	TArray<struct FJackUMGTaneIdToTextIdRec>           TaneIdToTextIdTable;                                      // 0x0040(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               TokugiActionIdToJumonList;                                // 0x0050(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FJackUMGJoutaiMiruMember>            JoutaiMiruMember;                                         // 0x0060(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    SenaHairstyleChangedDelegate;                             // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FJackUMGFaceIconTexture                     FaceIconP001;                                             // 0x0080(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP002;                                             // 0x00B0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP003;                                             // 0x00E0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP004_2;                                           // 0x0110(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP004_3;                                           // 0x0140(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP005;                                             // 0x0170(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP006;                                             // 0x01A0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP007;                                             // 0x01D0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGFaceIconTexture                     FaceIconP008;                                             // 0x0200(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0230(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorMembers");
		return ptr;
	}


	void StoreMemberGambitList();
	void SetTargetCharType(TEnumAsByte<EJackCharacter> InCharType);
	void SetSelectedTokugiId(const struct FName& InTokugiId);
	void SetSelectedMemberName(const struct FText& Name);
	void SetSelectedMember(int SelectedIndex);
	void SetSelectedJumonName(const struct FText& Jumon);
	void SetSelectedJumonId(const struct FName& InJumonId);
	void SetSelectedCharType(TEnumAsByte<EJackCharacter> InCharType);
	void SetOddEffectLinefeedText(const struct FString& InText, TArray<class UTextBlock*> TextBlock);
	void SetMemberListToWindow(class UJackUMGBrowserBase* InBrowserWindow, int InDispIndex, TEnumAsByte<EJackUMGMemberList> InMemberType, TEnumAsByte<EJackUMGMembarZenin> InZeninType);
	void SetMemberGambit(TEnumAsByte<EJackGambit> InGambit);
	void SetJoutaiIjouNames(TEnumAsByte<EJackCharacter> InCharType, int InOffset, TArray<class UJackUMGItemBase*> InItemBase, bool IsSubmember, int InIndex, int OddMax);
	TEnumAsByte<EJackCharacter> SetJoutaiIjouFaces(class UJackUMGItemData* InItemData, class UJackUMGItemBase* InItemBase);
	void SetJoutaiIjouFace(class UJackUMGItemBase* InItemBase, const struct FText& CharName);
	void RestoreMemberGambitList();
	struct FString ReplaceAccentMoji(const struct FString& InName, bool IsB);
	void PlayFieldActionSE(const struct FName& InActionId);
	void NakamaKaiwa();
	void MakeMemberListInJoutaiMiru(bool IsSubParty);
	void JackOnSenaHairstyleChangedDelegate__DelegateSignature();
	bool IsTrialLevelLimit(class UJackGameCharacter* InCharacter);
	bool IsTokugiListAtGameCharacter(TEnumAsByte<EJackUMGJumonBasyo> InTokugiType, class UJackGameCharacter* InGameCharacter, bool bInTuyosaMenu);
	bool IsSyuurenjou();
	bool IsPlayerSenaShortHair();
	bool IsPartyMemberFromType(TEnumAsByte<EJackCharacter> InType);
	bool IsOnOddEffectStatus(TEnumAsByte<EJackCharacter> InCharaType, const struct FName& InOddEffectStatusId);
	bool IsMultipleCharacters();
	bool IsLearnedRenkei();
	bool IsJumonListAtGameCharacter(TEnumAsByte<EJackUMGJumonBasyo> JumonType, class UJackGameCharacter* GameCharacter);
	bool IsEnableMainCommandJumon();
	bool IsEnableIrekae();
	bool IsDead(TEnumAsByte<EJackCharacter> InCharType);
	bool IsActivePlayerAI(int InIndex);
	bool HasFriendJoined(TEnumAsByte<EJackCharacter> InCharaType);
	void GetTokusyuDescriptionList(class UJackGameCharacter* Member, EJackActionTextType TextType, TArray<struct FString>* TokusyuDescriptionList);
	TArray<class UJackUMGItemData*> GetTokugiListAtGameCharacter(TEnumAsByte<EJackUMGJumonBasyo> InTokugiType, class UJackGameCharacter* InGameCharacter, bool bInTuyosaMenu, bool IsOptimisation);
	struct FName GetTextIDWhenRejectedNakamaKaiwa();
	struct FName GetTaneTextId(const struct FName& InTaneId);
	TArray<class UJackUMGItemData*> GetTaneActionMemberList(TEnumAsByte<EJackUMGMemberList> InMemberType, TEnumAsByte<EJackUMGUIActionFlow> InUIFlowType, const struct FName& InItemId);
	TArray<class UJackUMGItemData*> GetSystemCommandListSteam();
	TArray<class UJackUMGItemData*> GetSystemCommandListNE();
	TArray<class UJackUMGItemData*> GetSystemCommandList();
	struct FName GetSelectedTokugiId();
	struct FText GetSelectedMemberName();
	int GetSelectedMember();
	struct FText GetSelectedJumonName();
	struct FName GetSelectedJumonId();
	TEnumAsByte<EJackCharacter> GetSelectedCharType();
	TArray<class UJackUMGItemData*> GetSakusenMemberList(TEnumAsByte<EJackUMGMemberList> InMemberType, TEnumAsByte<EJackUMGMembarZenin> ZeninType);
	TArray<class UJackUMGItemData*> GetSakusenCommandList();
	TArray<class UJackUMGItemData*> GetPlayKankyouCommandListNE();
	TArray<class UJackUMGItemData*> GetPlayKankyouCommandList();
	TEnumAsByte<EJackPartyTalkState> GetPartyTalkState();
	int GetPartyMemberIndexFromType(TEnumAsByte<EJackCharacter> InType);
	class UJackUMGSoubiList* GetOsusumeSoubiListAsync(TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackUMGOsusumeSoubi> InOsusumeType, const struct FScriptDelegate& InDelegate);
	class UJackUMGSoubiList* GetOsusumeSoubiList(TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackUMGOsusumeSoubi> InOsusumeType);
	TArray<struct FName> GetOddEffectWithIconIdList(TEnumAsByte<EJackCharacter> InCharType, TArray<int>* OutSlideValue);
	int GetOddEffectSlideRank(TEnumAsByte<EJackCharacter> InCharType, const struct FName& InOddEffectId);
	struct FString GetOddEffectSetumei(const struct FName& InOddEffectId, class UJackUMGItemBase* InItemBase, bool IsSubParty);
	TArray<struct FName> GetOddEffectIdList(TEnumAsByte<EJackCharacter> InCharType);
	struct FString GetNameFromIndex(int InIndex);
	int GetMPFromMemberIndex(int InMemberIndex);
	int GetMPFromMemberCharType(TEnumAsByte<EJackCharacter> InCharType);
	void GetMemberListInTuyosaToWindow(class UJackUMGBrowserBase* InBrowserBase);
	void GetMemberListInTuyosa(TArray<class UJackUMGItemData*>* OutItemDataList);
	TArray<class UJackUMGItemData*> GetMemberListInPhotoModeMenu();
	TArray<class UJackUMGItemData*> GetMemberListInKyoukai();
	TArray<class UJackUMGItemData*> GetMemberListInJoutai(bool IsSubParty);
	TArray<class UJackUMGItemData*> GetMemberList(TEnumAsByte<EJackUMGMemberList> InMemberType, TEnumAsByte<EJackUMGMembarZenin> ZeninType);
	TEnumAsByte<EJackGambit> GetMemberGambitIndex(int InIndex);
	int GetMaxMPFromMemberIndex(int InMemberIndex);
	int GetMaxJoutaiIjouNumber();
	struct FText GetJumonName(const struct FName& InJumonId, bool ListFlag);
	TArray<class UJackUMGItemData*> GetJumonMembarList();
	TArray<class UJackUMGItemData*> GetJumonListAtGameCharacter(TEnumAsByte<EJackUMGJumonBasyo> JumonType, class UJackGameCharacter* GameCharacter, bool IsOptimisation);
	int GetJoutaiIjouNumber(int InIndex);
	class UJackFriendGameCharacter* GetJackCharacterFromType(TEnumAsByte<EJackCharacter> InType);
	TArray<struct FName> GetIrekaeKinsiJoutaiIjouList(TEnumAsByte<EJackCharacter> InCharType);
	TArray<class UJackUMGItemData*> GetHudStatusList();
	TArray<struct FJackUMGOddEffectStatus> GetGoodOddEffectIdList(TEnumAsByte<EJackCharacter> InCharType);
	TArray<TEnumAsByte<EJackCharacter>> GetFriendJoinedAfterList();
	TEnumAsByte<EJackCharacter> GetFirstMembarCharacterType();
	TArray<struct FName> GetDisplayOddEffectList(TEnumAsByte<EJackCharacter> InCharType, const struct FName& InActionId);
	struct FString GetCharNameFromType(TEnumAsByte<EJackCharacter> InType);
	struct FName GetCharFNameFromType(TEnumAsByte<EJackCharacter> InType);
	class UJackUMGDispEquipmentState* GetCharEquipmentState(TEnumAsByte<EJackCharacter> InCharType, const struct FName& InItemId, TEnumAsByte<EJackEquipmentRegion> InRegionType, bool bIsHandedness, bool bIsAllParam);
	class UJackUMGItemData* GetCharacterSoubi(TEnumAsByte<EJackCharacter> InCharType);
	struct FString GetCharacterNameFromType(TEnumAsByte<EJackCharacter> InType);
	struct FString GetCharacterNameFromIndex(int InIndex);
	class UTexture2D* GetCharacterFaceIconFromType(TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackUIFaceIcon> InIconType);
	void GetCharacterFaceIconAssetFromType(TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackUIFaceIcon> InIconType);
	TArray<class UJackUMGItemData*> GetBattleSakusenCommandList();
	class UJackUMGBattleResultData* GetBattleResultData(TEnumAsByte<EJackCharacter> InCharType, int InBeforeLevel, int InAfterLevel);
	TArray<struct FJackUMGOddEffectStatus> GetBadOddEffectIdList(TEnumAsByte<EJackCharacter> InCharType);
	class UJackUMGItemActionStatus* GetActionStatusFromType(TEnumAsByte<EJackCharacter> InCharaType);
	class UJackUMGItemActionStatus* GetActionStatusFromCharacter(class UJackGameCharacter* GameCharacter);
	struct FText GetActionName(const struct FName& InActionId, bool ListFlag);
	TArray<class UJackUMGItemData*> GetActionMemberList(TEnumAsByte<EJackUMGMemberList> InMemberType, TEnumAsByte<EJackUMGUIActionFlow> InUIFlowType, const struct FName& InActionId, TEnumAsByte<EJackCharacter> InWithoutCharType);
	struct FText GetActionDescription(const struct FName& InActionId, EJackActionTextType TextType, bool ListFlag);
	class UJackUMGSerifuWindowController* DisplayUseJumonMessage();
	void DebugDispItemList(TArray<class UJackUMGItemData*> InList);
	int CountMember();
	void ConstructMemberDataInTuyosa(class UJackUMGAccessorMemberDataInTuyosa* RefTuyosaData, bool bOnlyOverview);
	void ClearMemberGambitList();
	void ChangeGambit(TEnumAsByte<EJackGambit> GambitType);
	void CancelGetOsusumeSoubiList(class UJackUMGSoubiList* SoubiList);
	void ActionFieldJumon();
};


// Class JackGame.JackUMGItemActionStatus
// 0x0070 (0x00A8 - 0x0038)
class UJackUMGItemActionStatus : public UObject
{
public:
	TEnumAsByte<EJackUMGUIActionFlow>                  FlowType;                                                 // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharType;                                                 // 0x0039(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET
	struct FText                                       CharName;                                                 // 0x0040(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                Number;                                                   // 0x0058(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsParty;                                                 // 0x005C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAlive;                                                 // 0x005D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x005E(0x0002) MISSED OFFSET
	int                                                PresentHP;                                                // 0x0060(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxHP;                                                    // 0x0064(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PresentMP;                                                // 0x0068(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxMP;                                                    // 0x006C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ItemID;                                                   // 0x0070(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TaneParam;                                                // 0x0078(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ConsumedTokugi;                                           // 0x007C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TotalTokugi;                                              // 0x0080(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TArray<struct FName>                               OddEffectList;                                            // 0x0088(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FName>                               DisplayOddEffects;                                        // 0x0098(0x0010) (BlueprintVisi, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemActionStatus");
		return ptr;
	}


	bool IsExecutableAction(class UJackUMGUIActionInfo* UIActionInfo);
	TArray<struct FName> GetExecutableOddEffectList(class UJackUMGUIActionInfo* UIActionInfo);
};


// Class JackGame.JackUMGBattleResultData
// 0x0128 (0x0160 - 0x0038)
class UJackUMGBattleResultData : public UObject
{
public:
	TEnumAsByte<EJackCharacter>                        CharType;                                                 // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                BeforeLevel;                                              // 0x003C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                AfterLevel;                                               // 0x0040(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FJackDataTableLevelUp                       BaseUpData;                                               // 0x0048(0x0050) (BlueprintVisi, BlueprintReadOnly)
	struct FJackDataTableLevelUp                       BeforeLevelData;                                          // 0x0098(0x0050) (BlueprintVisi, BlueprintReadOnly)
	struct FJackDataTableLevelUp                       AfterLevelData;                                           // 0x00E8(0x0050) (BlueprintVisi, BlueprintReadOnly)
	struct FText                                       LevelUpMessage;                                           // 0x0138(0x0018) (BlueprintVisi, BlueprintReadOnly)
	TArray<struct FText>                               AcquisitionMessageArray;                                  // 0x0150(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGBattleResultData");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorMembersInChange
// 0x0040 (0x0078 - 0x0038)
class UJackUMGAccessorMembersInChange : public UObject
{
public:
	int                                                MaxHP;                                                    // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxMP;                                                    // 0x003C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                KougekiKikite;                                            // 0x0040(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Kougeki;                                                  // 0x0044(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Syubi;                                                    // 0x0048(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                KougekiMaryoku;                                           // 0x004C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                KaifukuMaryoku;                                           // 0x0050(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Tikara;                                                   // 0x0054(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Minomamori;                                               // 0x0058(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Subayasa;                                                 // 0x005C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Kiyousa;                                                  // 0x0060(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Miryoku;                                                  // 0x0064(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackGameCharacter*                          GameCharacter;                                            // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackCharacter>                        CharacterType;                                            // 0x0070(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorMembersInChange");
		return ptr;
	}


	class UJackUMGAccessorMembersInChange* STATIC_GetChangeData(class UJackUMGItemData* ItemData);
};


// Class JackGame.JackUMGSaveDataContainer
// 0x0098 (0x00D0 - 0x0038)
class UJackUMGSaveDataContainer : public UObject
{
public:
	bool                                               bIsValid;                                                 // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x003C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DataNumber;                                               // 0x0040(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x0048(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                PlayerLevel;                                              // 0x0058(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FText                                       FukkatuLocation;                                          // 0x0060(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                PlayTimeHour;                                             // 0x0078(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PlayTimeMinutes;                                          // 0x007C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     PlayTime;                                                 // 0x0080(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     SavedDate;                                                // 0x0090(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     SavedTime;                                                // 0x00A0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bIsRound2;                                                // 0x00B0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FJackSibariSettings                         SibariSettings;                                           // 0x00B1(0x000B) (BlueprintVisi, BlueprintReadOnly)
	bool                                               bIsSibariNow;                                             // 0x00BC(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIs2DMode;                                                // 0x00BD(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x00BE(0x0002) MISSED OFFSET
	struct FName                                       TenseiId;                                                 // 0x00C0(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackLanguage>                         LanguageType;                                             // 0x00C8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsNewGamePlus;                                           // 0x00C9(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDisplayablePlayerName;                                   // 0x00CA(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x5];                                       // 0x00CB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSaveDataContainer");
		return ptr;
	}


	class UJackUMGSaveDataContainer* STATIC_GetSaveDataContainer(class UJackUMGItemData* ItemData);
};


// Class JackGame.JackUMGAccessorSaveData
// 0x0168 (0x01A0 - 0x0038)
class UJackUMGAccessorSaveData : public UObject
{
public:
	struct FScriptMulticastDelegate                    OnFinishVoiceChange;                                      // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                SelectedSlot;                                             // 0x0048(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                SaveSlotIndex;                                            // 0x004C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnFinishGetStateAsync;                                    // 0x0050(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishCreateAsync;                                      // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishRestoreAsync;                                     // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsCancelBack;                                            // 0x0080(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	int                                                AutoSaveInterSlotIndex;                                   // 0x0084(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackUMGRestartMenuType                            RestartMenuResult;                                        // 0x0088(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	struct FName                                       RestartPointEventCaptionId;                               // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RestartPointCaptionId;                                    // 0x0098(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       RestartNoMessageId;                                       // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x38];                                      // 0x00A8(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnFinishSaveAsync;                                        // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishLoadAsync;                                        // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishDeleteAsync;                                      // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     ScenarioSelectJumon;                                      // 0x0110(0x0010) (BlueprintVisi, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnFinishTrialLoadAsync;                                   // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0130(0x0030) MISSED OFFSET
	class UJackGetArasuziDataResult*                   GetArasuziDataResult;                                     // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x38];                                      // 0x0168(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorSaveData");
		return ptr;
	}


	void SetWindowMode(TEnumAsByte<EWindowMode> InValue);
	void SetVSyncEnabled(int InValue);
	void SetVoiceVolume(EJackAudioVolume InVolume, bool bApplyVolume);
	void SetVoiceType(TEnumAsByte<EJackVoice> InVoiceType, bool bDataLoad);
	void SetUsingSaveDataSlotIndex(int Value);
	void SetUserName(const struct FString& InUserName);
	void SetUseFukkatuNoJumonStoreOpen(bool InFlag);
	void SetUseFukkatuNoJumonSpecial(bool InFlag);
	void SetUseFukkatuNoJumonNewGamePlus(bool InFlag);
	void SetUseFukkatuNoJumonDQ12(bool InFlag);
	void SetUseDQ8BGM(bool bInUseDQ8BGM);
	void SetStartedFukkatuNoJumon(bool InFlag);
	void SetSibariMode(TEnumAsByte<EJackUMGSibariMode> InMode);
	void SetShadowQuality(int InValue);
	void SetSEVolume(EJackAudioVolume InVolume, bool bApplyVolume);
	void SetSelectedVoiceType(TEnumAsByte<EJackVoice> InType);
	TEnumAsByte<EJackKeyboardType> SetSelectedKeyboard();
	void SetScreenResolution(int InResolutionX);
	void SetScreenPercentage(int InValue);
	void SetSaveParameterFukkatuNoJumon(const struct FJackDecodeInfo& InDecodeInfo);
	void SetReturnedArasuziFlag(bool InFlag);
	void SetRestartMenuResult(EJackUMGRestartMenuType InMenuType);
	void SetRenkeiSettei(EJackRenkeiSettei InMode);
	int SetPressedKeyInItemList(int InIndex, int InKeyNum, const struct FName& InName);
	void SetPostProcessingQuality(int InValue);
	void SetPlayGoResult(EJackPlayGoMenuResult Value);
	void SetOpenFukkatuNoJumonPlayGo(bool InFlag);
	void SetOmoideFadeAfterLimit(float InLimit);
	void SetOmoideCursorRightIndex(int InValue);
	void SetOmoideCursorLeftIndex(int InValue);
	void SetNewKeyConfigAssign();
	void SetInversVerticalCamera(bool InFlag);
	void SetInversHorizontalCamera(bool InFlag);
	void SetIkidukaiEnable(bool IsEnable, bool bApplyVolume);
	void SetFrameRateLimit(int InValue);
	void SetEnableAutomaticFeedOfSpeech(bool bIsEnable);
	void SetDisplayGamma(EJackDisplayGamma InGamma);
	void SetDisplayFurigana(bool InValue);
	void SetDisplayableNameFlag(bool IsDisplayable);
	void SetDisplayableName(const struct FString& InName);
	void SetDefaultKeyConfigAssign();
	TEnumAsByte<EJackKeyboardType> SetDefaultKeyboard();
	void SetCameraSpeedRoom(EJackCameraSpeed InSpeed);
	void SetCameraSpeedAuto(EJackCameraSpeed InSpeed);
	void SetCameraSpeed(EJackCameraSpeed InSpeed);
	void SetBoukennoSyoSubAction(TEnumAsByte<EJackUMGBoukennoSyoSubAction> InAction);
	void SetBoukennoSyoAction(TEnumAsByte<EJackUMGBoukennoSyoAction> InAction);
	void SetBGMVolume(EJackAudioVolume InVolume, bool bApplyVolume);
	void SetBGMDiscVersion(EJackBGMDiscVersion InBgmDiscType);
	void SetBattleSpeedMode(EJackBattleSpeedMode InValue);
	void SetBattleCameraMode(EJackBattleCameraMode InMode);
	void SetAutoFollowCamera(bool InFlag);
	void SetArasuziPlayFlag(bool Value);
	void SetArasuziInfo(const struct FName& InArasuziId, EJackScenarioPlaythrough InPlayThrough);
	void SetAntiAliasingQuality(int InValue);
	TEnumAsByte<EJackKeyboardType> SelectKeyboard(bool IsLeft);
	void SaveSystemData(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void ResetSaveData();
	void ResetKeyConfigAssign();
	void RenamePlayerNameAfterLoad();
	void PrivacyPolicyHasBeenAccepted();
	struct FString MakePlayTime(int InHour, int InMinutes);
	TArray<class UJackUMGItemData*> MakeFukkatuItemList(TArray<struct FString> InScenarioTitleList, TArray<struct FName> InScenarioIdList);
	void MakeCachedSaveDataHeaderList(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void LoadSystemData(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void JackOnGetStateAsyncDelegate__DelegateSignature(EJackSaveLoadResult SaveLoadResult);
	void JackOnFinishVoiceChangeDelegate__DelegateSignature();
	void JackOnFinishSaveAsyncDelegate__DelegateSignature(int SlotIndex, EJackSaveLoadResult SaveLoadResult);
	void JackOnFinishRestoreAsyncDelegate__DelegateSignature(EJackSaveLoadResult SaveLoadResult);
	void JackOnFinishLoadAsyncDelegate__DelegateSignature(int SlotIndex, EJackSaveLoadResult SaveLoadResult);
	void JackOnFinishDeleteAsyncDelegate__DelegateSignature(int SlotIndex, EJackSaveLoadResult SaveLoadResult);
	void JackOnFinishCreateAsyncDelegate__DelegateSignature(EJackSaveLoadResult SaveLoadResult);
	bool IsValidArasuzi();
	bool IsUseFukkatuNoJumonStoreOpen();
	bool IsUseFukkatuNoJumonSpecial();
	bool IsUseFukkatuNoJumonNewGamePlus();
	bool IsUseFukkatuNoJumonDQ12();
	bool IsUseDQ8BGM();
	bool IsStartedFukkatuNoJumon();
	bool IsSibariInSlot(class UJackUMGItemData* InItemData, TEnumAsByte<EJackSibari> InType);
	bool IsScenarioAClearedScenarioB(const struct FName& InScenarioA, const struct FName& InScenarioB);
	bool IsSaveDataFullInCached();
	bool IsSaveDataEmptyInCached(bool bCountAutoSave);
	bool IsPlayedSibari();
	bool IsOutofDontGoArea();
	bool IsOpenFukkatuNoJumonPlayGo();
	bool IsNetworkAvailable();
	bool IsInversVerticalCamera();
	bool IsInversHorizontalCamera();
	bool IsIkidukaiEnable();
	bool IsFindSaveDataInCached(int SlotIndex);
	bool IsExistTrialSaveData();
	bool IsDisplayableNameFlag();
	bool IsClearSibariOfSystem(TEnumAsByte<EJackSibari> Type);
	bool IsClearedScenario(const struct FName& InScenarioFlag);
	bool IsChangeKeyboard();
	bool IsCachedSaveDataHeaderListEmpty();
	bool IsBrokenTrialSaveData();
	bool IsBoukennosyoTrialRestertMsg();
	bool IsAutoSaveData3D(bool IsTrial);
	bool IsAutoFollowCamera();
	bool IsAcquiredRura();
	void InitRenkeiSettei();
	void InitIkidukaiMode();
	void InitializeWindowMode();
	void InitializeVSyncEnabled();
	void InitializeVolume(bool bApplyVolume, bool bVoiceMute);
	void InitializeShadowQuality();
	void InitializeScreenPercentage();
	void InitializePostProcessingQuality();
	void InitializeGraphicMode(TEnumAsByte<EJackUMGGraphicOption> InType);
	void InitializeFrameRateLimit();
	void InitializeDisplayGamma();
	void InitializeCamera();
	void InitializeAntiAliasingQuality();
	void InitBattleCameraMode();
	TEnumAsByte<EWindowMode> GetWindowMode();
	int GetVSyncEnabled();
	EJackAudioVolume GetVoiceVolume();
	TEnumAsByte<EJackVoice> GetVoiceType();
	int GetUsingSaveDataSlotIndex();
	void GetTrialStateAsync();
	TArray<class UJackUMGItemData*> GetTrialSaveDataList();
	void GetStateAsync();
	int GetSlotNumnerInSlotIndex(TArray<class UJackUMGItemData*> ItemList, int InSlotIndex);
	int GetSlotNumberInCondition(TEnumAsByte<EJackUMGBoukennoSyoAction> InType);
	TArray<struct FString> GetSibariTasseiString(int* OutIndex);
	TArray<class UJackUMGItemData*> GetSibariplayList();
	int GetSibariNumInSlot(class UJackUMGItemData* InItemData);
	TEnumAsByte<EJackUMGSibariMode> GetSibariMode();
	int GetShadowQuality();
	EJackAudioVolume GetSEVolume();
	TEnumAsByte<EJackVoice> GetSelectedVoiceType();
	TEnumAsByte<EJackKeyboardType> GetSelectedKeyboard();
	int GetScreenResolutionY();
	int GetScreenResolutionX();
	int GetScreenResolutionMax();
	TArray<bool> GetScreenResolutionList();
	int GetScreenResolutionIndex();
	int GetScreenPercentage();
	struct FString GetSaveTimeString(const struct FString& InStr);
	TArray<class UJackUMGItemData*> GetSaveDataListFromCached();
	TArray<class UJackUMGItemData*> GetRuraList();
	bool GetReturnedArasuziFlag();
	EJackUMGRestartMenuType GetRestartMenuResult();
	EJackRenkeiSettei GetRenkeiSettei();
	int GetPostProcessingQuality();
	EJackPlayGoMenuResult GetPlayGoResult();
	EJackPlayGoMenuType GetPlayGoMenuType(const struct FName& PlayGoMenuId);
	struct FName GetPlayGoMenuId(EJackPlayGoMenuType PlayGoMenuType);
	int GetPlayGoInstallRemainTime(class UObject* WorldContextObject, bool bInitialOnly);
	void GetOverwriteSaveDataInfoFromCached(int SlotIndex, struct FString* PlayerName, struct FString* PlayTime);
	float GetOmoideFadeAfterLimit();
	int GetOmoideCursorRightIndex();
	int GetOmoideCursorLeftIndex();
	TArray<class UJackUMGItemData*> GetKeyConfigItemListSteam();
	TArray<struct FJackUMGRestartListData> GetFukkatuLocation2();
	int GetFrameRateLimit();
	bool GetFirstFlag();
	TArray<class UJackUMGItemData*> GetExSystemCommandListPC();
	bool GetEnableAutomaticFeedOfSpeech();
	EJackDisplayGamma GetDisplayGamma();
	bool GetDisplayFurigana();
	struct FString GetDisplayableName();
	struct FJackUMGDefaultSoundSetting GetDefaultSoundSetting();
	EJackCameraSpeed GetCameraSpeedRoom();
	EJackCameraSpeed GetCameraSpeedAuto();
	EJackCameraSpeed GetCameraSpeed();
	TEnumAsByte<EJackUMGBoukennoSyoSubAction> GetBoukennoSyoSubAction();
	TEnumAsByte<EJackUMGBoukennoSyoAction> GetBoukennoSyoAction();
	TArray<class UJackUMGItemData*> GetBoukenCommandList();
	EJackAudioVolume GetBGMVolume();
	EJackBGMDiscVersion GetBGMDiscVersion();
	EJackBattleSpeedMode GetBattleSpeedMode();
	EJackBattleCameraMode GetBattleCameraMode();
	bool GetArasuziPlayFlag();
	void GetArasuziData(class UJackGetArasuziDataResult** Result);
	int GetAntiAliasingQuality();
	bool ExistOverwriteSaveDataInCached(int SlotIndex);
	void ExecuteTrialLoadAsync(int SlotIndex);
	void ExecuteSystemSaveAsync();
	void ExecuteSaveAsyncForTensei(int SlotIndex);
	void ExecuteSaveAsync(int SlotIndex, bool bFirstCreate);
	void ExecuteRestoreAsync();
	void ExecuteLoadAsync(int SlotIndex);
	void ExecuteDeleteAsync(int SlotIndex);
	void ExecuteCreateAsync(bool bForce);
	int CountRuraList();
	int CheckFukkatuLocation();
	void ArasuziTextureLoadComplate(int InResultCode, class UObject* InLoaddedObject, class UJackUMGAsyncLoad* InLoadInfo);
};


// Class JackGame.JackGetArasuziDataResult
// 0x0048 (0x0080 - 0x0038)
class UJackGetArasuziDataResult : public UObject
{
public:
	int                                                PageCount;                                                // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<struct FString>                             TextList;                                                 // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class UTexture2D*>                          TextureList;                                              // 0x0050(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       BGMID;                                                    // 0x0060(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCompleteTextureLoad;                                     // 0x0068(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	TArray<struct FSoftObjectPath>                     TextureAssetList;                                         // 0x0070(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackGetArasuziDataResult");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorSaveDataInRura
// 0x0050 (0x0088 - 0x0038)
class UJackUMGAccessorSaveDataInRura : public UObject
{
public:
	struct FString                                     Name;                                                     // 0x0038(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     Description;                                              // 0x0048(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       JumpTag;                                                  // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Open;                                                     // 0x0060(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FName                                       WorldMapPoint;                                            // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       WorldMapArea;                                             // 0x0070(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBukiShopFlag;                                            // 0x0078(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBouguShopFlag;                                           // 0x0079(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bInnFlag;                                                 // 0x007A(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDouguShopFlag;                                           // 0x007B(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bYorozuShopFlag;                                          // 0x007C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bChurchFlag;                                              // 0x007D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBankFlag;                                                // 0x007E(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bBlacksmithFlag;                                          // 0x007F(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCasinoFlag;                                              // 0x0080(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUmaRaceFlag;                                             // 0x0081(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0082(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorSaveDataInRura");
		return ptr;
	}


	class UJackUMGAccessorSaveDataInRura* STATIC_GetRuraData(class UJackUMGItemData* ItemData);
};


// Class JackGame.JackUMGSenrekiData
// 0x0020 (0x0058 - 0x0038)
class UJackUMGSenrekiData : public UObject
{
public:
	struct FName                                       ID;                                                       // 0x0038(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       Text;                                                     // 0x0040(0x0018) (BlueprintVisi, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSenrekiData");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorSenreki
// 0x03B8 (0x03F8 - 0x0040)
class UJackUMGAccessorSenreki : public UJackUMGAccessorBase
{
public:
	TArray<class UJackUMGItemData*>                    MonsterList;                                              // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FText                                       MonsterTitle;                                             // 0x0050(0x0018) (BlueprintVisi)
	struct FText                                       MonsterName;                                              // 0x0068(0x0018) (BlueprintVisi)
	struct FName                                       MonsterID;                                                // 0x0080(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                ListIndex;                                                // 0x0088(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FText                                       SelectedClassificationName;                               // 0x0090(0x0018) (BlueprintVisi)
	struct FText                                       SelectedClassificationNameInListTitle;                    // 0x00A8(0x0018) (BlueprintVisi)
	struct FName                                       SelectedRecipeCategory;                                   // 0x00C0(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       SelectedCutSceneTitle;                                    // 0x00C8(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                CountItemAll;                                             // 0x00D0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountBuki;                                                // 0x00D4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountBukiAll;                                             // 0x00D8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountBougu;                                               // 0x00DC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountBouguAll;                                            // 0x00E0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountAccessory;                                           // 0x00E4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountAccessoryAll;                                        // 0x00E8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDougu;                                               // 0x00EC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDouguAll;                                            // 0x00F0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountMaterial;                                            // 0x00F4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountMaterialAll;                                         // 0x00F8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountRecipeBook;                                          // 0x00FC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountRecipeBookAll;                                       // 0x0100(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDaizinamono;                                         // 0x0104(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDaizinamonoAll;                                      // 0x0108(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSword;                                               // 0x010C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSwordAll;                                            // 0x0110(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDoubleSword;                                         // 0x0114(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDoubleSwordAll;                                      // 0x0118(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDagger;                                              // 0x011C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountDaggerAll;                                           // 0x0120(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountBoomerang;                                           // 0x0124(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountBoomerangAll;                                        // 0x0128(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountStick;                                               // 0x012C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountStickAll;                                            // 0x0130(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountStaff;                                               // 0x0134(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountStaffAll;                                            // 0x0138(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSpear;                                               // 0x013C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSpearAll;                                            // 0x0140(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountWhip;                                                // 0x0144(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountWhipAll;                                             // 0x0148(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountClaw;                                                // 0x014C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountClawAll;                                             // 0x0150(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountAx;                                                  // 0x0154(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountAxAll;                                               // 0x0158(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountShield;                                              // 0x015C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountShieldAll;                                           // 0x0160(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountLargeShield;                                         // 0x0164(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountLargeShieldAll;                                      // 0x0168(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountHat;                                                 // 0x016C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountHatAll;                                              // 0x0170(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountHelmet;                                              // 0x0174(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountHelmetAll;                                           // 0x0178(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountClothes;                                             // 0x017C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountClothesAll;                                          // 0x0180(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountArmor;                                               // 0x0184(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountArmorAll;                                            // 0x0188(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountRobe;                                                // 0x018C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountRobeAll;                                             // 0x0190(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountFaceAccessory;                                       // 0x0194(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountFaceAccessoryAll;                                    // 0x0198(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountNeckAccessory;                                       // 0x019C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountNeckAccessoryAll;                                    // 0x01A0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountFingerAccessory;                                     // 0x01A4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountFingerAccessoryAll;                                  // 0x01A8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountHandAccessory;                                       // 0x01AC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountHandAccessoryAll;                                    // 0x01B0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountArmAccessory;                                        // 0x01B4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountArmAccessoryAll;                                     // 0x01B8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountShoesAccessory;                                      // 0x01BC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountShoesAccessoryAll;                                   // 0x01C0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountFootAccessory;                                       // 0x01C4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountFootAccessoryAll;                                    // 0x01C8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountEtcAccessory;                                        // 0x01CC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountEtcAccessoryAll;                                     // 0x01D0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x54];                                      // 0x01D4(0x0054) MISSED OFFSET
	int                                                CountMonsterTypeAll;                                      // 0x0228(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountMonsterTypeKill;                                     // 0x022C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ZukanSlime;                                               // 0x0230(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanSlimeAll;                                            // 0x0240(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanAkuma;                                               // 0x0248(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanAkumaAll;                                            // 0x0258(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x025C(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanKemono;                                              // 0x0260(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanKemonoAll;                                           // 0x0270(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanElement;                                             // 0x0278(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanElementAll;                                          // 0x0288(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanZombie;                                              // 0x0290(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanZombieAll;                                           // 0x02A0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanDragon;                                              // 0x02A8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanDragonAll;                                           // 0x02B8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanTori;                                                // 0x02C0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanToriAll;                                             // 0x02D0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x02D4(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanKaizin;                                              // 0x02D8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanKaizinAll;                                           // 0x02E8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanBussitu;                                             // 0x02F0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanBussituAll;                                          // 0x0300(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanSizen;                                               // 0x0308(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanSizenAll;                                            // 0x0318(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanMachine;                                             // 0x0320(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanMachineAll;                                          // 0x0330(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	TArray<struct FName>                               ZukanMaou;                                                // 0x0338(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ZukanMaouAll;                                             // 0x0348(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackAchievementCategory>              SyougouCategory;                                          // 0x034C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x034D(0x0003) MISSED OFFSET
	int                                                CountSyougouAll;                                          // 0x0350(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSyougouScenario;                                     // 0x0354(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSyougouBattle;                                       // 0x0358(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSyougouKazi;                                         // 0x035C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSyougouCasino;                                       // 0x0360(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSyougouItem;                                         // 0x0364(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountSyougouEtc;                                          // 0x0368(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackTutorialCategory>                 KokoroeCategory;                                          // 0x036C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	int                                                CountKokoroeAll;                                          // 0x0370(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeBasic;                                        // 0x0374(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeMenu;                                         // 0x0378(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeField;                                        // 0x037C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeBattle;                                       // 0x0380(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeItem;                                         // 0x0384(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeKaji;                                         // 0x0388(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CountKokoroeMiniGame;                                     // 0x038C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x68];                                      // 0x0390(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorSenreki");
		return ptr;
	}


	void SortSyougouIdList(TEnumAsByte<EJackUMGSenrekiSortMode> InSortType);
	void SortMonsterDataList(TEnumAsByte<EJackUMGSenrekiSortMode> InSortType);
	void SortItemsNameList(TEnumAsByte<EJackUMGSenrekiSortMode> InSortType, bool bEnablePlusValue, bool bEnableSort, bool bSyousai);
	TEnumAsByte<EJackUMGSenrekiSortMode> SetSenrekiSortMode(TEnumAsByte<EJackUMGSenrekiSortBamen> InSortBamen, TEnumAsByte<EJackUMGSenrekiSortMode> InMode);
	void SetSelectedMonsterMode(TEnumAsByte<EJackUMGSenrekiMonsterMode> InMode);
	void SetSelectedItemCategory(TEnumAsByte<EJackSenreki_ItemCategory> InCategory);
	void SetSelectedClassification(TEnumAsByte<EJackItem_Classification> InClassification);
	void SetDefaultSenrekiSortMode(TEnumAsByte<EJackUMGSenrekiSortMode> InMode);
	void RequestGC();
	void MakeSyogouIdList(TEnumAsByte<EJackAchievementCategory> InType);
	int MakeSenrekiMonsterVisitSortList(const struct FName& InMapId);
	void MakeSenrekiMonsterTypeSortList(EJackMonsterRace InType);
	void MakeSenrekiMonsterInfo();
	int MakeReturnSyousaiItemsList(int SelectedNumber);
	void MakeItemsNameList(TEnumAsByte<EJackSenreki_ItemCategory> InItemCategory, TEnumAsByte<EJackItem_Classification> InClassification);
	bool IsRecipeFromItemId(const struct FName& InItemId);
	bool IsOpenFusigiKaji();
	bool IsNoMonsterLocationNow();
	bool IsKilledMonsterInList(int InIndex);
	struct FString GetZukanMemo(const struct FName& InZukanId);
	TArray<class UJackUMGItemData*> GetZukanItemList();
	void GetZukan2DMonsterTexture(const struct FName& InMonsterId);
	TArray<class UJackUMGItemData*> GetYochiDataList();
	void GetYochiCount(int* AllCount, int* ClearCount);
	TArray<class UJackUMGItemData*> GetWorldMapMonsterList();
	struct FString GetSyougouDescription(const struct FName& AchievementID);
	struct FString GetStringReplaceTagToStr(const struct FName& InTextId, const struct FString& InTag1, const struct FString& InStr1, const struct FString& InTag2, const struct FString& InStr2);
	struct FString GetStringAlignDigits(const struct FString& InStr);
	class UTexture2D* GetSmallIconTexture(const struct FName& InItemId);
	TArray<class UJackUMGItemData*> GetSenrekiTutorialList(TEnumAsByte<EJackTutorialCategory> InCategory);
	TArray<class UJackUMGItemData*> GetSenrekiSyougouList(TEnumAsByte<EJackAchievementCategory> InType);
	TEnumAsByte<EJackUMGSenrekiSortMode> GetSenrekiSortMode(TEnumAsByte<EJackUMGSenrekiSortBamen> InSortBamen);
	int GetSenrekiSeisokutiListNumber();
	TArray<class UJackUMGItemData*> GetSenrekiSeisokutiList();
	void GetSenrekiMonsterCountAllAndKill(const struct FName& InMapId, int* OutKillCount, int* OutAllCount);
	int GetSenrekiListIndexFromMonsterId(const struct FName& InMonsterId);
	TArray<class UJackUMGItemData*> GetSenrekiLearningRecipeList(TEnumAsByte<EJackItem_Classification> InType, TEnumAsByte<EJackSenreki_ItemCategory> InCategory);
	void GetSenrekiCategoryMonsterList();
	void GetSenrekiCategoryMonsterCountAll();
	TArray<class UJackUMGItemData*> GetSenrekiAllMonsterList();
	TEnumAsByte<EJackUMGSenrekiMonsterMode> GetSelectedMonsterMode();
	TEnumAsByte<EJackSenreki_ItemCategory> GetSelectedItemCategory();
	TEnumAsByte<EJackItem_Classification> GetSelectedClassification();
	TEnumAsByte<EJackMonsterActiveScenario> GetScenarioFlag();
	int GetRecipeNumber(TEnumAsByte<EJackSenreki_ItemCategory> InCategory, TEnumAsByte<EJackItem_Classification> InClassification);
	TArray<struct FJackUMGRecipeParam> GetRecipeMajorParameterList(const struct FName& InItemId);
	void GetQuestRewardEventItemData(const struct FName& EventItemId, struct FString* ItemName, class UTexture2D** IconTexture, int* ItemCount, struct FName* UnitNameID, int* Gold, bool* bIsMedal, bool* bIsRecipeBook);
	void GetQuestRewardData(const struct FName& QuestId, bool Border, struct FName* TitleId, struct FString* Title, struct FString* Description, struct FJackQuestReward* RewardData);
	void GetQuestMemoDataList(const struct FName& MapVolumeID, const struct FSlateFontInfo& FontInfo, float QuestTitleSizeX, TArray<class UJackUMGItemData*>* ItemDataList);
	void GetQuestDataList(TArray<class UJackUMGItemData*>* ItemDataList, int* ClearCount);
	void GetQuestDataCount(int* AllCount, int* ClearCount);
	float GetOverSizeTextPanel(class UWidget* InPanel, const struct FSlateFontInfo& FontInfo, const struct FString& inString);
	struct FText GetMonsterRaceText(EJackMonsterRace InMonsterRace);
	TArray<struct FName> GetMonsterMapIdList(const struct FName& InMonsterId);
	int GetMonsterCountPlusEventBattle(const struct FName& InZukanId);
	int GetMonsterCountInSyousaiList();
	TArray<class UJackUMGItemData*> GetKuwasiiKirokuDataList();
	TArray<struct FJackUMGItemListInfo> GetFusigiSyousaiList(TArray<class UJackUMGItemData*> InItemDataList);
	TArray<struct FJackUMGFusigiPossibleList> GetFusigiPossibleList();
	TArray<class UJackUMGSenrekiData*> GetDropMonsterByItem(const struct FName& InItemId);
	bool GetDropItemFromMonsterId(const struct FName& InMonsterId, struct FName* OutNormalItemId, struct FName* OutRareItemId, int* OutExp, int* OutGold);
	TArray<class UJackUMGSenrekiData*> GetDropAreaByItem(const struct FName& InItemId);
	TArray<class UJackUMGItemData*> GetCutSceneTitleList();
	TArray<class UJackUMGItemData*> GetCutSceneList(const struct FName& InTitle);
	int GetCountSenrekiMonsterTypeAll();
	TArray<class UJackUMGSenrekiData*> GetCanMakeItems(const struct FName& InItemId);
	void ExistsQuestMemoData(const struct FName& MapVolumeID, bool* bExists, bool* bHighlight);
	void CountSyougouCategory();
	void CountSenrekiTutorialCategoryNumber();
	void ClearItemDataNameList();
	int ChangeIndexListToSyousai(const struct FName& InItemId);
	int CalcItemsCount();
};


// Class JackGame.JackUMGSenrekiQuestData
// 0x0050 (0x0088 - 0x0038)
class UJackUMGSenrekiQuestData : public UObject
{
public:
	TEnumAsByte<EJackProgression>                      State;                                                    // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FString                                     Title;                                                    // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     Description;                                              // 0x0050(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FJackQuestReward                            RewardData;                                               // 0x0060(0x0020) (BlueprintVisi, BlueprintReadOnly)
	bool                                               bYochiQuest;                                              // 0x0080(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSenrekiQuestData");
		return ptr;
	}

};


// Class JackGame.JackUMGWorldMapQuestMemoData
// 0x0058 (0x0090 - 0x0038)
class UJackUMGWorldMapQuestMemoData : public UObject
{
public:
	TEnumAsByte<EJackProgression>                      State;                                                    // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                Order;                                                    // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bHighlight;                                               // 0x0040(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	struct FString                                     Title;                                                    // 0x0048(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     Description;                                              // 0x0058(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       TargetNpcId;                                              // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FJackQuestReward                            RewardData;                                               // 0x0070(0x0020) (BlueprintVisi, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWorldMapQuestMemoData");
		return ptr;
	}

};


// Class JackGame.JackUMGAccessorShop
// 0x0068 (0x00A0 - 0x0038)
class UJackUMGAccessorShop : public UObject
{
public:
	class UJackUMGManager*                             UMGManager;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0040(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorShop");
		return ptr;
	}


	void SetYadoyaState(TEnumAsByte<EJackUMGYaodyaState> Value);
	void SetYadoyaMorningCallTimezone(TEnumAsByte<EJackYadoyaMorningCallTimezone> Value);
	void SetYadoyaEventType(TEnumAsByte<EJackYadoyaEventType> Value);
	void SetShopId(TEnumAsByte<EJackUMGShopType> InShopType, const struct FName& InShopId);
	void SetResetSibariType(TEnumAsByte<EJackSibari> Value);
	void SetMedalShopType(TEnumAsByte<EJackMedal_Shop> InMedalShopType);
	void SetKyoukaiSavedFlag(TEnumAsByte<EJackKyoukaiSavedFlag> Value);
	void SetKyoukaiEventType(TEnumAsByte<EJackKyoukaiEventType> Value);
	void SetCampMenuResult(TEnumAsByte<EJackCampMenuResult> Value);
	struct FName MakeShopMenuTextID(const struct FString& BaseTextID);
	void JackKyoukaiEffectEventDelegate__DelegateSignature(EJackKyoukaiEffectEventType EventType);
	void JackCampMenuResultEventDelegate__DelegateSignature(TEnumAsByte<EJackCampMenuResult> CampMenuResult, TEnumAsByte<EJackYadoyaMorningCallTimezone> MorningCallTimezone);
	bool IsSeisyo();
	bool IsChapterSaveYotti();
	bool IsChapterSave();
	TEnumAsByte<EJackUMGYaodyaState> GetYadoyaState();
	int GetYadoyaPrice();
	TEnumAsByte<EJackYadoyaMorningCallTimezone> GetYadoyaMorningCallTimezone();
	TEnumAsByte<EJackYadoyaEventType> GetYadoyaEventType();
	bool GetYadoyaData(struct FJackDataTableInn* YadoyaData);
	struct FString GetTimezoneTextIDSuffix(class UObject* WorldContextObject);
	TEnumAsByte<EJackUMGShopType> GetShopType();
	struct FName GetShopId();
	bool GetShopData(struct FJackDataTableShop* ShopData);
	TEnumAsByte<EJackSibari> GetResetSibariType();
	TEnumAsByte<EJackMedal_Shop> GetMedalShopType();
	TEnumAsByte<EJackKyoukaiSavedFlag> GetKyoukaiSavedFlag();
	TEnumAsByte<EJackKyoukaiEventType> GetKyoukaiEventType();
	bool GetKyoukaiData(struct FJackDataTableChurch* KyoukaiData);
	TEnumAsByte<EJackCampMenuResult> GetCampMenuResult();
	bool GetBankData(struct FJackDataTableBank* BankData);
	void ExecuteYadoyaSleep();
	void ExecuteYadoyaPayAndSleep();
	void ExecuteYadoyaPay();
	void DoKyoukaiEffectEvent(EJackKyoukaiEffectEventType EventType);
	void DoCampMenuResultEvent();
	void ClearKyoukaiEffectEvent();
	void ClearCampMenuResultEvent();
	void BindKyoukaiEffectEvent(const struct FScriptDelegate& Value);
	void BindCampMenuResultEvent(const struct FScriptDelegate& Value);
};


// Class JackGame.JackUMGSyuurenjouBattleData
// 0x0038 (0x0070 - 0x0038)
class UJackUMGSyuurenjouBattleData : public UObject
{
public:
	int                                                BattleIndex;                                              // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFinalBattle;                                           // 0x003C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FName                                       BattleId;                                                 // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     BattleName;                                               // 0x0048(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                BattleMemberCount;                                        // 0x0058(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EJackCharacter>>                SelectedCharacterList;                                    // 0x0060(0x0010) (BlueprintVisi, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSyuurenjouBattleData");
		return ptr;
	}

};


// Class JackGame.JackUMGSyuurenjouRewardData
// 0x0048 (0x0080 - 0x0038)
class UJackUMGSyuurenjouRewardData : public UObject
{
public:
	bool                                               bAcquiredReward;                                          // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FString                                     RewardConditions;                                         // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       ItemID;                                                   // 0x0050(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  ItemIcon;                                                 // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     ItemName;                                                 // 0x0060(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ItemCount;                                                // 0x0070(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UJackUMGSyuurenjouItemData>   ParentData;                                               // 0x0074(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSyuurenjouRewardData");
		return ptr;
	}


	class UJackUMGSyuurenjouRewardData* STATIC_GetSyuurenjouRewardData(class UJackUMGItemData* ItemData);
};


// Class JackGame.JackUMGSyuurenjouItemData
// 0x0068 (0x00A0 - 0x0038)
class UJackUMGSyuurenjouItemData : public UObject
{
public:
	bool                                               bOpen;                                                    // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FString                                     Title;                                                    // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     DescriptionTitle;                                         // 0x0050(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     Description;                                              // 0x0060(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UJackUMGItemData*                            RewardItemData1;                                          // 0x0070(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackUMGItemData*                            RewardItemData2;                                          // 0x0078(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackUMGItemData*                            RewardItemData3;                                          // 0x0080(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackUMGItemData*                            RewardItemData4;                                          // 0x0088(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                BattleCount;                                              // 0x0090(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                BattleMemberCount;                                        // 0x0094(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Score;                                                    // 0x0098(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSyuurenjouItemData");
		return ptr;
	}


	class UJackUMGSyuurenjouItemData* STATIC_GetSyuurenjouItemData(class UJackUMGItemData* ItemData);
	TArray<class UJackUMGItemData*> GetRewardItemDataList();
};


// Class JackGame.JackUMGAccessorSyuurenjou
// 0x0080 (0x00B8 - 0x0038)
class UJackUMGAccessorSyuurenjou : public UObject
{
public:
	class UJackUMGManager*                             UMGManager;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       SelectedSirenKey;                                         // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMGSyuurenjouBattleData*>        BattleDataList;                                           // 0x0048(0x0010) (ZeroConstructor)
	int                                                CurrentBattleIndex;                                       // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                UsedTurnCount;                                            // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	EJackSyuurenjouMenuResult                          MenuResult;                                               // 0x0060(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x57];                                      // 0x0061(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAccessorSyuurenjou");
		return ptr;
	}


	void SetUsedTurnCount(int Value);
	void SetSelectedSirenKey(const struct FName& Value);
	void SetMenuResult(EJackSyuurenjouMenuResult Value);
	void SetCurrentBattleIndex(int Value);
	void SaveSelectedCharacterListAtSelectedSiren();
	void Reset();
	int GetUsedTurnCount();
	struct FJackDataTableSyuurenjou GetSyuurenjouData(const struct FName& Key);
	TArray<class UJackUMGItemData*> GetSirenSelectPageData();
	struct FJackDataTableSyuurenjou GetSelectedSyuurenjouData();
	struct FName GetSelectedSirenKey();
	int GetPartyMemberCount();
	EJackSyuurenjouMenuResult GetMenuResult();
	void GetMemberSelectPageData(struct FString* Title, TArray<class UJackUMGSyuurenjouBattleData*>* OutBattleDataList, TArray<class UJackFriendGameCharacter*>* PartyMemberList);
	class UDataTable* GetDataTableSyuurenjou();
	int GetCurrentBattleIndex();
	class UJackUMGSyuurenjouBattleData* GetCurrentBattleData();
	TArray<class UJackUMGSyuurenjouBattleData*> GetBattleDataList();
	class UJackUMGSyuurenjouItemData* CreateSyuurenjouItemData(bool bOpen, const struct FJackDataTableSyuurenjou& Data);
	void AddUsedTurnCount(int Value);
};


// Class JackGame.JackUMGAnimBase
// 0x0020 (0x0058 - 0x0038)
class UJackUMGAnimBase : public UObject
{
public:
	class UJackUMGWidgetBase*                          Target;                                                   // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWidget*                                     Panel;                                                    // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimBase");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimDelegate
// 0x0010 (0x0068 - 0x0058)
class UJackUMGAnimDelegate : public UJackUMGAnimBase
{
public:
	struct FScriptDelegate                             JackOnAnimDelegate;                                       // 0x0058(0x0014) (ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimDelegate");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimDelay
// 0x0008 (0x0060 - 0x0058)
class UJackUMGAnimDelay : public UJackUMGAnimBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimDelay");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimFloat
// 0x0020 (0x0078 - 0x0058)
class UJackUMGAnimFloat : public UJackUMGAnimBase
{
public:
	class UCurveFloat*                                 Curve;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FScriptDelegate                             JackOnUMGAnimFloatDelegate;                               // 0x0068(0x0014) (ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimFloat");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimAlpha
// 0x0010 (0x0068 - 0x0058)
class UJackUMGAnimAlpha : public UJackUMGAnimBase
{
public:
	class UCurveFloat*                                 Curve;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimAlpha");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimMove
// 0x0018 (0x0070 - 0x0058)
class UJackUMGAnimMove : public UJackUMGAnimBase
{
public:
	class UCurveFloat*                                 Curve;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   StartPosition;                                            // 0x0060(0x0008) (IsPlainOldData)
	struct FVector2D                                   EndPosition;                                              // 0x0068(0x0008) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimMove");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimScale
// 0x0018 (0x0070 - 0x0058)
class UJackUMGAnimScale : public UJackUMGAnimBase
{
public:
	class UCurveFloat*                                 Curve;                                                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   StartScale;                                               // 0x0060(0x0008) (IsPlainOldData)
	struct FVector2D                                   EndScale;                                                 // 0x0068(0x0008) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimScale");
		return ptr;
	}

};


// Class JackGame.JackUMGAnimList
// 0x0010 (0x0068 - 0x0058)
class UJackUMGAnimList : public UJackUMGAnimBase
{
public:
	TArray<class UJackUMGAnimBase*>                    AnimList;                                                 // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAnimList");
		return ptr;
	}


	void SetScaleToAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetScaleToAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetScaleAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void SetScaleAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void SetMoveToAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetMoveToAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& End);
	void SetMoveAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	void SetMoveAnim(int InGroup, class UCurveFloat* InCurve, const struct FVector2D& Start, const struct FVector2D& End);
	bool SetAnimSetOfPanel(int InGroup, const struct FJackUMGAnimSet& InAnimSet);
	bool SetAnimSet(int InGroup, const struct FJackUMGAnimSet& InAnimSet);
	void SetAnimDelegate(int InGroup, const struct FScriptDelegate& InDelegate);
	void SetAnimDelay(int InGroup, float DelayTime);
	void SetAlphaToAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, float End);
	void SetAlphaToAnim(int InGroup, class UCurveFloat* InCurve, float End);
	void SetAlphaAnimOfPanel(class UWidget* InPanel, int InGroup, class UCurveFloat* InCurve, float Start, float End);
	void SetAlphaAnim(int InGroup, class UCurveFloat* InCurve, float Start, float End);
};


// Class JackGame.JackUMGWidgetAnimPlayer
// 0x0028 (0x0060 - 0x0038)
class UJackUMGWidgetAnimPlayer : public UObject
{
public:
	class UUserWidget*                                 WidgetRef;                                                // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FJackUMGWidgetAnimData                      Playing;                                                  // 0x0040(0x0010)
	TArray<struct FJackUMGWidgetAnimData>              AnimList;                                                 // 0x0050(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWidgetAnimPlayer");
		return ptr;
	}


	void Stop(bool bIsAll);
	void PlayOneShot(class UWidgetAnimation* InAnimRef, int InNumLoop, bool bIsAddQueue);
	void PlayJoinLoop(class UWidgetAnimation* InStartAnimRef, class UWidgetAnimation* InLoopAnimRef, bool bIsAddQueue);
	bool IsPlay();
	bool FinishedToPlayNext();
	class UJackUMGWidgetAnimPlayer* STATIC_CreateUMGWidgetAnimPlayer(class UUserWidget* InWidget);
};


// Class JackGame.JackUMGAsyncLoad
// 0x0038 (0x0070 - 0x0038)
class UJackUMGAsyncLoad : public UObject
{
public:
	struct FScriptDelegate                             Delegate;                                                 // 0x0038(0x0014) (ZeroConstructor, InstancedReference)
	class UWorld*                                      World;                                                    // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     Object;                                                   // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             AssetRef;                                                 // 0x0058(0x0008)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAsyncLoad");
		return ptr;
	}


	void SetTexturePanel(int InUniqueId, class UImage* InImagePanel);
	int GetUniqueID();
};


// Class JackGame.JackUMGTextureLoadInfo
// 0x0000 (0x0070 - 0x0070)
class UJackUMGTextureLoadInfo : public UJackUMGAsyncLoad
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTextureLoadInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGWidgetLoadInfo
// 0x0010 (0x0080 - 0x0070)
class UJackUMGWidgetLoadInfo : public UJackUMGAsyncLoad
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWidgetLoadInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGLoadBrushBase
// 0x0010 (0x0048 - 0x0038)
class UJackUMGLoadBrushBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGLoadBrushBase");
		return ptr;
	}

};


// Class JackGame.JackUMGALoadTextureBrush
// 0x0018 (0x0060 - 0x0048)
class UJackUMGALoadTextureBrush : public UJackUMGLoadBrushBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGALoadTextureBrush");
		return ptr;
	}

};


// Class JackGame.JackUMGALoadMaterialBrush
// 0x0018 (0x0060 - 0x0048)
class UJackUMGALoadMaterialBrush : public UJackUMGLoadBrushBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0048(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGALoadMaterialBrush");
		return ptr;
	}

};


// Class JackGame.JackUMGBalloon
// 0x00B0 (0x0420 - 0x0370)
class UJackUMGBalloon : public UJackUMGWidgetBase
{
public:
	struct FScriptMulticastDelegate                    JackUMGBalloonEnd;                                        // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsFocusable;                                              // 0x0380(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	TArray<class UImage*>                              ImageList;                                                // 0x0388(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	struct FJackUMGBalloonInfo                         BalloonInfo;                                              // 0x0398(0x0068) (BlueprintVisi)
	float                                              Timer;                                                    // 0x0400(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   Offset;                                                   // 0x0404(0x0008) (BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x040C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGBalloon");
		return ptr;
	}


	void MakeBalloon(class UCanvasPanel* ItemListCanvas, int ZOrder);
	void JackUMGBalloonDisappearDelegate__DelegateSignature(class UJackUMGBalloon* InBalloon);
	void InitBalloon(const struct FVector& Wpos, TEnumAsByte<EJackPopupBalloon> Type, int Num, class UJackGameCharacter* InGameCharacter, const struct FVector& TestOffset, class USkeletalMeshComponent* InLocalMesh, const struct FName& InSocketName);
};


// Class JackGame.JackUMGJukeboxItemData
// 0x0030 (0x00B8 - 0x0088)
class UJackUMGJukeboxItemData : public UJackUMGItemData
{
public:
	EJackMusicBGMVolumeType                            VolumeType;                                               // 0x0088(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	int                                                Number;                                                   // 0x008C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       Title;                                                    // 0x0090(0x0018) (BlueprintVisi, BlueprintReadOnly)
	float                                              GoldVolume;                                               // 0x00A8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OrcheVolume;                                              // 0x00AC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bNoOrhce;                                                 // 0x00B0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGJukeboxItemData");
		return ptr;
	}


	void Stop(float InFadeOutTime);
	bool SetVolume(float InVolume, EJackMusicBGMVolumeType InVolumeType);
	void SetBGMType(EJackMusicBGMVolumeType InVolumeType);
	void Set(class UJackUMGJukeboxItemData* InItemData, EJackMusicBGMVolumeType InVolumeType);
	void Play(float InFadeOutTime);
	struct FText GetVolumeText(bool bIsOrhce);
	struct FText GetCategoryText();
	bool AddVolume(float InAddStep, bool bIsMinus, EJackMusicBGMVolumeType InVolumeType);
};


// Class JackGame.JackUMGBGMVolumeEditor
// 0x0010 (0x0048 - 0x0038)
class UJackUMGBGMVolumeEditor : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGBGMVolumeEditor");
		return ptr;
	}


	void UpdateJukeboxList(EJackMusicBGMVolumeType InVolumeType, int InSelectIndex, bool bIsForceUpdate);
	EJackMusicBGMVolumeType ToggleBGMVolumeType(EJackMusicBGMVolumeType InVolumeType);
	void SetSystemBGMVolumeType(EJackMusicBGMVolumeType InVolumeType);
	class UJackUMGJukeboxItemData* SetSelectBGMItemData(class UJackUMGItemBase* InItemBase);
	void SaveJukeboxList();
	void SaveJukeboxItem(class UJackUMGJukeboxItemData* JukeboxItemData, EJackMusicBGMVolumeType InVolumeType);
	void Initialize(class UJackUMGBrowserBase* InBrowserBase, class UCanvasPanel* InItemListCanvas, class UJackUMGScrollController* InListController, int InZOrder);
	EJackMusicBGMVolumeType GetSystemBGMVolumeType();
	struct FText STATIC_GetBGMVolumeTypeText(EJackMusicBGMVolumeType InVolumeType);
	struct FString GetBGMVolumeTypeAssetName(const struct FString& InAssetName, EJackMusicBGMVolumeType InVolumeType, bool bIsForceOrhce);
	void STATIC_DeleteBGMVolumeEditor(class UJackUMGBGMVolumeEditor* InBGMVolumeEditor);
	class UJackUMGBGMVolumeEditor* STATIC_CreateBGMVolumeEditor(class UObject* WorldContextObject);
	void ChangePage(int InSelectIndex, bool bIsPageDown);
	EJackMusicBGMVolumeType ChangeBGMVolumeType(EJackMusicBGMVolumeType InVolumeType, bool bIsOrche);
};


// Class JackGame.JackUMGBrowserBase
// 0x0030 (0x0430 - 0x0400)
class UJackUMGBrowserBase : public UJackUMGWindowBase
{
public:
	class UJackUMGListController*                      ListController;                                           // 0x0400(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UJackUMGItemData*>                    ItemDataList;                                             // 0x0408(0x0010) (BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0418(0x0004) MISSED OFFSET
	bool                                               bIsBPUpdateMode;                                          // 0x041C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x041D(0x0003) MISSED OFFSET
	struct FVector2D                                   AdjustRootSize;                                           // 0x0420(0x0008) (BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0428(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGBrowserBase");
		return ptr;
	}


	void UpdateItemDataListWithDispIndex(int DispIndex);
	void UpdateItemDataList(TArray<class UJackUMGItemData*> InItemDataList);
	void UpdateItemBase(class UJackUMGItemBase* InItemBase);
	void SetVisibilityListController(bool IsVisible);
	void SetupScrollController(int InInitPage, int InItemsPerPage, int InNumData);
	void SetupPageController(int InInitPage, int InItemsPerPage, int InNumData);
	void SetNumListItemsPerPage(int InItemsPerPage);
	void SetItemDataListWithDispIndex(TArray<class UJackUMGItemData*> InItemDataList, int DispIndex);
	void SetItemDataList(TArray<class UJackUMGItemData*> InItemDataList);
	void SetDisableKeyEventFlag(bool InFlag);
	void RedrawItemList();
	void InitBrowserWithScrollController(class UCanvasPanel* ItemListCanvas, class UJackUMGScrollController* InListController, int ZOrder);
	void InitBrowserWithPageController(class UCanvasPanel* ItemListCanvas, class UJackUMGPageController* InListController, int ZOrder);
	void InitBrowser(class UCanvasPanel* ItemListCanvas, class UJackUMGPageController* InPageController, int ZOrder);
	int GetNumPage();
	int GetItemsPerPage();
	TArray<class UJackUMGItemData*> GetItemListForUpdating();
	class UJackUMGItemData* GetItemDataFromSelected();
	struct FJackUMGItemContainer GetItemContainerFromSelected(const struct FName& InContainerTag, bool bAllowNoDataTag);
	struct FJackUMGItemContainer GetItemContainerFromDataNumber(int DataNumber, const struct FName& InContainerTag);
	struct FJackUMGItemContainer GetItemContainer(const struct FName& InContainerTag);
	int GetDispTopIndex();
	int GetDispEndIndex();
	int GetCurrentPage();
	void FinishShowBrowserDelegate();
	void DoNotificationItemBase(const struct FName& InNotifyTag, class UObject* InObject, int InValue, bool bIsAllItamBase);
	void DoControllerKeyEvent(TEnumAsByte<EJackKeys> InKeyType);
	void DispItemListFromIndex2(int InDataIndex, bool bIsForceUpdate);
	void DispItemListFromIndex(int InDataIndex, bool bIsForceUpdate);
	void DispItemListFromId(const struct FName& ItemID, bool bIsForceUpdate);
	void DispItemList2(int InPage, int Index);
	void DispItemList(int InPage);
	class UJackUMGItemData* CreateItemData(int InDataIndex, const struct FName& InItemId, const struct FName& InTextId);
	void ClearNewFlag();
	void ClearItemDataList();
	void AdjustWindowSizeWithPanelSwitch(class UWidget* InFalseVisiblePanel, class UWidget* InTrueVisiblePanel, class UWidget* InFalseFramePanel, class UWidget* InTrueFramePanel, bool InSelectValue, float InFrameMagin, bool bIsIgnoreVisibilty);
	void AdjustWindowSizeWithPanelOnly(TArray<class UWidget*> InVisiblePanels, TArray<class UWidget*> InWindowFramePanels, int InSelectIndex, float InFrameMagin, bool bIsIgnoreVisibilty);
	void AdjustWindowSizeWithPanel(class UWidget* InWindowFramePanel, float InFrameMagin, class UWidget* InAdjustPanel, float InPanelMagin, bool bIsIgnoreVisibilty);
	void AdjustWindowSize(class UWidget* WindowFramePanel, float Magin, bool bIsIgnoreVisibilty);
};


// Class JackGame.JackUMGHorizontalSelect
// 0x0018 (0x0418 - 0x0400)
class UJackUMGHorizontalSelect : public UJackUMGWindowBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0400(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHorizontalSelect");
		return ptr;
	}


	bool IsModeSelectCameraTestMovie();
	int GetModeSelectCameraWait();
	int GetModeSelectCameraPlayWait();
	float GetFullScreenModeFadeOutTime();
	float GetFullScreenModeFadeInTime();
};


// Class JackGame.JackUMGCameraModeSelect
// 0x0068 (0x0480 - 0x0418)
class UJackUMGCameraModeSelect : public UJackUMGHorizontalSelect
{
public:
	class UManaComponent*                              ManaComponent;                                            // 0x0418(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UManaTexture*>                        ManaTexture;                                              // 0x0420(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<class UImage*>                              MovieImage;                                               // 0x0430(0x0010) (Edit, BlueprintVisi, ExportObject, ZeroConstructor)
	int                                                SelectedMovie;                                            // 0x0440(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0444(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCameraModeSelect");
		return ptr;
	}


	void SetMediaSource();
	void SelectMovie();
	void PauseMovie();
	void InitializeWidget(class UCanvasPanel* ImageList, class UCanvasPanel* ItemList);
	void Init();
	void FinishManaComponent();
	bool ChangeMediaSource();
};


// Class JackGame.JackUMGCashierWindow
// 0x0038 (0x0438 - 0x0400)
class UJackUMGCashierWindow : public UJackUMGWindowBase
{
public:
	class UJackUMGValueController*                     ValueController;                                          // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               IsComma;                                                  // 0x0408(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsZenkaku;                                                // 0x0409(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x040A(0x0002) MISSED OFFSET
	int                                                ResultCode;                                               // 0x040C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       TotalText;                                                // 0x0410(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                TotalPrice;                                               // 0x0428(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InputValue;                                               // 0x042C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                UnitPrice;                                                // 0x0430(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisibleUpArrow;                                        // 0x0434(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisibleDownArrow;                                      // 0x0435(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0436(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCashierWindow");
		return ptr;
	}


	void WaitResult(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void SetupNumberRange(int InNumMin, int InNumMax);
	void SetupCashier(int InInitValue, int InUnitPrice, int InNumDigits, int InMinDigits);
	void SetController(class UJackUMGValueController* InValueController);
	void InitCashierWindow(class UJackUMGValueController* InValueController, int InZOrder);
	int GetTotalPrice();
	int GetInputValue();
	void FinishShowCashierDelegate();
};


// Class JackGame.JackUMGCharacterCaptureControlWidget
// 0x0000 (0x0370 - 0x0370)
class UJackUMGCharacterCaptureControlWidget : public UJackUMGWidgetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCharacterCaptureControlWidget");
		return ptr;
	}


	void SetDisplayedDebugTargetSize(bool bValue);
	void SetDisplayedDebugInfo(bool bValue);
	void GetZukanMotionData(const struct FName& MonsterZukanID, bool* bIsFound, struct FJackDataTableMonsterZukanMotion* Data);
	bool GetDisplayedDebugTargetSize();
	bool GetDisplayedDebugInfo();
};


// Class JackGame.JackUMGCharStateType
// 0x0010 (0x0048 - 0x0038)
class UJackUMGCharStateType : public UObject
{
public:
	int                                                StateType;                                                // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UTexture2D*                                  Image;                                                    // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCharStateType");
		return ptr;
	}

};


// Class JackGame.JackUMGStateDispController
// 0x0018 (0x0050 - 0x0038)
class UJackUMGStateDispController : public UObject
{
public:
	int                                                NumDisp;                                                  // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<class UJackUMGCharStateType*>               StateList;                                                // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGStateDispController");
		return ptr;
	}

};


// Class JackGame.JackUMGCharacterStatus
// 0x0028 (0x0060 - 0x0038)
class UJackUMGCharacterStatus : public UObject
{
public:
	TEnumAsByte<EJackCharacter>                        CharType;                                                 // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	class UJackUMGStateDispController*                 Iiyatu;                                                   // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackUMGStateDispController*                 Waruyatu;                                                 // 0x0048(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PresentHP;                                                // 0x0050(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxHP;                                                    // 0x0054(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PresentMP;                                                // 0x0058(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxMP;                                                    // 0x005C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCharacterStatus");
		return ptr;
	}

};


// Class JackGame.JackUMGCopyright
// 0x0030 (0x0460 - 0x0430)
class UJackUMGCopyright : public UJackUMGBrowserBase
{
public:
	struct FScriptMulticastDelegate                    CopyrightScrollDelegate;                                  // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0440(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGCopyright");
		return ptr;
	}


	void MakeTextPanelList(class UCanvasPanel* TextList);
	void JackUMGCopyrightScrollDelegate__DelegateSignature(bool IsUpScroll);
	TArray<class UTextBlock*> GetOutTextList();
	TArray<class UImage*> GetOutImageList();
	int GetCopyrightLineCount(class UTextBlock* TargetTextBlock);
};


// Class JackGame.JackUMGDataContainer
// 0x0050 (0x0088 - 0x0038)
class UJackUMGDataContainer : public UObject
{
public:
	TEnumAsByte<EJackUMGItemContainerType>             Type;                                                     // 0x0038(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FName                                       Tag;                                                      // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Value;                                                    // 0x0048(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	struct FText                                       Text;                                                     // 0x0050(0x0018) (BlueprintVisi, BlueprintReadOnly)
	class UMaterial*                                   Material;                                                 // 0x0068(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  Texture;                                                  // 0x0070(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UObject*                                     Object;                                                   // 0x0078(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsVisible;                                                // 0x0080(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGDataContainer");
		return ptr;
	}

};


// Class JackGame.JackUMGFukidasiWindowController
// 0x0420 (0x0458 - 0x0038)
class UJackUMGFukidasiWindowController : public UObject
{
public:
	class UClass*                                      RootPanelWidgetClass;                                     // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJackUMGCharacterUIPresetData               ActionCursorWidgetPresetData;                             // 0x0040(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               BattleCursorWidgetPresetData;                             // 0x0070(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               ActionGuideWidgetPresetData;                              // 0x00A0(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               FukidasiIconWidgetPresetData;                             // 0x00D0(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               FukidasiWidgetPresetData;                                 // 0x0100(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               NamePlateWidgetPresetData;                                // 0x0130(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               ItemGetIconWidgetPresetData;                              // 0x0160(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               MonsterExclamationWidgetPresetData;                       // 0x0190(0x0030) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               MonsterEmotionLoopIconWidgetPresetData;                   // 0x01C0(0x0030) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               FusigiKaziMaterialWidgetPresetData;                       // 0x01F0(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               FusigiKaziFailedWidgetPresetData;                         // 0x0220(0x0030) (Edit, DisableEditOnInstance)
	struct FJackUMGCharacterUIPresetData               FusigiKaziSuccessWidgetPresetData;                        // 0x0250(0x0030) (Edit, DisableEditOnInstance)
	float                                              OpenFukidasiAnimTime;                                     // 0x0280(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	class UCurveVector*                                OpenFukidasiScaleAnimCurve;                               // 0x0288(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OpenFukidasiScaleAnimTime;                                // 0x0290(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	class UCurveFloat*                                 OpenFukidasiAlphaAnimCurve;                               // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OpenFukidasiAlphaAnimTime;                                // 0x02A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class UCurveVector*                                OpenFukidasiFaceIconScaleAnimCurve;                       // 0x02A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              OpenFukidasiFaceIconScaleAnimTime;                        // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	struct FSlateFontInfo                              NamePlateFontInfo;                                        // 0x02B8(0x0058) (Edit, DisableEditOnInstance)
	int                                                AbbreviationLengthBorder;                                 // 0x0310(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AbbreviatedNameLength;                                    // 0x0314(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableOfNamePlateOverlapCheck;                           // 0x0318(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0319(0x0003) MISSED OFFSET
	float                                              InterpSpeedOfNamePlateOverlapCheck;                       // 0x031C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDontInterpAtInitializeOfNamePlateOverlapCheck;           // 0x0320(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDisplayBattleCursorInForeground;                         // 0x0321(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x16];                                      // 0x0322(0x0016) MISSED OFFSET
	class UJackUMGManager*                             UMGManager;                                               // 0x0338(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackHUD*                                    HUD;                                                      // 0x0340(0x0008) (ZeroConstructor, IsPlainOldData)
	class UUserWidget*                                 RootWidget;                                               // 0x0348(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                RootPanelWidget;                                          // 0x0350(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGActionCursorData*                    ActionCursorData;                                         // 0x0358(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGActionCursorBaseData*                ActionCursorIconData;                                     // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMG3DWidgetData*                        BattleCursorData;                                         // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMG3DWidgetData*>                ActionGuideDataList;                                      // 0x0370(0x0010) (ZeroConstructor)
	TArray<class UJackUMGFukidasiIconData*>            FukidasiIconDataList;                                     // 0x0380(0x0010) (ZeroConstructor)
	TArray<class UJackUMGFukidasiData*>                FukidasiDataList;                                         // 0x0390(0x0010) (ZeroConstructor)
	TArray<class UJackUMGMonsterNamePlateData*>        NamePlateDataList;                                        // 0x03A0(0x0010) (ZeroConstructor)
	class UJackUMGItemGetIconData*                     ItemGetIconData;                                          // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMGMonsterEmotionIconData*>      MonsterEmotionIconDataList;                               // 0x03B8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<class UJackUMGMonsterEmotionLoopIconData*>  MonsterEmotionLoopIconDataList;                           // 0x03C8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UJackUMGFusigiKaziEffectData*                FusigiKaziMaterialData;                                   // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGFusigiKaziEffectData*                FusigiKaziFailedData;                                     // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGFusigiKaziEffectData*                FusigiKaziSuccessData;                                    // 0x03E8(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<struct FName, class UTexture2D*>              PreloadedTextureMap;                                      // 0x03F0(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0440(0x0008) MISSED OFFSET
	TWeakObjectPtr<class AJackFukidasiLateTickActor>   LateTickActor;                                            // 0x0448(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bDisplayUIFukidasiIconInfo;                               // 0x0450(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0451(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGFukidasiWindowController");
		return ptr;
	}


	void UpdateNamePlateWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateMonsterEmotionLoopIconWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateMonsterEmotionIcon(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateFusigiKaziSuccessWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateFusigiKaziMaterialWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateFusigiKaziFailedWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateFukidasiWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateFukidasiIconWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateBattleCursorWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateActionCursorWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void UpdateActionCursorIconWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void TextureLoadComplete(const struct FName& ItemID, class UObject* LoadedObject);
	class AActor* SpawnActionCursor3dActor(class UClass* ActionCursor3dActorClass, const struct FTransform& Transform);
	void ShowMonsterEmotionLoopIcon(class AJackCharacter* Target, TEnumAsByte<EJackMonsterEmotionIcon> IconType);
	void ShowMonsterEmotionIcon(class AJackCharacter* Target, TEnumAsByte<EJackMonsterEmotionIcon> IconType);
	void ShowItemGetIcon(class AJackCharacter* Target, TEnumAsByte<EJackItemGetIcon> IconType, const struct FName& ItemID);
	void ShowFusigiKaziSuccess(class AActor* Target, TArray<struct FName> ItemIDList, class USceneCaptureComponent2D* SceneCaptureComponent2D);
	void ShowFusigiKaziMaterial(class AActor* Target, TArray<struct FName> ItemIDList, class USceneCaptureComponent2D* SceneCaptureComponent2D);
	void ShowFusigiKaziFailed(class AActor* Target, TArray<struct FName> ItemIDList, class USceneCaptureComponent2D* SceneCaptureComponent2D);
	void ShowFukidasiIcon(class AJackCharacter* Target);
	void ShowBattleCursor(class AActor* Target);
	void ShowActionGuide(class AActor* Target, class UJackInteractiveActorComponent* TargetComponent);
	void ShowActionCursorIcon(class AActor* Target, TEnumAsByte<EJackActionCursor> ActionCursorType, TEnumAsByte<EJackNPCImportance> Importance);
	void ShowActionCursor(class AActor* Target, class UJackInteractiveActorComponent* TargetComponent);
	void Set3dWidgetCaptureScreenPosition(const struct FVector2D& InScale, const struct FVector2D& InOffset);
	void PreloadTextureByItemIdList(TArray<struct FName> ItemIDList);
	void OpenNPCFukidasi(class AJackCharacter* Target, const struct FString& InMessage, float DisplaySeconds);
	void OpenMonsterNamePlate(class AJackCharacter* Target, const struct FString& Message, const struct FString& MonsterRawName);
	void OpenActorNamePlate(class AActor* Target, const struct FString& Message);
	void OpenActorFukidasi(class AActor* Target, const struct FString& InMessage, float DisplaySeconds);
	bool IsNPCFukidasiOpened(class AJackCharacter* Target);
	bool IsCompletedPreloadTexture();
	bool IsActionCursorVisible(class AActor* Target, class UJackInteractiveActorComponent* TargetComponent);
	void InitNamePlateWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitMonsterEmotionLoopIconWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitMonsterEmotionIcon(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitItemGetIconWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitFusigiKaziSuccessWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitFusigiKaziMaterialWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitFusigiKaziFailedWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitFukidasiWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitFukidasiIconWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitBattleCursorWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void InitActionGuideWidget(class UUserWidget* Widget, class UJackUMG3DWidgetData* Data);
	void HideNamePlateWidget(class UJackUMG3DWidgetData* Data);
	void HideMonsterEmotionLoopIconWidget(class UJackUMG3DWidgetData* Data);
	void HideMonsterEmotionLoopIcon(class AJackCharacter* Target, TEnumAsByte<EJackMonsterEmotionIcon> IconType);
	void HideMonsterEmotionIcon(class UJackUMG3DWidgetData* Data);
	void HideItemGetIcon();
	void HideFusigiKaziSuccessWidget(class UJackUMG3DWidgetData* Data);
	void HideFusigiKaziSuccess();
	void HideFusigiKaziMaterialWidget(class UJackUMG3DWidgetData* Data);
	void HideFusigiKaziMaterial();
	void HideFusigiKaziFailedWidget(class UJackUMG3DWidgetData* Data);
	void HideFusigiKaziFailed();
	void HideFukidasiIcon(class AJackCharacter* Target);
	void HideBattleCursorWidget(class UJackUMG3DWidgetData* Data);
	void HideBattleCursor();
	void HideActionGuide(class AActor* Target, class UJackInteractiveActorComponent* TargetComponent);
	void HideActionCursorWidget(class UJackUMG3DWidgetData* Data);
	void HideActionCursorIcon(class AActor* Target);
	void HideActionCursor(class AActor* Target, class UJackInteractiveActorComponent* TargetComponent);
	class UTexture2D* GetPreloadedTextureByItemId(const struct FName& ItemID);
	bool ExistsNPCFukidasi(class AJackCharacter* Target);
	void DrawUpdate3dWidget();
	void CloseNPCFukidasi(class AJackCharacter* Target);
	void CloseMonsterNamePlate(class AJackCharacter* Target);
	void CloseAllMonsterNamePlate();
	void ClearPreloadedTexture();
};


// Class JackGame.JackFukidasiLateTickActor
// 0x0008 (0x03A0 - 0x0398)
class AJackFukidasiLateTickActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0398(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackFukidasiLateTickActor");
		return ptr;
	}

};


// Class JackGame.JackUMG3DWidgetData
// 0x0060 (0x0098 - 0x0038)
class UJackUMG3DWidgetData : public UObject
{
public:
	class AActor*                                      TargetActor;                                              // 0x0038(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0040(0x0004) MISSED OFFSET
	struct FVector                                     Location;                                                 // 0x0044(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	bool                                               bProjected;                                               // 0x0050(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0051(0x000F) MISSED OFFSET
	class UUserWidget*                                 TargetWidget;                                             // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AActor*                                      TargetWidget3d;                                           // 0x0068(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UJackInteractiveActorComponent*              TargetInteractiveActorComponent;                          // 0x0070(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0078(0x0004) MISSED OFFSET
	float                                              OffsetLength;                                             // 0x007C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0080(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMG3DWidgetData");
		return ptr;
	}

};


// Class JackGame.JackUMGActionCursorBaseData
// 0x0018 (0x00B0 - 0x0098)
class UJackUMGActionCursorBaseData : public UJackUMG3DWidgetData
{
public:
	TEnumAsByte<EJackActionCursor>                     ActionCursorType;                                         // 0x0098(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackNPCImportance>                    Importance;                                               // 0x0099(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	float                                              ScaleAnimTimer;                                           // 0x009C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Scale;                                                    // 0x00A0(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGActionCursorBaseData");
		return ptr;
	}

};


// Class JackGame.JackUMGActionCursorData
// 0x0010 (0x00C0 - 0x00B0)
class UJackUMGActionCursorData : public UJackUMGActionCursorBaseData
{
public:
	class AJackScheduledNPC*                           TargetNPC;                                                // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B8(0x0003) MISSED OFFSET
	bool                                               bAnimInit;                                                // 0x00BB(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGActionCursorData");
		return ptr;
	}

};


// Class JackGame.JackUMGFukidasiBaseData
// 0x0020 (0x00B8 - 0x0098)
class UJackUMGFukidasiBaseData : public UJackUMG3DWidgetData
{
public:
	TWeakObjectPtr<class AJackScheduledNPC>            TargetNPC;                                                // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackNPCImportance>                    Importance;                                               // 0x00A0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x17];                                      // 0x00A1(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGFukidasiBaseData");
		return ptr;
	}

};


// Class JackGame.JackUMGFukidasiIconData
// 0x0018 (0x00D0 - 0x00B8)
class UJackUMGFukidasiIconData : public UJackUMGFukidasiBaseData
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B8(0x0004) MISSED OFFSET
	struct FVector                                     Scale;                                                    // 0x00BC(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGFukidasiIconData");
		return ptr;
	}

};


// Class JackGame.JackUMGFukidasiData
// 0x0078 (0x0130 - 0x00B8)
class UJackUMGFukidasiData : public UJackUMGFukidasiBaseData
{
public:
	struct FString                                     Message;                                                  // 0x00B8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bShowFaceIcon;                                            // 0x00C8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x17];                                      // 0x00C9(0x0017) MISSED OFFSET
	class UCurveVector*                                ScaleCurve;                                               // 0x00E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E8(0x0004) MISSED OFFSET
	struct FVector                                     Scale;                                                    // 0x00EC(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	class UCurveFloat*                                 AlphaCurve;                                               // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0100(0x0004) MISSED OFFSET
	float                                              Alpha;                                                    // 0x0104(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0108(0x0008) MISSED OFFSET
	class UCurveVector*                                FaceIconScaleCurve;                                       // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0118(0x0004) MISSED OFFSET
	struct FVector                                     FaceIconScale;                                            // 0x011C(0x000C) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              RemoveRate;                                               // 0x0128(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x012C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGFukidasiData");
		return ptr;
	}

};


// Class JackGame.JackUMGMonsterNamePlateData
// 0x0068 (0x0100 - 0x0098)
class UJackUMGMonsterNamePlateData : public UJackUMG3DWidgetData
{
public:
	class UJackGameCharacter*                          TargetGameCaracter;                                       // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Message;                                                  // 0x00A0(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bUpdateShowingOddEffect;                                  // 0x00B0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	TArray<struct FName>                               OddEffectIdList;                                          // 0x00B8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TArray<int>                                        OddEffectSlideRankList;                                   // 0x00C8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                ShowingOddEffectIndex;                                    // 0x00D8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGTextColorSet>                  TextColor;                                                // 0x00DC(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x23];                                      // 0x00DD(0x0023) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMonsterNamePlateData");
		return ptr;
	}

};


// Class JackGame.JackUMGItemGetIconData
// 0x0010 (0x00A8 - 0x0098)
class UJackUMGItemGetIconData : public UJackUMG3DWidgetData
{
public:
	TEnumAsByte<EJackItemGetIcon>                      IconType;                                                 // 0x0098(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x00A0(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemGetIconData");
		return ptr;
	}

};


// Class JackGame.JackUMGMonsterEmotionIconData
// 0x0010 (0x00A8 - 0x0098)
class UJackUMGMonsterEmotionIconData : public UJackUMG3DWidgetData
{
public:
	TEnumAsByte<EJackMonsterEmotionIcon>               IconType;                                                 // 0x0098(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              Timer;                                                    // 0x009C(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnded;                                                   // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMonsterEmotionIconData");
		return ptr;
	}

};


// Class JackGame.JackUMGMonsterEmotionLoopIconData
// 0x0008 (0x00A0 - 0x0098)
class UJackUMGMonsterEmotionLoopIconData : public UJackUMG3DWidgetData
{
public:
	TEnumAsByte<EJackMonsterEmotionIcon>               IconType;                                                 // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMonsterEmotionLoopIconData");
		return ptr;
	}

};


// Class JackGame.JackUMGFusigiKaziEffectData
// 0x0010 (0x00A8 - 0x0098)
class UJackUMGFusigiKaziEffectData : public UJackUMG3DWidgetData
{
public:
	TArray<struct FName>                               ItemIDList;                                               // 0x0098(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGFusigiKaziEffectData");
		return ptr;
	}

};


// Class JackGame.JackUMGFukubikiSlot
// 0x0118 (0x02E8 - 0x01D0)
class UJackUMGFukubikiSlot : public UUserWidget
{
public:
	TArray<struct FJackFukubikiLotteryInfo>            LotteryInfoList;                                          // 0x01D0(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x70];                                      // 0x01E0(0x0070) MISSED OFFSET
	TArray<class UImage*>                              LeftReelImageList;                                        // 0x0250(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	TArray<class UImage*>                              CenterReelImageList;                                      // 0x0260(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	TArray<class UImage*>                              RightReelImageList;                                       // 0x0270(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0280(0x001C) MISSED OFFSET
	float                                              ReelRollSpeed;                                            // 0x029C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReelRoolMinSpeedAtToStop;                                 // 0x02A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReelStopEaseExp;                                          // 0x02A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x02A8(0x000C) MISSED OFFSET
	float                                              ReelRoolSeInterval;                                       // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReelRoolToStopSeInterval;                                 // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                RoolRoolToStopSeCountMax;                                 // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  SunMarkTexture;                                           // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  StarMarkTexture;                                          // 0x02C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  MoonMarkTexture;                                          // 0x02D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  WaterMarkTexture;                                         // 0x02D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  HeartMarkTexture;                                         // 0x02E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGFukubikiSlot");
		return ptr;
	}


	void SetupStartingMarkList();
	void PlayAtariMe();
	void OnMeEnd();
};


// Class JackGame.JackUMGItemBase
// 0x0060 (0x03D0 - 0x0370)
class UJackUMGItemBase : public UJackUMGWidgetBase
{
public:
	bool                                               bIsSelective;                                             // 0x0370(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsChecked;                                               // 0x0371(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               IsFindOffset;                                             // 0x0372(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0373(0x0001) MISSED OFFSET
	int                                                TotalIndex;                                               // 0x0374(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ListIndex;                                                // 0x0378(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	struct FName                                       ItemID;                                                   // 0x0380(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       TextID;                                                   // 0x0388(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                GeneralValue;                                             // 0x0390(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	struct FText                                       CaptionText;                                              // 0x0398(0x0018) (Edit, BlueprintVisi, EditConst)
	struct FVector2D                                   CursorOffset;                                             // 0x03B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIsCalcCursorPosition;                                    // 0x03B8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03B9(0x0003) MISSED OFFSET
	int                                                DataNumber;                                               // 0x03BC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptDelegate                             JackOnUpdateContainerDelegate;                            // 0x03C0(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGItemBase");
		return ptr;
	}


	void SetItemData(int InListIndex, int InDataIndex, const struct FName& InItemId, const struct FName& InTextId, int InGeneralValue);
	void SetCursorOffset(const struct FVector2D& InCursorOffset);
	void SetCaptionInValue(int InValue, bool InIs2Byte);
	void SetCaptionFromTextId(const struct FName& InTextId, bool InIsList);
	void SetCaptionAndTextHyphenationFromTextId(const struct FName& InTextId);
	void SetCaptionAndTextHyphenation(const struct FString& InCaption, int InMaxLines);
	void SetCaption(const struct FText& InCaption);
	void NotificationItemBase(const struct FName& NotifyTag, class UJackUMGItemData* InItemData, class UObject* Object, int Value);
	void JackOnUMGUpdateContainerDelegate__DelegateSignature(const struct FJackUMGItemContainer& ItemContainer);
	void InitItem(class UImage* IconPanel, bool InIsList);
	struct FName GetTextId();
	int GetListIndex();
	struct FName GetItemId();
	int GetGeneralValue();
	int GetDataIndex();
	struct FText GetCaption();
	void DrawItemBase(class UJackUMGItemData* InItemData);
	void DoUpdateContainerDelegate(const struct FJackUMGItemContainer& Container);
	void ApplyItemData(class UJackUMGItemData* ItemData);
};


// Class JackGame.JackUMGHorizontalParts
// 0x0060 (0x0430 - 0x03D0)
class UJackUMGHorizontalParts : public UJackUMGItemBase
{
public:
	struct FScriptMulticastDelegate                    HorizontalSetSEDelegate;                                  // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    HorizontalSetGammaDelegate;                               // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UWidget*                                     TitlePanel;                                               // 0x03F0(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UWidget*>                             ValuePanels;                                              // 0x03F8(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	class UWidget*                                     CursorPanel;                                              // 0x0408(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0410(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHorizontalParts");
		return ptr;
	}


	void SetValue(int InValue);
	void SetupHorizontalParts(int InInitValue, int ItemsCount, bool UseActiveColor, TEnumAsByte<EJackUMGHorizontalMode> InType);
	void SetHorizontalType(TEnumAsByte<EJackUMGHorizontalMode> InType);
	void SetDisableKeyEvent(bool InDisable);
	void SetCursorPosition(bool IsDelegate);
	void SetActiveFlag(bool InActiveFlag);
	void ReturnToInitialValue();
	void MoveRightCursor();
	void MoveLeftCursor();
	void JackUMGHorizontalSetSEDelegate__DelegateSignature();
	void JackUMGHorizontalSetGammaDelegate__DelegateSignature(float InScale);
	EJackDisplayGamma IntToDisplayGamma(int InValue);
	float GetVarRate();
	int GetValueMin();
	int GetValueMax();
	int GetValue();
	bool GetDisableKeyEvent();
	bool GetActiveFlag();
};


// Class JackGame.JackUMGHpMpBase
// 0x00D8 (0x0448 - 0x0370)
class UJackUMGHpMpBase : public UJackUMGWidgetBase
{
public:
	struct FScriptMulticastDelegate                    HpChangeDelegate;                                         // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    HealEffectSetDelegate;                                    // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SetHudAnimationDelegate;                                  // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    HpSetAnimationDelegate;                                   // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SetRenkeiHudAnimationDelegate;                            // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SenaHairDelegate;                                         // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsFocusable;                                              // 0x03D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsFullMember;                                             // 0x03D1(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x03D2(0x0006) MISSED OFFSET
	TArray<struct FJackUMGHpMpItemInfo>                HpMpItemList;                                             // 0x03D8(0x0010) (BlueprintVisi, ZeroConstructor)
	TArray<class UJackUMGItemData*>                    ItemDataList;                                             // 0x03E8(0x0010) (BlueprintVisi, ZeroConstructor)
	float                                              Unit_Index;                                               // 0x03F8(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Num0_Index;                                               // 0x03FC(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Num1_Index;                                               // 0x0400(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Num2_Index;                                               // 0x0404(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UCanvasPanel*                                ItemListCanvasPanel;                                      // 0x0408(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0410(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHpMpBase");
		return ptr;
	}


	void SetSenaHairStyle(bool IsShortHair);
	void SetScaleAllHud(float InScale);
	void SetHudStatusEffect(TEnumAsByte<EJackCharacter> CharaType, TEnumAsByte<EJackPopupBalloon> InBalloonType);
	void SetHudPanelAnim(TEnumAsByte<EJackCharacter> CharaType, TEnumAsByte<EJackUMGHudPlateAnim> AnimType);
	void ResetAllHudPanel();
	void RequestCloseWidget();
	void JackUMGSetRenkeiHudAnimationDelegate__DelegateSignature(int Index, int Acion, TEnumAsByte<EJackUMGHudAnimationAction> AnimType);
	void JackUMGSetHudAnimationDelegate__DelegateSignature(TEnumAsByte<EJackUMGHudAnimationAction> AnimType, bool IsFieldDamage);
	void JackUMGSenaHairDelegate__DelegateSignature(bool IsShort, TEnumAsByte<EJackUIFaceIcon> InType, int Index);
	void JackUMGHpSetAnimationDelegate__DelegateSignature(int Index, TEnumAsByte<EJackUMGHudAnimationAction> AnimType);
	void JackUMGHpChangeDelegate__DelegateSignature(int Index, int ColorNum);
	void JackUMGHealEffectDelegate__DelegateSignature(int Type, int Index);
	bool IsTurnCharacter(int InIndex);
	void InitHudStatus4(class UCanvasPanel* ItemListCanvas, int InZOrder);
	void InitHudStatus(class UCanvasPanel* ItemListCanvas, TArray<class UJackUMGItemData*> ItemList, bool AllMember, int InZOrder);
	TEnumAsByte<EJackUMGHudInitQueued> GetQueuedMemberInBattle(int InIndex);
};


// Class JackGame.JackUMGHudFukidasiBattleScenario
// 0x0030 (0x03A0 - 0x0370)
class UJackUMGHudFukidasiBattleScenario : public UJackUMGWidgetBase
{
public:
	TArray<struct FJackUMGScenarioFukidasiInfo>        FukidasiCue;                                              // 0x0370(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	TArray<struct FJackUMGScenarioFukidasiInfo>        ResFukidasiCue;                                           // 0x0380(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	bool                                               bResRequest;                                              // 0x0390(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0391(0x0003) MISSED OFFSET
	float                                              FukidasiDisplayTime;                                      // 0x0394(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              FukidasiCloseTime;                                        // 0x0398(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x039C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHudFukidasiBattleScenario");
		return ptr;
	}


	void SetStringAndFace(const struct FString& inString, const struct FName& FaceID);
	void ResetAnimation();
	void OnEndOutAnimation();
	void OnEndInAnimation();
	void LoopFukidasi();
	bool IsOpened();
	void CloseFukidasi();
};


// Class JackGame.JackUMGHudStatusBase
// 0x0158 (0x04C8 - 0x0370)
class UJackUMGHudStatusBase : public UJackUMGWidgetBase
{
public:
	struct FVector2D                                   Num0_UV;                                                  // 0x0370(0x0008) (BlueprintVisi, IsPlainOldData)
	struct FVector2D                                   Num1_UV;                                                  // 0x0378(0x0008) (BlueprintVisi, IsPlainOldData)
	struct FVector2D                                   Num2_UV;                                                  // 0x0380(0x0008) (BlueprintVisi, IsPlainOldData)
	float                                              Unit_Index;                                               // 0x0388(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Num0_Index;                                               // 0x038C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Num1_Index;                                               // 0x0390(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Num2_Index;                                               // 0x0394(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              Value_Frame;                                              // 0x0398(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	TArray<class UJackUMGItemData*>                    ItemDataList;                                             // 0x03A0(0x0010) (BlueprintVisi, ZeroConstructor)
	struct FScriptMulticastDelegate                    ValueChangeDelegate;                                      // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NameSetDelegate;                                          // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FaceSetDelegate;                                          // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FaceEffectSetDelegate;                                    // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlateAnimSetDelegate;                                     // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    JoutaiIjouDelegate;                                       // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    JoutaiIjouListDelegate;                                   // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    GoodJoutaiIjouListDelegate;                               // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BadJoutaiIjouListDelegate;                                // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LevelChangeDelegate;                                      // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0450(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHudStatusBase");
		return ptr;
	}


	void SetTextJustification(TEnumAsByte<ETextJustify> InJustification);
	void SetTestTextJustification(TEnumAsByte<ETextJustify> InJustification);
	void SetSubLevel(int InLevel, TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetStatusValue(TEnumAsByte<EJackUMGHudStatusMode> InType, int Value0, int Value1);
	void SetStatusTextColor(int Index, int ColorNum);
	void SetNameText(const struct FString& InName);
	void SetGoodJoutaiIjouList(TArray<struct FJackUMGOddEffectStatus> OddEffectList);
	void SetDataFromTuyosa(int Now, int Max, TEnumAsByte<EJackUMGTextColorSet> Type, bool bIsInit);
	void SetBadJoutaiIjouList(TArray<struct FJackUMGOddEffectStatus> OddEffectList);
	void RequestCloseWidget();
	void JackUMGValueChangeDelegate__DelegateSignature(int Index, int ColorNum);
	void JackUMGPlateDelegate__DelegateSignature(TEnumAsByte<EJackUMGHudPlateAnim> Type);
	void JackUMGNameDelegate__DelegateSignature(const struct FString& Name);
	void JackUMGLevelChangeDelegate__DelegateSignature(int Level, TEnumAsByte<EJackUMGTextColorSet> ColorType);
	void JackUMGJoutaiListDelegate__DelegateSignature(TArray<struct FName> NameList);
	void JackUMGJoutaiDelegate__DelegateSignature(int Type);
	void JackUMGGoodJoutaiListDelegate__DelegateSignature(TArray<struct FJackUMGOddEffectStatus> OddEffectList);
	void JackUMGFaceEffectDelegate__DelegateSignature(TEnumAsByte<EJackCharacter> Type, TEnumAsByte<EJackUIFaceIcon> InIconType);
	void JackUMGFaceDelegate__DelegateSignature(TEnumAsByte<EJackCharacter> Type, TEnumAsByte<EJackUIFaceIcon> InIconType);
	void JackUMGBadJoutaiListDelegate__DelegateSignature(TArray<struct FJackUMGOddEffectStatus> OddEffectList);
	bool IsSuperMode();
	float GetJoutaiijouIconAlpha();
	void ChangeHudBar(int Now, int Max, TEnumAsByte<EJackUMGTextColorSet> Type, bool bIsInit);
};


// Class JackGame.JackUMGHudStatus
// 0x0028 (0x04F0 - 0x04C8)
class UJackUMGHudStatus : public UJackUMGHudStatusBase
{
public:
	struct FScriptMulticastDelegate                    HpChangeDelegate;                                         // 0x04C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsFocusable;                                              // 0x04D8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsFullMember;                                             // 0x04D9(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x16];                                      // 0x04DA(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHudStatus");
		return ptr;
	}


	void SetScaleAllHud(float InScale);
	void RequestCloseWidget();
	void JackUMGHpChangeDelegate__DelegateSignature(int Index, int ColorNum);
	void InitHudStatus(class UCanvasPanel* ItemListCanvas, TArray<class UJackUMGItemData*> ItemList, bool AllMember, int InZOrder);
};


// Class JackGame.JackUMGHudWindows
// 0x0018 (0x0050 - 0x0038)
class UJackUMGHudWindows : public UObject
{
public:
	struct FName                                       GoldWindowWidgetName;                                     // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UJackUMGWidgetBase*                          GoldWindowWidgetRef;                                      // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGHudWindows");
		return ptr;
	}


	void OpenRestartWindow();
	void OpenGoldWindow(bool IsDisplayedInFront);
	void CloseRestartWindow();
	void CloseGoldWindow();
};


// Class JackGame.JackUMGJoutaiMiru
// 0x0038 (0x0468 - 0x0430)
class UJackUMGJoutaiMiru : public UJackUMGBrowserBase
{
public:
	struct FScriptMulticastDelegate                    JoutaiMiruScrollDelegate;                                 // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsSubParty;                                               // 0x0440(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	TArray<class UJackUMGItemBase*>                    SelectItemListMiru;                                       // 0x0448(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	int                                                OddEffectMax;                                             // 0x0458(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x045C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGJoutaiMiru");
		return ptr;
	}


	void SetVisibilitySubPage(ESlateVisibility InVisibilityType, int InSubMenberNum);
	void SetJoutaiMiruListOffset(int InOffset);
	bool SetJoutaiIjouParts(TEnumAsByte<EJackCharacter> InCharacterType, bool IsSubmember, int InIndex);
	bool MoveCursor(int Direction, const struct FJackKeyStatus& InKey);
	void JackUMGJoutaiMiruScrollDelegate__DelegateSignature(int InListOffset);
	int GetJoutaiMiruListOffset();
	void AddStaticItemList(class UJackUMGItemBase* InItemBase);
};


// Class JackGame.JackUMGKeyConfig
// 0x0030 (0x0430 - 0x0400)
class UJackUMGKeyConfig : public UJackUMGWindowBase
{
public:
	bool                                               bEnableNativeTick;                                        // 0x0400(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0401(0x0007) MISSED OFFSET
	struct FText                                       JustPressedKeyText;                                       // 0x0408(0x0018) (BlueprintVisi)
	struct FName                                       JustPressedKeyName;                                       // 0x0420(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                JustPressedKeyNumber;                                     // 0x0428(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x042C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGKeyConfig");
		return ptr;
	}


	void SetEnableTerminateByKey();
	void SetDisableTerminateByKey();
	TArray<class UJackUMGItemData*> GetKeyConfigKeyPanelSteam();
};


// Class JackGame.JackUMGListController
// 0x0010 (0x0380 - 0x0370)
class UJackUMGListController : public UJackUMGWidgetBase
{
public:
	int                                                ItemsPerPage;                                             // 0x0370(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                NumData;                                                  // 0x0374(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                CurrentNumber;                                            // 0x0378(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableKeyEvent;                                         // 0x037C(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x037D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGListController");
		return ptr;
	}

};


// Class JackGame.JackUMGPageController
// 0x0040 (0x03C0 - 0x0380)
class UJackUMGPageController : public UJackUMGListController
{
public:
	int                                                CurrentPage;                                              // 0x0380(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                MaxPage;                                                  // 0x0384(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FText                                       CurrentText;                                              // 0x0388(0x0018) (BlueprintVisi)
	struct FText                                       MaxText;                                                  // 0x03A0(0x0018) (BlueprintVisi)
	int                                                ItemsPerColumn;                                           // 0x03B8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPageController");
		return ptr;
	}


	void SetupPageController(int InInitPage, int InItemsPerPage, int InNumData, int NumColumn);
	void SetPage(int InPage);
	void SetItemsPerColumn(int InValue);
	void SetDisableKeyEventFlag(bool InFlag);
	void InitPageController(int ZOrder);
};


// Class JackGame.JackUMGScrollController
// 0x0008 (0x0388 - 0x0380)
class UJackUMGScrollController : public UJackUMGListController
{
public:
	int                                                DispTopNumber;                                            // 0x0380(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0384(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGScrollController");
		return ptr;
	}


	void SetupScrollController(int InItemsPerPage, int InNumData);
	void InitScrollController(int ZOrder);
};


// Class JackGame.JackUMGMainMapOverlayWidgetBase
// 0x0040 (0x03B0 - 0x0370)
class UJackUMGMainMapOverlayWidgetBase : public UJackUMGWidgetBase
{
public:
	struct FName                                       MapVolumeID;                                              // 0x0370(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0378(0x0008) MISSED OFFSET
	TArray<struct FJackUMGMapTextItemGroup>            LocationItemSetList;                                      // 0x0380(0x0010) (ZeroConstructor)
	TArray<struct FJackUMGMainMapOverlayItemInfo>      ChildWidgets;                                             // 0x0390(0x0010) (ZeroConstructor)
	TArray<class UJackUMGMapTextImageItem*>            ChildWidgetsShowingOnMiniMap;                             // 0x03A0(0x0010) (ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMainMapOverlayWidgetBase");
		return ptr;
	}


	void UpdateZoomMode(const struct FLinearColor& TexCoord);
	void UpdateMapTextCondition();
	void SetMapTextVisible(bool bVisible, bool bForcibly);
	void SetMapTextFontColor(TEnumAsByte<EJackUMGTextColorSet> ColorType);
	void SetConditionalBeginDestroyEnabled(bool bEnabled, bool bAppliesChildren);
	void LeaveZoomMode();
	bool IsValid();
	struct FVector2D GetOriginOffset();
	bool GetMapTextVisible();
	TArray<class UJackUMGMapTextLocationNameItem*> FindLocationNameItemsForMapVolumeID(const struct FName& MapVolumeID);
	TArray<class UJackUMGMapTextImageItem*> FindImageItemsForMapVolumeID(const struct FName& MapVolumeID);
	void EnterZoomMode();
};


// Class JackGame.JackUMGTheaterWindowSetting
// 0x0018 (0x0050 - 0x0038)
class UJackUMGTheaterWindowSetting : public UObject
{
public:
	struct FLinearColor                                StripeColor;                                              // 0x0038(0x0010) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              StripeWidth;                                              // 0x0048(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTheaterWindowSetting");
		return ptr;
	}

};


// Class JackGame.JackUMGPage
// 0x0010 (0x0048 - 0x0038)
class UJackUMGPage : public UObject
{
public:
	class UJackUMGWidgetBase*                          WidgetBase;                                               // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPage");
		return ptr;
	}

};


// Class JackGame.JackUMGLoadMenuAssetData
// 0x0038 (0x0070 - 0x0038)
class UJackUMGLoadMenuAssetData : public UObject
{
public:
	TEnumAsByte<EJackUMGMenuId>                        MenuId;                                                   // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x0039(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGLoadMenuAssetData.WidgetAssets
	unsigned char                                      UnknownData02[0x10];                                      // 0x0050(0x0010) UNKNOWN PROPERTY: ArrayProperty JackGame.JackUMGLoadMenuAssetData.TextureAssets
	TArray<struct FSoftObjectPath>                     OtherAssets;                                              // 0x0060(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGLoadMenuAssetData");
		return ptr;
	}

};


// Class JackGame.JackUMGManagerSetting
// 0x06E0 (0x0718 - 0x0038)
class UJackUMGManagerSetting : public UObject
{
public:
	bool                                               IsEnableMenuWindowAnimation;                              // 0x0038(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FLinearColor                                WidgetEnableColor;                                        // 0x003C(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                WidgetDisableColor;                                       // 0x004C(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<struct FLinearColor>                        SyougouColorTable;                                        // 0x0060(0x0010) (Edit, ZeroConstructor)
	class UTexture2D*                                  L1ButtonIcon;                                             // 0x0070(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  L2ButtonIcon;                                             // 0x0078(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  R1ButtonIcon;                                             // 0x0080(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  R2ButtonIcon;                                             // 0x0088(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  FaceTopButtonIcon;                                        // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  FaceBottomButtonIcon;                                     // 0x0098(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  FaceLeftButtonIcon;                                       // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  FaceRightButtonIcon;                                      // 0x00A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  OptionsButtonIcon;                                        // 0x00B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  L3ButtonIcon;                                             // 0x00B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackSerifuPrintSpeedDict>           SerifuPrintSpeedList;                                     // 0x00C0(0x0010) (ZeroConstructor, Deprecated)
	float                                              SerifuFastModeMultiplier;                                 // 0x00D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	class UDataTable*                                  SerifuPrintSpeedDataTable;                                // 0x00D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<TEnumAsByte<EJackKeys>>                     KeyPermitListAtME;                                        // 0x00E0(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                DefaultFadeZOrder;                                        // 0x00F0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForegroundFadeZOrder;                                     // 0x00F4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MessageFadeZOrder;                                        // 0x00F8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CSSkipZOrder;                                             // 0x00FC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FJackUMGFontColorSet                        FontColorSet;                                             // 0x0100(0x060C) (Edit, BlueprintVisi, BlueprintReadOnly)
	float                                              CreateWidgetWarningTime;                                  // 0x070C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpdateWidgetWarningTime;                                  // 0x0710(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0714(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGManagerSetting");
		return ptr;
	}

};


// Class JackGame.JackUMGManager
// 0x05D8 (0x0610 - 0x0038)
class UJackUMGManager : public UObject
{
public:
	class UClass*                                      RootWidgetClass;                                          // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RenkeiSkipWidgetClass;                                    // 0x0040(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HorseEnergyWidgetClass;                                   // 0x0048(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudStatusWidgetClass;                                     // 0x0050(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudStatus8WidgetClass;                                    // 0x0058(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BattleResultWidgetClass;                                  // 0x0060(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TheaterWidgetClass;                                       // 0x0068(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      NakamaKaiwaButtonWidgetClass;                             // 0x0070(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudSibariplayClass;                                       // 0x0078(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GoldWindowWidgetClass;                                    // 0x0080(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BaisokuModeWidgetClass;                                   // 0x0088(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudFukidasiBattleClass;                                   // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudScenarioFukidasiBattleClass;                           // 0x0098(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudScenarioFukidasiBattleLClass;                          // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MiniMapWidgetClass;                                       // 0x00A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ManualSaveWidgetClass;                                    // 0x00B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AutoSaveWidgetClass;                                      // 0x00B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FailedSaveWidgetClass;                                    // 0x00C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FadeWidgetClass;                                          // 0x00C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ChapterWidgetClass;                                       // 0x00D0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x00D8(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackUMGManager.MedalStampWidgetClass
	unsigned char                                      UnknownData01[0x18];                                      // 0x00F0(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackUMGManager.SibariTasseiWidgetClass
	unsigned char                                      UnknownData02[0x18];                                      // 0x0108(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackUMGManager.PlayGo000WidgetClass
	unsigned char                                      UnknownData03[0x18];                                      // 0x0120(0x0018) UNKNOWN PROPERTY: SoftClassProperty JackGame.JackUMGManager.PlayGo001WidgetClass
	class UClass*                                      MapHelpButtonWidgetClass;                                 // 0x0138(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      QuestClearWidgetClass;                                    // 0x0140(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CasinoCoin000WidgetClass;                                 // 0x0148(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CasinoCoin001WidgetClass;                                 // 0x0150(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      Syuurenjou004WidgetClass;                                 // 0x0158(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BoukenStepWidgetClass;                                    // 0x0160(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      StaffRollWidgetClass;                                     // 0x0168(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SerifuWindowControllerClass;                              // 0x0170(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TenNoKoeWindowControllerClass;                            // 0x0178(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      BattleMessageControllerClass;                             // 0x0180(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TokugiPanelMessageControllerClass;                        // 0x0188(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MovieMessageControllerClass;                              // 0x0190(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FukidasiWindowControllerClass;                            // 0x0198(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SerifuWindowResourcesClass;                               // 0x01A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      MapControllerClass;                                       // 0x01A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      HudWindowsClass;                                          // 0x01B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      TokugiPanelSettingClass;                                  // 0x01B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SoundSetClass;                                            // 0x01C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AccessorCommonClass;                                      // 0x01C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AccessorItemClass;                                        // 0x01D0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AccessorMembersClass;                                     // 0x01D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AccessorMantanClass;                                      // 0x01E0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AccessorCoordinateClass;                                  // 0x01E8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UClass*>                              MenuAssetDataClasses;                                     // 0x01F0(0x0010) (Edit, ZeroConstructor)
	TArray<class UJackUMGLoadMenuAssetData*>           MenuAssetDataList;                                        // 0x0200(0x0010) (ZeroConstructor)
	class UClass*                                      DisplayUserWidgetClass;                                   // 0x0210(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RemoveUserWidgetClass;                                    // 0x0218(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      PairingButtonWidgetClass;                                 // 0x0220(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RemoveControllerWidgetClass;                              // 0x0228(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0230(0x0008) MISSED OFFSET
	class UJackUMGMapController*                       MapController;                                            // 0x0238(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0240(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    TitleBGMEndDelegate;                                      // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UJackUMGWidgetBase*                          NullWindowRef;                                            // 0x0258(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UObject*                                     WorldObject;                                              // 0x0260(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UJackUMGWidgetBase*                          RootWidget;                                               // 0x0268(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPanelWidget*                                RootWidgetRootPanel;                                      // 0x0270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGWidgetBase*                          OpendMenuWidget;                                          // 0x0278(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TEnumAsByte<EJackUMGMenuId>                        OpendMenuId;                                              // 0x0280(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	int                                                MenuResultIndex;                                          // 0x0284(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackUMGMenuBGMode>                    MenuBGMode;                                               // 0x0288(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0289(0x0007) MISSED OFFSET
	struct FName                                       MenuBGCaptionId;                                          // 0x0290(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptDelegate                             JackOnUMGOpenMenuDelegate;                                // 0x0298(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             CSSkipDelegate;                                           // 0x02A8(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	struct FLinearColor                                WidgetEnableColor;                                        // 0x02B8(0x0010) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FLinearColor                                WidgetDisableColor;                                       // 0x02C8(0x0010) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	class UJackUMGSoundSet*                            SoundSet;                                                 // 0x02D8(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsEnableMenuWindowAnimation;                              // 0x02E0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsModernUIMode;                                          // 0x02E1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x02E2(0x0002) MISSED OFFSET
	int                                                DefaultFadeZOrder;                                        // 0x02E4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForegroundFadeZOrder;                                     // 0x02E8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MessageFadeZOrder;                                        // 0x02EC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CSSkipZOrder;                                             // 0x02F0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0xC];                                       // 0x02F4(0x000C) MISSED OFFSET
	class UClass*                                      UMGManagerCommonClass;                                    // 0x0300(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UJackUMGManagerSetting*                      UMGManagerCommon;                                         // 0x0308(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x50];                                      // 0x0310(0x0050) MISSED OFFSET
	TArray<class UJackUMGWidgetBase*>                  DeleteList;                                               // 0x0360(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UJackUMGWidgetBase*>                  WidgetList;                                               // 0x0370(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UJackUMGWidgetBase*>                  ViewportList;                                             // 0x0380(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UJackUMGWidgetBase*>                  OpenWidgetList;                                           // 0x0390(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UJackUMGMenu*>                        MenuStack;                                                // 0x03A0(0x0010) (ZeroConstructor)
	class UJackUMGMenu*                                NewOpenMenu;                                              // 0x03B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	TArray<class UJackUMGPage*>                        MenuPageList;                                             // 0x03C0(0x0010) (ZeroConstructor)
	class UJackUMGPage*                                PageInFocus;                                              // 0x03D0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UJackUMGPage*>                        MenuPageListAtException;                                  // 0x03D8(0x0010) (ZeroConstructor)
	class UJackUMGPage*                                PageInFocusAtException;                                   // 0x03E8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x10];                                      // 0x03F0(0x0010) MISSED OFFSET
	TArray<struct FJackUMGAnimSet>                     PresetAnimTable;                                          // 0x0400(0x0010) (ZeroConstructor)
	TArray<struct FLinearColor>                        PresetColorTable;                                         // 0x0410(0x0010) (ZeroConstructor)
	class UJackUMGWidgetBase*                          TargetSnapWidget;                                         // 0x0420(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGWidgetBase*                          InsertWidgetBase;                                         // 0x0428(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13[0x10];                                      // 0x0430(0x0010) MISSED OFFSET
	class UJackUMGAccessorCommon*                      AccessorCommon;                                           // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorSaveData*                    AccessorSaveData;                                         // 0x0448(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorItem*                        AccessorItem;                                             // 0x0450(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorMembers*                     AccessorMembers;                                          // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorShop*                        AccessorShop;                                             // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorSenreki*                     AccessorSenreki;                                          // 0x0468(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorFusigiKazi*                  AccessorFusigiKazi;                                       // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorMantan*                      AccessorMantan;                                           // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorBattle*                      AccessorBattle;                                           // 0x0480(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorSyuurenjou*                  AccessorSyuurenjou;                                       // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGAccessorCoordinate*                  AccessorCoordinate;                                       // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGHudWindows*                          HudWindows;                                               // 0x0498(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGSerifuWindowController*              SerifuWindowController;                                   // 0x04A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGSerifuWindowController*              TenNoKoeWindowController;                                 // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGSerifuWindowController*              BattleMessageController;                                  // 0x04B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGSerifuWindowController*              TokugiPanelMessageController;                             // 0x04B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGSerifuWindowController*              MovieMessageController;                                   // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGFukidasiWindowController*            FukidasiWindowController;                                 // 0x04C8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackTokugiPanelSetting*                     TokugiPanelSetting;                                       // 0x04D0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FJackUMGItemDataAllocator                   ItemDataAllocator;                                        // 0x04D8(0x0028)
	unsigned char                                      UnknownData14[0x34];                                      // 0x0500(0x0034) MISSED OFFSET
	float                                              DebugFixupWaitTime;                                       // 0x0534(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x20];                                      // 0x0538(0x0020) MISSED OFFSET
	TArray<class UJackUMGAsyncLoadUserWidgetResult*>   AsyncLoadUserWidgetResultList;                            // 0x0558(0x0010) (ZeroConstructor)
	TArray<class UJackUMGAsyncLoad*>                   AsyncLoadQueue;                                           // 0x0568(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData16[0x4];                                       // 0x0578(0x0004) MISSED OFFSET
	int                                                NumLoadTextureCached;                                     // 0x057C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackUMGLoadedCache>                 LoadedCacheList;                                          // 0x0580(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData17[0x8];                                       // 0x0590(0x0008) MISSED OFFSET
	TArray<struct FJackUMGLoadMenuAssetsInfo>          LoadMenuAssetsList;                                       // 0x0598(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData18[0x68];                                      // 0x05A8(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGManager");
		return ptr;
	}


	void WaitToEndWidget(class UJackUMGWidgetBase* WaitWidget, const struct FLatentActionInfo& LatentInfo);
	void WaitToEndMenu(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void WaitToAsyncFixup(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> InCharacterType, bool IsComplateMessage, const struct FLatentActionInfo& LatentInfo);
	void UpdateKeyRepeatSetting(const struct FJackUIKeyRepeatSetting& InSetting);
	void UpdateGoldWindow();
	void UnFocusUMGWidget();
	bool SyncLoadTexture(class UWidget* InImagePanel, bool bIsCached);
	void SyncLoadMaterial(class UWidget* InImagePanel);
	void SyncLoadBrush(TArray<class UJackUMGLoadBrushBase*> InLoadBrushArray);
	void StopUISound(class USoundBase* InSoundBase);
	class UJackUMGWidgetBase* StartStaffRoll();
	void ShowUMGWidgetByWidgetRef(class UJackUMGWidgetBase* Widget);
	void ShowSmallLocationTitle(bool bIsShow);
	void ShowSavingIndicator(TEnumAsByte<EJackUMGSaveingIndicator> InSavingType);
	void ShowMenu();
	void ShowLocationTitle(bool bIsShort);
	void ShowForceWalkingLoadingWidget();
	void ShowCutSceneSkipDialog(TEnumAsByte<EJackUMGCutSceneSkipDialog> InSCSkipType);
	class UJackUMGWidgetBase* ShowChapterTitle(const struct FName& TextID);
	void SetVisibilityBaisokuMode(ESlateVisibility InType);
	void SetVisibility(bool bIsVisible);
	void SetUMGPresetAnimSet(TEnumAsByte<EJackUMGPresetAnim> InPresetType, const struct FJackUMGAnimSet& InAnimSet);
	void SetUIDisableCamera(bool IsDisable, bool IsForceSet);
	void SetTitleFadeTime(float InTime);
	void SetTitleFadeColorWhite(bool InFlag);
	void SetTitleDelayTime(float InTime);
	void SetTheaterWindow(const struct FLinearColor& InStripeColor, float InStripeWidth);
	void SetSnapTargetWidget(class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType);
	void SetRenkeiHudAnime(TEnumAsByte<EJackUMGHudAnimationAction> InAnimeType, TArray<int>* InMemberList);
	void SetNamaeInputOffsetX(float InOffset);
	void SetModeSelectCameraWait(int InValue);
	void SetModeSelectCameraPlayWait(int InValue);
	void SetMessageSpeedSetting(TEnumAsByte<EJackSpeed> MessageSpeed);
	void SetMenuLayout(TEnumAsByte<EJackUMGMenuLayout> InLayoutType, TEnumAsByte<EJackUMGHudRegion> InRegionType, bool bIsForceMenuLayout);
	void SetMenuBackgroundType(TEnumAsByte<EJackUMGMenuBGMode> InMenuBGMode);
	void SetMenuBackgroundCaption(const struct FName& InTextId);
	void SetMaxUndilatedFrameTime();
	void SetMapHelpDisableColor(bool InFlag);
	void SetHudStatusEffect(TEnumAsByte<EJackPopupBalloon> InBalloonType, class UJackGameCharacter* InGameCharacter);
	void SetFieldActionFinishDelegate(const struct FScriptDelegate& InDelegate);
	void SetFadeWidget(class UJackUMGWidgetBase* Widget, const struct FName& WidgetName, int ZOrder, float FadeAlpha, const struct FLinearColor& FadeColor);
	void SetFacilityModeOfSerifuWindow(bool bEnd);
	void SetEnterButtonRevers(bool IsEnterReverse);
	void SetDisplayDebugSelectedItem();
	void SetDefaultUndilatedFrameTime();
	void SetCursorSave(TEnumAsByte<EJackCursorSaveScene> InSceneType, TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackCursorSaveTarget> InSaveTarget, const struct FName& InNameId, int InIndex);
	void SetCharacterImmediatelyBeforeLevelup(TEnumAsByte<EJackCharacter> InCharType);
	void SetActionNorimonoGauge(TEnumAsByte<EJackUMGNorimonoGaugeAction> InAction);
	void ResetKetteiReversFlag();
	void ReserveGC();
	void RemoveUMGWidgetByName(const struct FName& InWidgetName, bool bCloseChildPage, bool bRefreshFoucs, bool IsAcceptNullptr);
	void RemoveUMGWidget(class UJackUMGWidgetBase* Widget, bool bCloseChildPage, bool bRefreshFoucs, bool IsAcceptNullptr);
	void PlayUISoundWithParam(class USoundBase* InSoundBase, int MonophonicId, float InVolume, float InPitch, float InStartTime);
	void PlayUISound(class USoundBase* InSoundBase, int MonophonicId);
	void OpenWorldMapFromMenu();
	void OpenWorldMap(EJackWorldMapOpenReason OpenReason, bool bNoStack);
	void OpenToBeContinuedWidget();
	void OpenTheaterWindow(class UMaterialInterface* InMaterial);
	void OpenSibariplayStatus();
	void OpenOpeningMovieSubTitleWidget();
	void OpenNorimonoGaugeCalledNorimono(TEnumAsByte<EJackUMGNorimonoGauge> InType);
	void OpenNorimonoGauge(TEnumAsByte<EJackVehicle> InVehicleType, int InUmaGaugeCount);
	void OpenNakamaKaiwaButton();
	void OpenMiniMap();
	class UJackUMGWidgetBase* OpenMenu(TEnumAsByte<EJackUMGMenuId> InOpenMenuId, const struct FName& InNameId, int InValue, bool IsNoStack);
	void OpenMapHelpButton();
	void OpenLocalMap();
	void OpenHudStatus(bool IsFieldDamage);
	class UJackUMGHudFukidasiBattleScenario* OpenHudFukidasiBattleScenarioWindow(const struct FName& WindowName);
	void OpenHudBoukenStep(int InStepNumber, int InStepNumber2);
	void OpenGoldWindow(bool IsDisplayedInFront);
	void OpenCutSceneSkipDialog(const struct FScriptDelegate& InDelegate, TEnumAsByte<EJackUMGCutSceneSkipDialog> InSCSkipType, bool bInWithAutoFeed);
	void OpenBattleResultWindow(TEnumAsByte<EJackCharacter> InCharType, int InBeforeLevel, int InAfterLevel);
	void OpenBaisokuMode();
	class UUserWidget* LoadUMGUserWidgetWithClass();
	bool KeyDirectFlag(TEnumAsByte<EJackKeys> InKeyType);
	void JackUMGFinishedFieldActionDelegate__DelegateSignature(bool bIsCustomFlow);
	void JackUMGCSSkipDelegate__DelegateSignature(EJackUMGCutSceneSkipEvent InEventType, bool bInFlag);
	void JackOnUMGOpenMenuDelegate__DelegateSignature(TEnumAsByte<EJackUMGMenuId> InMenuId, const struct FName& InArgName, int InArgValue);
	void JackOnUMGManagerTitleBGMEndDelegate__DelegateSignature();
	bool IsWorldMapOpened();
	bool IsUMGWidgetFromName(const struct FName& InWidgetName);
	bool IsTitleFadeColorWhite();
	bool IsOpenPairingMenu();
	bool IsOpenedMenu();
	bool IsOpenedHudStatus();
	bool IsModernUIMode();
	bool IsMiniMapOpened();
	bool IsMenuHidden();
	bool IsMapHelpDisableColor();
	bool IsLocalMapOpened();
	bool IsLoadDataTrial();
	bool IsInitialized();
	bool IsDisplayModeSelectCameraInfo();
	bool IsDisplayDebugMenuList();
	bool IsDisplayDebugMenuInfo();
	bool IsDeluxMode();
	bool IsDebugMode();
	EJackUMGMenuLoadResult IsComplatedLoadMenu(TEnumAsByte<EJackUMGMenuId> InLoadMenuId);
	bool IsArasuziDebug();
	class UJackUMGWidgetBase* InsertUMGMenuWithSnapReusable(class UClass* InWidgetType, class UJackUMGWidgetBase* InReusableWidget, class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType, bool IsFocus);
	class UJackUMGWidgetBase* InsertUMGMenuWithSnap(class UClass* InWidgetType, class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType, bool IsFocus);
	void InputDelegate(struct FJackUIInputDelegateInfo* InDelegateInfo);
	void InitUMGPresetAnimSet(TArray<struct FJackUMGAnimSet> AnimSetArray);
	void InitializeXboxOnePairing();
	void HideUMGWidgetByWidgetRef(class UJackUMGWidgetBase* Widget);
	void HideMenu();
	void HideForceWalkingLoadingWidget();
	bool HasUMGWidgetInFocus();
	class UJackUMGWidgetBase* GetUMGWidgetInFocus();
	class UJackUMGWidgetBase* GetUMGWidgetFromName(const struct FName& InWidgetName);
	struct FLinearColor GetUMGPresetColor(TEnumAsByte<EJackUMGPresetColor> InColorType);
	struct FJackUMGAnimSet GetUMGPresetAnimSet(TEnumAsByte<EJackUMGPresetAnim> InPresetType);
	struct FText GetUMGMenuTextFromTextIdInList(const struct FName& InMenuTextId, bool IsList);
	struct FText GetUMGMenuTextFromTextId(const struct FName& MenuTextId);
	struct FString GetUMGMenuStringFromTextId(const struct FName& MenuTextId);
	class UJackTokugiPanelSetting* GetTokugiPanelSetting();
	class UJackUMGSerifuWindowController* GetTokugiPanelMessageController();
	float GetTitleFadeTime();
	float GetTitleDelayTime();
	class UJackUMGSerifuWindowController* GetTenNoKoeWindowController();
	struct FLinearColor GetSyougouWindowColor(TEnumAsByte<EJackUMGSyougouColor> InSyougouType);
	class UJackUMGSoundSet* GetSoundSet();
	class UJackUMGSerifuWindowController* GetSerifuWindowController();
	struct FText GetRealText(float InValue, int InFig, const struct FName& InUnitTextId, bool InChar, bool IsComma, bool IsSign, bool Is2Byte);
	class UJackUMGWidgetBase* GetPrevPageWidget(class UJackUMGWidgetBase* InWidgetBase);
	TEnumAsByte<EJackUMGMenuId> GetOpenMenuId();
	struct FJackUMGFontColor GetNameFontColor(TEnumAsByte<EJackUMGTextColorSet> InColorType);
	float GetNamaeInputOffsetX();
	class UJackUMGSerifuWindowController* GetMovieMessageController();
	TEnumAsByte<EJackSpeed> GetMessageSpeedSetting();
	struct FName GetMenuTextId(const struct FName& MenuTextId);
	class UJackUMGHudWindows* GetHudWindows();
	class AJackHUD* GetHUD();
	class UJackUMGFukidasiWindowController* GetFukidasiWindowController();
	struct FJackUMGFontColor GetFontColor(TEnumAsByte<EJackUMGTextColorSet> InColorType);
	struct FString GetDecMessageString(int InValue, int InFig, const struct FName& InUnitTextId, bool IsSign, bool IsComma, bool InZeroAlign);
	struct FText GetDecMenuText(int InValue, int InFig, const struct FName& InUnitTextId, bool IsSign, bool IsComma, bool InZeroAlign);
	struct FJackUMGCursorSaveTarget GetCursorSave(TEnumAsByte<EJackCursorSaveScene> InSceneType, TEnumAsByte<EJackCharacter> InCharType, TEnumAsByte<EJackCursorSaveTarget> InSaveTarget);
	class UTexture2D* GetCommonButtonIcon(TEnumAsByte<EJackKeys> InKeyType);
	int GetCloseMenuIndex();
	class UJackUMGSerifuWindowController* GetBattleMessageController();
	class UJackUMGWidgetBase* GetAsyncLoadedWidget();
	struct FText GetAsciiDecText2Value(int InValue, int InValueMax, int InFig, bool InChar, bool IsComma, bool IsSign);
	struct FText GetAsciiDecText(int InValue, int InFig, bool InChar, bool IsComma, bool IsSign);
	class UJackUMGAccessorSyuurenjou* GetAccessorSyuurenjou();
	class UJackUMGAccessorShop* GetAccessorShop();
	class UJackUMGAccessorSenreki* GetAccessorSenreki();
	class UJackUMGAccessorSaveData* GetAccessorSaveData();
	class UJackUMGAccessorMembers* GetAccessorMembers();
	class UJackUMGAccessorMantan* GetAccessorMantan();
	class UJackUMGAccessorItem* GetAccessorItem();
	class UJackUMGAccessorFusigiKazi* GetAccessorFusigiKazi();
	class UJackUMGAccessorCoordinate* GetAccessorCoordinate();
	class UJackUMGAccessorCommon* GetAccessorCommon();
	class UJackUMGAccessorBattle* GetAccessorBattle();
	struct FText Get2ByteDecText(int InValue, int InFig, bool InChar, bool IsComma, bool IsSign);
	void FocusUMGWidgetByWidgetRef(class UJackUMGWidgetBase* Widget);
	void FocusUMGWidgetByName(const struct FName& InWidgetName);
	void FinishedFieldAction(bool bIsCustomFlow);
	void EndBGM();
	void DoRuraAction(class UObject* WorldContextObject, TEnumAsByte<EJackRuraPurpose> InPurpose, const struct FName& InJumpTag, TEnumAsByte<EJackItem_Bag> InBagType, int IndexInBag, TEnumAsByte<EJackCharacter> InCharaType);
	void DoFieldAction(const struct FScriptDelegate& InDelegate);
	void DoCutSceneSkipDialogDelegate(EJackUMGCutSceneSkipEvent InEventType, bool bInFlag);
	void DisplayUIEventLog(bool IsShow);
	void DisplayPressedKeyLog(bool IsShow);
	void DisplayModeSelectCameraInfo();
	void DefaultKeyRepeatSetting();
	void DebugFunction(int InDebugValue, const struct FString& InDebugText);
	class UJackUMGLoadBrushBase* CreateLoadTexture(class UWidget* InImagePanel);
	class UJackUMGLoadBrushBase* CreateLoadMaterial(class UWidget* InImagePanel);
	TEnumAsByte<EJackKeys> ConvertKeyEventVoiceDrama(TEnumAsByte<EJackKeys> InKeyType, TEnumAsByte<EJackUMGVoiceDramaMode> InMode);
	TEnumAsByte<EJackKeys> ConvertKeyEventCircleCrossButton(TEnumAsByte<EJackKeys> InKeyType);
	void CompletedMenuLatent();
	void ComplateFixupMessage();
	void CloseWorldMap();
	void CloseTheaterWindow();
	void CloseSibariplayStatus();
	void CloseNorimonoGauge();
	void CloseNakamaKaiwaButton();
	void CloseMiniMap(bool bRemoveWidget, bool bIsForceRemove);
	void CloseMenu(bool IsCompleteByDestructed);
	void CloseMapHelpButton();
	void CloseLocalMap();
	void CloseHudStatusNoAnimation();
	void CloseHudStatus();
	void CloseHudFukidasiBattleScenarioWindow(const struct FName& WindowName);
	void CloseHudBoukenStep();
	void CloseGoldWindow();
	void CloseGamerTagMenu();
	void CloseCutSceneSkipDialog();
	void CloseBattleResultWindow();
	void CloseBaisokuMode();
	void CloseAllMenu(bool IsCompleteByDestructed);
	int ClearLoadedMenuAssets(TEnumAsByte<EJackUMGMenuId> InLoadMenuId);
	void ClearKeyStatus();
	struct FName CheckEquipment(TEnumAsByte<EJackCharacter> InCharType, int InIndexInBag, TEnumAsByte<EJackEquipmentRegion> InRegion);
	void CancelUISound();
	void CancelAsyncUMGUserWidget(class UObject* Target);
	void CancelASyncLoad(int InLoadUniqueId);
	void AsyncUMGUserWidgetWithClass(class UObject* Target, const struct FLatentActionInfo& LatentInfo, class UJackUMGAsyncLoadUserWidgetResult** Result);
	void AsyncUMGRootWidgetWithClass(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void AsyncUMGOnUserWidgetLoadCompletion(int InResultCode, class UObject* InLoadObject, class UJackUMGAsyncLoad* InLoadInfo);
	void AsyncUMGOnRootWidgetLoadCompletion(int InResultCode, class UObject* InLoadObject, class UJackUMGAsyncLoad* InLoadInfo);
	void AsyncUMGOnMenuWidgetLoadCompletion(int InResultCode, class UObject* InLoadObject, class UJackUMGAsyncLoad* InLoadInfo);
	int AsyncLoadTexture(const struct FScriptDelegate& InComprateDelegate, bool bIsCached);
	EJackUMGMenuLoadResult AsyncLoadMenu(TEnumAsByte<EJackUMGMenuId> InLoadMenuId);
	class UJackUMGWidgetBase* AddUMGMenuWithSnapReusable(class UClass* InWidgetType, class UJackUMGWidgetBase* InReusableWidget, class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType, bool IsFocus);
	class UJackUMGWidgetBase* AddUMGMenuWithSnap(class UClass* InWidgetType, class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType, bool IsFocus);
	class UJackUMGWidgetBase* AddUMGMenuWidgetIfNotGet(const struct FName& InWidgetName, class UClass* InWidgetType, class UJackUMGWidgetBase* InTargetWidget, TEnumAsByte<EJackUMGSnapType> InSnapType, bool IsFocus);
	class UJackUMGWidgetBase* AddUMGConnectWidgetWithClass(class UClass* WidgetType, TEnumAsByte<EJackUMGWidgetConnectTarget> InConnectTarget, bool IsNewPage, bool IsFocus);
};


// Class JackGame.JackUMGAsyncLoadUserWidgetResult
// 0x0010 (0x0048 - 0x0038)
class UJackUMGAsyncLoadUserWidgetResult : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UUserWidget*                                 LoadedWidget;                                             // 0x0040(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGAsyncLoadUserWidgetResult");
		return ptr;
	}

};


// Class JackGame.JackUMGMapResourceRequester
// 0x00B8 (0x00F0 - 0x0038)
class UJackUMGMapResourceRequester : public UObject
{
public:
	int                                                RequesterID;                                              // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackMapResourceLoadChannel                        Channel;                                                  // 0x003C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FName                                       MapVolumeID;                                              // 0x0040(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIndependent;                                             // 0x0048(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UJackUMGMapFloorInfo*                        FloorInfo;                                                // 0x0050(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FScriptDelegate>                     AsyncLoadDelegateList;                                    // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x80];                                      // 0x0068(0x0080) MISSED OFFSET
	class UTexture2D*                                  DynamicTextureForJourneyTexture;                          // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapResourceRequester");
		return ptr;
	}


	bool IsValid();
};


// Class JackGame.JackUMGMapResourceRequesterSet
// 0x0050 (0x0088 - 0x0038)
class UJackUMGMapResourceRequesterSet : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	TArray<class UJackUMGMapResourceRequester*>        RequesterList;                                            // 0x0040(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0050(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapResourceRequesterSet");
		return ptr;
	}

};


// Class JackGame.JackUMGMapDelegateButtonPayload
// 0x0008 (0x0040 - 0x0038)
class UJackUMGMapDelegateButtonPayload : public UObject
{
public:
	TEnumAsByte<EJackKeys>                             Button;                                                   // 0x0038(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bPressed;                                                 // 0x0039(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapDelegateButtonPayload");
		return ptr;
	}

};


// Class JackGame.JackUMGMapFloorInfo
// 0x0090 (0x00C8 - 0x0038)
class UJackUMGMapFloorInfo : public UObject
{
public:
	TArray<EJackUMGMapResourceType>                    AvailableResources;                                       // 0x0038(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	bool                                               bLoadFinished;                                            // 0x0048(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FName                                       MapId;                                                    // 0x0050(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       MapVolumeID;                                              // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentMapVolumeID;                                        // 0x0060(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     WorldMapTitle;                                            // 0x0068(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     MLocationTitle;                                           // 0x0078(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     SLocationTitle;                                           // 0x0088(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UTexture2D*                                  MapOpenTexture;                                           // 0x0098(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MapMaskTexture;                                           // 0x00A0(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  MiniMapTexture;                                           // 0x00A8(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  JourneyTexture;                                           // 0x00B0(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      MapTextWidgetClass;                                       // 0x00B8(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackMapPCMarkerDisplayMethod                      PCMarkerDisplayMethod;                                    // 0x00C0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackMapFieldType                                  FieldType;                                                // 0x00C1(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackFloorLevel                                    FloorLevel;                                               // 0x00C2(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EJackFloorArea                                     FloorArea;                                                // 0x00C3(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapFloorInfo");
		return ptr;
	}


	void SetPCMarkerDisplayMethod(EJackMapPCMarkerDisplayMethod DisplayMethod);
};


// Class JackGame.JackUMGMapController
// 0x02E0 (0x0318 - 0x0038)
class UJackUMGMapController : public UObject
{
public:
	struct FScriptMulticastDelegate                    MapSymbolVisibleChanged;                                  // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    BoukenGuideVisibleChanged;                                // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FName>                               SeaMapIDList;                                             // 0x0058(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               SkyMapIDList;                                             // 0x0068(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EJackKeys>                             MapSymbolOnOffButton;                                     // 0x0078(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackKeys>                             BoukenGuideOnOffbutton;                                   // 0x0079(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x007A(0x0006) MISSED OFFSET
	TArray<EJackWorldMapState>                         BoukenGuideToggleVisibilityDisableStates;                 // 0x0080(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<EJackWorldMapState>                         MapSymbolToggleVisibilityDisableStates;                   // 0x0090(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UTexture2D*                                  DefaultMapMaskTexture;                                    // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  TranceparentTexture;                                      // 0x00A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  CensoredMapTexture;                                       // 0x00B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMapCameraCullingEnabled;                                 // 0x00B8(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B9(0x0003) MISSED OFFSET
	float                                              WaitTimeForLoadResource;                                  // 0x00BC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NowLoadingDisplayingThreshold;                            // 0x00C0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EJackUIMapZoomState                                ZoomState;                                                // 0x00C4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIconZoomEnabled;                                         // 0x00C5(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00C6(0x0002) MISSED OFFSET
	float                                              IconZoomFactorMin;                                        // 0x00C8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IconZoomFactorMax;                                        // 0x00CC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsScrollAdjustmentByFrameRate;                           // 0x00D0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<class UJackUMGMapSymbolInfoBase*>           MapSymbolInfoList;                                        // 0x00D8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, EditConst)
	TArray<class UJackUMGMapTextImageSymbolInfo*>      MapTextImageSymbolInfoList;                               // 0x00E8(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class UJackUMGMiniMapWidget>        MiniMapWidget;                                            // 0x00F8(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UJackUMGWorldMapWidget>       LocalMapWidget;                                           // 0x0100(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UJackUMGWorldMapWidget>       WorldMapWidget;                                           // 0x0108(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TWeakObjectPtr<class UJackUMGWidgetBase>           BoukenGuideWidget;                                        // 0x0110(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	int                                                JourneyTextureResolution;                                 // 0x0118(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	TArray<int>                                        PointerTargetList;                                        // 0x0120(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	unsigned char                                      UnknownData05[0x50];                                      // 0x0130(0x0050) MISSED OFFSET
	TArray<class UJackUMGMapFloorInfo*>                MapFloorInfoList;                                         // 0x0180(0x0010) (ZeroConstructor)
	class UJackUMGMapDelegateButtonPayload*            MapSymbolVisibleDelegatePayload;                          // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGMapDelegateButtonPayload*            BoukenGuideVisibleDelegatePayload;                        // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UJackMapKiraAccessorBase*>            KiraList;                                                 // 0x01A0(0x0010) (ZeroConstructor)
	TArray<struct FJackTextureRenderTargetDict>        RenderTargetList;                                         // 0x01B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x48];                                      // 0x01C0(0x0048) MISSED OFFSET
	TArray<class UJackUMGMapResourceRequesterSet*>     RequesterSetList;                                         // 0x0208(0x0010) (ZeroConstructor)
	class UTexture2D*                                  MapTraceModeBaseTexture;                                  // 0x0218(0x0008) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMapTraceMode;                                            // 0x0220(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bUseMapTraceBaseTexture;                                  // 0x0221(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0222(0x0002) MISSED OFFSET
	float                                              MapTraceModeDiameter;                                     // 0x0224(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawJourneyTextureOnly;                                  // 0x0228(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bMapSymbolDebugMode;                                      // 0x0229(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugIgnoreKiraPickedUpFlag;                             // 0x022A(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bForceCenteringMiniMap;                                   // 0x022B(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0xEC];                                      // 0x022C(0x00EC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapController");
		return ptr;
	}


	struct FVector2D TransformToWorldMapViewPosition(class UJackUMGWorldMapWidget* WorldMapWidget, const struct FVector& WorldPosition, float Scale);
	bool TestsWorldMapStates(TArray<EJackWorldMapState> WorltMapStates, bool bAND_Operation);
	bool TestsWorldMapState(EJackWorldMapState WorldMapState);
	void SortMapSymbolInfoListByDrawPriority(bool bDescending);
	void SetWorldMapState(EJackWorldMapState WorldMapState);
	void SetWorldMapOpenReason(EJackWorldMapOpenReason OpenReason, bool bForceSet);
	void SetMiniMapCamera(class ACameraActor* InMiniMapCamera, const struct FName& InMapId);
	void SetMapVisitFlagEnabled(bool bEnabled);
	void SetMapSymbolVisible(bool bVisible);
	void SetFloorWithVolumeID(const struct FName& InMapVolumeID, bool bNotChangeSLocation);
	void SetBoukenGuideVisible(bool bVisible);
	int RequestFloorInfoForVolumeID(const struct FName& MapVolumeID, TArray<EJackUMGMapResourceType> ResourceList, EJackMapResourceLoadChannel Channel, bool bIndependent, const struct FScriptDelegate& Delegate);
	int RequestFloorInfo(int RelativeLevel, TArray<EJackUMGMapResourceType> ResourceList, EJackMapResourceLoadChannel Channel, bool bIndependent, const struct FScriptDelegate& Delegate);
	void RemovePointerTargetMapSymbol(int UniqueNo);
	void OnUpdate(float DeltaTime, bool bAssetLoadingNow);
	void OnRemovePointerTargetMapSymbol(int UniqueNo);
	void OnEmptyPointerTargets();
	void OnAddPointerTargetMapSymbol(int UniqueNo);
	bool STATIC_IsVehicleSymbol(EJackMapSymbol InType);
	bool IsValidCurrentSLocationID();
	bool IsValidCurrentMapInfo();
	bool IsSkyMap();
	bool IsShipAvailable();
	bool IsSeaOrSkyMapVolumeID(const struct FName& MapVolumeID);
	bool IsSeaOrSkyMap();
	bool IsSeaMap();
	bool IsPermittedToOpenMiniMap();
	bool IsMapTextImageItem(class UWidget* Widget);
	bool IsMapSymbolVisibilityToggleEnabled();
	bool STATIC_IsKiraSymbol(EJackMapSymbol InType);
	bool IsDisplayingWorldMap();
	bool IsCurrentMapUnleashed();
	bool IsCurrentFloorSymbol(class UJackUMGMapSymbolInfoBase* Symbol, bool bForMiniMap);
	bool IsBoukenGuideVisibilityToggleEnabled();
	void InvalidateResourceRequester(int RequesterID);
	struct FString GetWorldMapTitle(const struct FName& MapVolumeID, bool bIgnoreOpenFlag);
	EJackWorldMapOpenReason GetWorldMapOpenReason();
	struct FString GetSLocationTitle(const struct FName& MapVolumeID, bool bIgnoreOpenFlag);
	struct FName GetSLocationMapVolumeID();
	TArray<int> GetPointerTargetList();
	struct FName GetParentMapVolumeID();
	struct FString GetMLocationTitle(const struct FName& MapVolumeID, bool bIgnoreOpenFlag);
	float GetMiniMapZoomRate();
	TArray<class UJackMiniMapTargetComponent*> GetMiniMapTargetComponentList();
	float GetMiniMapDisplayDiameter();
	class UJackMiniMapCameraComponent* STATIC_GetMiniMapCameraComponent(class ACameraActor* MiniMapCamera);
	struct FName GetMapVolumeID();
	TArray<class UJackUMGMapTextImageSymbolInfo*> GetMapTextImageSymbolInfoList();
	bool GetMapSymbolVisible();
	TArray<EJackMapSymbol> GetMapSymbolTypeListForMapMode(EJackWorldMapState WorldMapState);
	TArray<class UJackUMGMapSymbolInfoBase*> GetMapSymbolInfoList();
	struct FVector GetMapOrigin(bool bForMiniMap);
	struct FName GetMapID();
	TArray<struct FName> GetLinkedFloorMapVolumeIDList();
	TArray<class UJackUMGItemData*> GetKiraUMGItemDataList(bool bIgnoreHasPickedUpFlag);
	TArray<class UJackMapKiraAccessorBase*> GetKiraAccessorList();
	int GetFloorLevelCount();
	EJackFloorLevel GetFloorLevel();
	EJackFloorArea GetFloorArea();
	struct FString GetCurrentSLocationName();
	float GetCurrentMapZoomFactorMax();
	class UJackUMGMainMapOverlayWidgetBase* GetCurrentMapTextWidget();
	EJackMapFieldType GetCurrentMapFieldType();
	bool GetBoukenGuideVisible();
	TArray<EJackMapSymbol> STATIC_GetAllMapSymbolTypes();
	class UJackUMGMapResourceRequester* FindResourceRequester(int RequesterID);
	TArray<class UJackUMGMapSymbolInfoBase*> FindNearbyMapSymbol(const struct FVector& WorldPosition, float Distance);
	class UTexture2D* FindMapSymbolTexture(EJackMapSymbol Type);
	class UJackUMGMapSymbolInfoBase* FindMapSymbolInfo(int UniqueNo);
	TArray<class UJackUMGMapSymbolInfoBase*> FindAllMapSymbolInfo(TArray<EJackMapSymbol> MapSymbolTypes);
	bool ExistsFloor(int RelativeLevel, int* OutFloorKeyIndex);
	void EmptyPointerTargets();
	void EmptyPCFootmark();
	void EmptyMapTextImageSymbolInfo();
	void EmptyFloorInfo(bool bExceptsCurrentFloor);
	void CreateMapTextImageSymbolInfo(class UJackUMGMainMapOverlayWidgetBase* InMapTextWidget);
	void ClearWorldMapStates(TArray<EJackWorldMapState> WorltMapStates);
	void ClearWorldMapState(EJackWorldMapState WorldMapState);
	void ClearMiniMapCamera();
	struct FLinearColor CalcMapTextureCoordCenteringOnWorldPosition(const struct FVector& WorldPosition, float Scale, bool bForMiniMap);
	void AddPointerTargetMapSymbol(int UniqueNo);
};


// Class JackGame.JackUMGMapSymbolInfoBase
// 0x0018 (0x0050 - 0x0038)
class UJackUMGMapSymbolInfoBase : public UObject
{
public:
	bool                                               bEnabled;                                                 // 0x0038(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FJackNameTagDict>                    Tags;                                                     // 0x0040(0x0010) (Edit, BlueprintVisi, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapSymbolInfoBase");
		return ptr;
	}


	struct FName STATIC_Tag_NPCID();
	struct FName STATIC_Tag_None();
	void SetWorldPosition(const struct FVector& InPosition);
	void SetWorldMapDrawScale(float InScale);
	void SetWorldMapDrawOffset(const struct FVector2D& InOffset);
	void SetVisible(bool InVisible);
	void SetOpacity(float InOpacity);
	void SetMiniMapDrawScale(float InScale);
	void SetMiniMapDrawOffset(const struct FVector2D& InOffset);
	void SetMapSymbol(EJackMapSymbol InMapSymbol);
	void SetAngle();
	bool IsVisible();
	struct FVector GetWorldPosition();
	float GetWorldMapDrawScale();
	struct FVector2D GetWorldMapDrawOffset();
	int GetUniqueNo();
	float GetOpacity();
	float GetMiniMapDrawScale();
	struct FVector2D GetMiniMapDrawOffset();
	class UTexture2D* GetMapSymbolCustomTexture();
	struct FVector2D GetMapSymbolCustomSize();
	struct FVector2D GetMapSymbolCustomAlignment();
	EJackMapSymbol GetMapSymbol();
	EJackFloorLevel GetFloorLevel();
	EJackFloorArea GetFloorArea();
	float GetAngle();
	bool FindTag(const struct FName& InName, struct FJackNameTagDict* RefTag);
};


// Class JackGame.JackUMGMapSymbolInfo
// 0x0030 (0x0080 - 0x0050)
class UJackUMGMapSymbolInfo : public UJackUMGMapSymbolInfoBase
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0050(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapSymbolInfo");
		return ptr;
	}


	void SetWorldPosition(const struct FVector& InPosition);
	void SetWorldMapDrawScale(float InScale);
	void SetWorldMapDrawOffset(const struct FVector2D& InOffset);
	void SetOpacity(float InOpacity);
	void SetMiniMapDrawScale(float InScale);
	void SetMiniMapDrawOffset(const struct FVector2D& InOffset);
	void SetMapSymbol(EJackMapSymbol InSymbol);
	bool IsVisible();
	struct FVector GetWorldPosition();
	float GetWorldMapDrawScale();
	struct FVector2D GetWorldMapDrawOffset();
	float GetOpacity();
	float GetMiniMapDrawScale();
	struct FVector2D GetMiniMapDrawOffset();
	EJackMapSymbol GetMapSymbol();
};


// Class JackGame.JackUMGComponentBasedMapSymbolInfo
// 0x0010 (0x0060 - 0x0050)
class UJackUMGComponentBasedMapSymbolInfo : public UJackUMGMapSymbolInfoBase
{
public:
	TWeakObjectPtr<class UJackMiniMapTargetComponent>  MiniMapTargetComponent;                                   // 0x0050(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGComponentBasedMapSymbolInfo");
		return ptr;
	}


	void SetOpacity(float InOpacity);
	bool IsVisible();
	struct FVector GetWorldPosition();
	float GetWorldMapDrawScale();
	struct FVector2D GetWorldMapDrawOffset();
	int GetUniqueNo();
	float GetOpacity();
	float GetMiniMapDrawScale();
	struct FVector2D GetMiniMapDrawOffset();
	EJackMapSymbol GetMapSymbol();
	EJackFloorLevel GetFloorLevel();
	EJackFloorArea GetFloorArea();
};


// Class JackGame.JackUMGMapKiraSymbolInfo
// 0x0010 (0x0070 - 0x0060)
class UJackUMGMapKiraSymbolInfo : public UJackUMGComponentBasedMapSymbolInfo
{
public:
	bool                                               bDrawsPopCondition;                                       // 0x0060(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0061(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapKiraSymbolInfo");
		return ptr;
	}


	bool IsVisible();
};


// Class JackGame.JackUMGMapTextImageSymbolInfo
// 0x0018 (0x0068 - 0x0050)
class UJackUMGMapTextImageSymbolInfo : public UJackUMGMapSymbolInfoBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapTextImageSymbolInfo");
		return ptr;
	}


	void SetWorldPosition(const struct FVector& InPosition);
	bool IsVisible();
	struct FVector GetWorldPosition();
	float GetOpacity();
	class UTexture2D* GetMapSymbolCustomTexture();
	struct FVector2D GetMapSymbolCustomSize();
	struct FVector2D GetMapSymbolCustomAlignment();
	EJackMapSymbol GetMapSymbol();
	float GetAngle();
};


// Class JackGame.JackUMGMapTextItemBase
// 0x0028 (0x0398 - 0x0370)
class UJackUMGMapTextItemBase : public UJackUMGWidgetBase
{
public:
	struct FVector2D                                   ItemSize;                                                 // 0x0370(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	struct FName                                       MapVolumeID;                                              // 0x0378(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackMapTextItemControlMethod                      ControlMethod;                                            // 0x0380(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	struct FName                                       ConfigID;                                                 // 0x0388(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackGameFlagCategory>                 FlagCategory;                                             // 0x0390(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackGameFlagOperator                              FlagOperator;                                             // 0x0391(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackMapTextItemDisplayMethodInNeighborMapMode     DisplayMethodInNeighborMapMode;                           // 0x0392(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x0393(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapTextItemBase");
		return ptr;
	}


	void UpdateItemSize(const struct FVector2D& Size);
	void SetConditionalBeginDestroyEnabled(bool bEnabled);
	void SetBlinkEnabledBP(bool bEnabled);
	void SetBlinkEnabled(bool bEnabled);
	void SetBlinkAvailable(bool bAvaiable);
	bool IsBlinkEnabled();
	bool IsBlinkAvailable();
};


// Class JackGame.JackUMGMapTextImageItem
// 0x0090 (0x0428 - 0x0398)
class UJackUMGMapTextImageItem : public UJackUMGMapTextItemBase
{
public:
	struct FSlateBrush                                 ImageBrush;                                               // 0x0398(0x0078) (Edit, BlueprintVisi)
	bool                                               bIgnoreZoomScale;                                         // 0x0410(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	EJackMapTextItemDrawTarget                         DrawTarget;                                               // 0x0411(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0412(0x0006) MISSED OFFSET
	class UTexture2D*                                  BrushOriginalTexture;                                     // 0x0418(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0420(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapTextImageItem");
		return ptr;
	}


	class UTexture2D* GetImageTexture();
	float GetAngle();
};


// Class JackGame.JackUMGMapTextLocationNameItem
// 0x0038 (0x03D0 - 0x0398)
class UJackUMGMapTextLocationNameItem : public UJackUMGMapTextItemBase
{
public:
	struct FText                                       CaptionText;                                              // 0x0398(0x0018) (Edit, BlueprintVisi)
	TEnumAsByte<ETextJustify>                          TextJustification;                                        // 0x03B0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET
	struct FText                                       PreviewText;                                              // 0x03B8(0x0018) (Edit, BlueprintVisi)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMapTextLocationNameItem");
		return ptr;
	}

};


// Class JackGame.JackUMGMedalStampWindow
// 0x0030 (0x0430 - 0x0400)
class UJackUMGMedalStampWindow : public UJackUMGWindowBase
{
public:
	float                                              AnimMarginOfFirstStamp;                                   // 0x0400(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimIntervalOfShowStamp;                                  // 0x0404(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimIntervalOfShowLargeStamp;                             // 0x0408(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimIntervalOfShowStampAndShowTreasureBox;                // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimIntervalOfShowTreasureBoxAndShowItemGetMessage;       // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimTimeOfHideTreasureBox;                                // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimTimeOfHideBottomInfo;                                 // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimIntervalOfCompleteMessageAndShowCompleteStamp;        // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimMarginOfShowCompleteStamp;                            // 0x0420(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimIntervalOfHidePageAndShowPage;                        // 0x0424(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimTimeOfShowNextPage;                                   // 0x0428(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AnimMarginOfFinishOfStamp;                                // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMedalStampWindow");
		return ptr;
	}


	class UTexture2D* GetItemIconTexture(const struct FName& ItemID);
	TArray<struct FJackUMGMedalStampAnimData> ExecuteMedalStamp(TEnumAsByte<EJackMedal_Shop> ShopType);
};


// Class JackGame.JackUMGMemberChange
// 0x0078 (0x0478 - 0x0400)
class UJackUMGMemberChange : public UJackUMGWindowBase
{
public:
	struct FScriptMulticastDelegate                    EndReloadDelegate;                                        // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0410(0x0008) MISSED OFFSET
	TArray<class UJackUMGItemData*>                    ItemDataList;                                             // 0x0418(0x0010) (BlueprintVisi, ZeroConstructor)
	int                                                SelectedFirst;                                            // 0x0428(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                SelectedSecond;                                           // 0x042C(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UJackUMGPageController*                      PageControler;                                            // 0x0430(0x0008) (BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<unsigned char>                              InitialMemberList;                                        // 0x0438(0x0010) (BlueprintVisi, ZeroConstructor)
	struct FName                                       SelectedMemberMain;                                       // 0x0448(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       SelectedMemberSub;                                        // 0x0450(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               StartResourceReload;                                      // 0x0458(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1F];                                      // 0x0459(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMemberChange");
		return ptr;
	}


	void SetMemberPanelPosition();
	void SetItemLists(class UCanvasPanel* InItemListCanvas, class UJackUMGItemBase* InItemBase, class UCanvasPanel* InFaceCanvasPanelList);
	void SetItemDataList(TArray<class UJackUMGItemData*> InItemDataList);
	void RestoreMember();
	bool MoveCursor(int Direction, const struct FJackKeyStatus& InKey);
	void JackUMGEndReloadDelegate__DelegateSignature();
	bool IsEndResourceReload();
	bool IsChangedMember();
	bool IsAllDeadAfterMemberChange(int InSelected1st, int InSelected2nd);
	void InitWindowMemberChange(class UCanvasPanel* ItemListCanvas, class UJackUMGItemBase* InItemBase, class UCanvasPanel* FaceCanvasPanelList, int ZOrder);
	void InitializeMenber();
	int GetMemberNumber();
	void ClearItemDataList();
	void ChangeMember();
	bool ChangeCharacterResource();
	void AddStaticItemList(class UJackUMGItemBase* InItemBase);
};


// Class JackGame.JackUMGMenu
// 0x0028 (0x0060 - 0x0038)
class UJackUMGMenu : public UObject
{
public:
	class UJackUMGWidgetBase*                          WidgetBase;                                               // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMenu");
		return ptr;
	}

};


// Class JackGame.JackUMGMeosiSlotDirection
// 0x0020 (0x01F0 - 0x01D0)
class UJackUMGMeosiSlotDirection : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01D0(0x0010) MISSED OFFSET
	class UWidgetAnimation*                            CurrentAnimation;                                         // 0x01E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMeosiSlotDirection");
		return ptr;
	}


	void RequestWidgetAnimationStop();
	void RequestWidgetAnimationPlay(class UWidgetAnimation* InAnimation, bool InLoop);
	void CancelWidgetAnimation(bool InCurrentAnimationStop);
};


// Class JackGame.JackUMGMeosiSlotMessageWindow
// 0x0008 (0x0378 - 0x0370)
class UJackUMGMeosiSlotMessageWindow : public UJackUMGWidgetBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0370(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMeosiSlotMessageWindow");
		return ptr;
	}


	void SetupTextBlock(class UTextBlock* TextBlock);
	void SetMessageTextAtTextID(const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args);
	void SetMessageText(const struct FString& MessageText, TArray<struct FJackMessageArgumentData> Args);
};


// Class JackGame.JackUMGMiniMapWidget
// 0x0128 (0x0498 - 0x0370)
class UJackUMGMiniMapWidget : public UJackUMGWidgetBase
{
public:
	float                                              SeaSkyWarpThresholdLength;                                // 0x0370(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class UJackUMGMapController>        MapController;                                            // 0x0374(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   MapSymbolRenderTextureSize;                               // 0x037C(0x0008) (Edit, BlueprintVisi, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	class UCanvasRenderTarget2D*                       MapSymbolRenderTarget;                                    // 0x0388(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<EJackMapSymbol>                             MapSymbolTypesToDisplay;                                  // 0x0390(0x0010) (Edit, BlueprintVisi, ZeroConstructor)
	float                                              MapSymbolScale;                                           // 0x03A0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PCFootmarkDisplayCount;                                   // 0x03A4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PCFootmarkDisplayDistance;                                // 0x03A8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PCFootmarkDisplayIntervalPixel;                           // 0x03AC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 PCFootmarkOpacityCurve;                                   // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UJackUMGMapSymbolInfo*>               PCFootmarkSymbolList;                                     // 0x03B8(0x0010) (Edit, BlueprintVisi, ZeroConstructor, EditConst)
	EJackFloorLevel                                    FloorLevel;                                               // 0x03C8(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	float                                              NowLoadingRequestTransitionWait;                          // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MiniMapFlickerPreventionTime;                             // 0x03D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x03D4(0x000C) MISSED OFFSET
	struct FScriptDelegate                             LoadResourceHookDelegate;                                 // 0x03E0(0x0014) (ZeroConstructor, InstancedReference)
	struct FScriptDelegate                             LoadResourceDelegate;                                     // 0x03F0(0x0014) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData03[0x98];                                      // 0x0400(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGMiniMapWidget");
		return ptr;
	}


	bool ShouldDisplayNowLoading();
	void SetNowLoading(bool bNowLoading);
	void ReleaseMiniMapLoadSymbol();
	void OnDrawMapSymbolRenderTarget(class UCanvas* Canvas, int Width, int Height);
	void OnConstructWidget();
	void OnChangeNowLoadingDisplay(bool bDisplay);
	void OnChangeFloor(EJackFloorLevel InFloorLevel, EJackFloorArea InFlooorArea);
	void LoadTextureFromSymbol(class UJackUMGMapSymbolInfoBase* InSymbol);
	void LoadMiniMapSymbolTesture(bool bInLoadingFlag);
	bool IsNowLoading();
	bool IsInsideMiniMapDisplayRange(class UJackUMGMapSymbolInfoBase* InSymbol);
	struct FVector2D GetMiniMapDrawSize();
	class UJackUMGMainMapOverlayWidgetBase* GetMapTextWidget();
};


// Class JackGame.JackUMGModeSelect
// 0x0040 (0x0470 - 0x0430)
class UJackUMGModeSelect : public UJackUMGBrowserBase
{
public:
	class UManaComponent*                              ManaComponent3d;                                          // 0x0430(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UManaComponent*                              ManaComponent2d;                                          // 0x0438(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMaterial*                                   MovieMaterial3d;                                          // 0x0440(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   MovieMaterial2d;                                          // 0x0448(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UManaTexture*                                ManaTexture3d;                                            // 0x0450(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UManaTexture*                                ManaTexture2d;                                            // 0x0458(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGModeSelect");
		return ptr;
	}


	void SetValidMovieData(bool bValid);
	void SetModeSelectGotoState(TEnumAsByte<EJackUMGModeSelectGotoState> InState);
	void SetMediaSource();
	void SetInitialFadeValue();
	void SelectMovie(bool IsSelected2d);
	bool IsValidMovieData();
	bool IsReady2D3DMovie();
	TEnumAsByte<EJackUMGModeSelectGotoState> GetModeSelectGotoState();
	void FinishManaComponent();
};


// Class JackGame.JackUMGName
// 0x00D8 (0x04D8 - 0x0400)
class UJackUMGName : public UJackUMGWindowBase
{
public:
	TArray<class UJackUMGItemBase*>                    SelectNameList;                                           // 0x0400(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	bool                                               bEndOfNameInput;                                          // 0x0410(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0411(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    EndDelegate;                                              // 0x0418(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FlashUnderBarDelegate;                                    // 0x0428(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    HiddenUnderBarDelegate;                                   // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ModoruDelegate;                                           // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     InputName;                                                // 0x0458(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	int                                                InputNameMaxAsia;                                         // 0x0468(0x0004) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6C];                                      // 0x046C(0x006C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGName");
		return ptr;
	}


	TEnumAsByte<EJackUMGNamePlatform> SwitchPlatform();
	void SetFukkatuNoJumonString(const struct FString& inString);
	void SetCheatFukkatuNoJumon(const struct FString& InFukkatuNoJumon);
	void RestoreName();
	void OpenIMEAsia();
	void NamaeMojiCheckKorea(const struct FString& InInputName);
	void NamaeMojiCheckHant(const struct FString& InInputName, const struct FSlateFontInfo& InFontInfo);
	void NamaeMojiCheckHans(const struct FString& InInputName);
	void NamaeMojiCheckAsia(const struct FString& InInputName, const struct FSlateFontInfo& InFontInfo);
	void JackUMGNameModoruDelegate__DelegateSignature();
	void JackUMGNameHiddenUnderBarDelegate__DelegateSignature();
	void JackUMGNameFlashUnderBarDelegate__DelegateSignature();
	void JackUMGNameEndDelegate__DelegateSignature();
	bool IsInputNameEmpty();
	bool IsInNameBlackSquare();
	void InitNameDisplay(class UCanvasPanel* NameListCanvas);
	void InitNamaeMojiFukkatu();
	void InitNamaeMoji();
	struct FString GetUnderBarText();
	void GetInputNameAsia();
	void CutSpaceFromTop();
	void ClearInputName();
	bool CheckNGWord();
	bool CheckInputNameZeroAsia();
	bool CheckInputNameMaxAsia();
	bool CheckFukkatuNoJumon();
	struct FString CanUseFont(const struct FSlateFontInfo& InFontInfo);
};


// Class JackGame.JackUMGNeighborMapInfo
// 0x0020 (0x00A8 - 0x0088)
class UJackUMGNeighborMapInfo : public UJackUMGItemData
{
public:
	bool                                               bEnabled;                                                 // 0x0088(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	struct FName                                       MapVolumeID;                                              // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     DisplayLocationName;                                      // 0x0098(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGNeighborMapInfo");
		return ptr;
	}

};


// Class JackGame.JackUMGNorimonoGauge
// 0x0050 (0x03C0 - 0x0370)
class UJackUMGNorimonoGauge : public UJackUMGWidgetBase
{
public:
	struct FScriptMulticastDelegate                    NorimonoGaugeActionDelegate;                              // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChargeHorseDelegate;                                      // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    NorimonoSetAutoRunDelegate;                               // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x03A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGNorimonoGauge");
		return ptr;
	}


	void SetNorimonoMode(const struct FName& InMode);
	void ResetSpecialAutoRunFlag();
	void JackUMGNorimonoGaugeActionDelegate__DelegateSignature(TEnumAsByte<EJackUMGNorimonoGaugeAction> Action);
	void JackUMGNorimonoAutoRunSetDelegate__DelegateSignature(const struct FName& Mode);
	void JackUMGChargeHorseDelegate__DelegateSignature(int Number, float Rate);
	void InitNorimonoPanel(TArray<class UJackUMGWidgetBase*> InNorimonoPanelList);
	struct FName GetNorimonoMode();
};


// Class JackGame.JackUMGPairingBase
// 0x0028 (0x0398 - 0x0370)
class UJackUMGPairingBase : public UJackUMGWidgetBase
{
public:
	struct FScriptMulticastDelegate                    PairingInputDelegate;                                     // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PairingInputXDelegate;                                    // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPairingBase");
		return ptr;
	}


	void RestartGame();
	void JackUMGPairingInputXDelegate__DelegateSignature(bool IsNeedPairing);
	void JackUMGPairingInputDelegate__DelegateSignature(bool IsNeedPairing);
	struct FString GetGameDisplayNameXbox();
};


// Class JackGame.JackUMGPairingInitialize
// 0x0000 (0x0398 - 0x0398)
class UJackUMGPairingInitialize : public UJackUMGPairingBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPairingInitialize");
		return ptr;
	}


	struct FText GetInitialPairingTextId();
};


// Class JackGame.JackUMGPairingProfile
// 0x0000 (0x0398 - 0x0398)
class UJackUMGPairingProfile : public UJackUMGPairingBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPairingProfile");
		return ptr;
	}


	void OpenRemoveControllerMenuDebug();
	void OpenPicker();
};


// Class JackGame.JackUMGPairingController
// 0x0000 (0x0398 - 0x0398)
class UJackUMGPairingController : public UJackUMGPairingBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPairingController");
		return ptr;
	}

};


// Class JackGame.JackUMGPairingUser
// 0x0000 (0x0398 - 0x0398)
class UJackUMGPairingUser : public UJackUMGPairingBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGPairingUser");
		return ptr;
	}


	struct FText GetRemovedUserTextId();
	struct FText GetRemovedUserCaptionTextId();
};


// Class JackGame.JackUMGQuestClearBase
// 0x0008 (0x0378 - 0x0370)
class UJackUMGQuestClearBase : public UJackUMGWidgetBase
{
public:
	bool                                               bFinishedInAnimation;                                     // 0x0370(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bFinishedOutAnimation;                                    // 0x0371(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0372(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGQuestClearBase");
		return ptr;
	}


	void CallSetData(const struct FName& QuestId, bool bFromOrder);
	void CallPlayOpenAnimation();
	void CallPlayCloseAnimation();
	bool CallIsFinishedOpenAnimation();
	bool CallIsFinishedCloseAnimation();
};


// Class JackGame.JackUMGSerifuWindow
// 0x01D0 (0x0540 - 0x0370)
class UJackUMGSerifuWindow : public UJackUMGWidgetBase
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0370(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    JackUMGSerifuWindowEvent;                                 // 0x03B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x80];                                      // 0x03C0(0x0080) MISSED OFFSET
	class UCanvasPanel*                                ContentCanvasPanel;                                       // 0x0440(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UTextBlock*>                          TextLabelList;                                            // 0x0448(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x40];                                      // 0x0458(0x0040) MISSED OFFSET
	class UUserWidget*                                 AdditionalWidget;                                         // 0x0498(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04A0(0x0004) MISSED OFFSET
	int                                                EnableTextLabelCount;                                     // 0x04A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultRootPanelPosY;                                     // 0x04A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TextLabelRootPositionY;                                   // 0x04AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TextLabelOffsetY;                                         // 0x04B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RubyLabelRootPositionY;                                   // 0x04B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RubyLabelOffsetY;                                         // 0x04B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsCenteringMode;                                         // 0x04BC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x04BD(0x0003) MISSED OFFSET
	float                                              CharacterSizeX;                                           // 0x04C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaximumLengthOfTextLine;                                  // 0x04C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TextLineLengthMax;                                        // 0x04C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x14];                                      // 0x04CC(0x0014) MISSED OFFSET
	struct FJackSerifuWindowMoveTextLabelInfo          MoveTextLabelInfo1;                                       // 0x04E0(0x0010) (Edit, DisableEditOnInstance)
	struct FJackSerifuWindowMoveTextLabelInfo          MoveTextLabelInfo2;                                       // 0x04F0(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0500(0x0010) MISSED OFFSET
	struct FJackSerifuWindowShakeWindowInfo            ShakeSmallInfo;                                           // 0x0510(0x0010) (Edit, DisableEditOnInstance)
	struct FJackSerifuWindowShakeWindowInfo            ShakeBigInfo;                                             // 0x0520(0x0010) (Edit, DisableEditOnInstance)
	bool                                               bDisableExcessTimeOfMoveLabel;                            // 0x0530(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0xF];                                       // 0x0531(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSerifuWindow");
		return ptr;
	}


	void SetVisibleBackgroundImage(bool bValue);
	void SetupNameWindow(bool bIsShow, const struct FText& DisplayName, const struct FVector2D& NameSize);
	void SetupChoicesWindowShowMode(bool bIsShow, int TextLength);
	void SetTextLabelListList(TArray<class UTextBlock*> Value, int LineTextLabelCount);
	void SetTextLabelList(TArray<class UTextBlock*> Value);
	void SetRubyLabelList(TArray<class UTextBlock*> RefRubyTextBlockList);
	void SetMessage(const struct FString& Message);
	void SetImageListList(TArray<class UImage*> Value, int LineImageCount);
	void SetContentCanvasPanel(class UCanvasPanel* Value);
	void RunMoveTextLabel(int MoveCount, float DeltaTime);
	void JackUMGSerifuWindowEvent__DelegateSignature(class UJackUMGSerifuWindow* Sender, const struct FName& EventTag, float ExcessTime);
	bool STATIC_IsValidSerifuWindowControlKey(TEnumAsByte<EJackKeys> Key);
	void ExecuteKeyEvent(TEnumAsByte<EJackKeys> Key);
	bool ControllerKeyEvent(const struct FJackKeyStatus& Key);
	void ChengePageMarkerShowState(bool bIsShow);
};


// Class JackGame.JackUMGSerifuWindowResources
// 0x0010 (0x0048 - 0x0038)
class UJackUMGSerifuWindowResources : public UObject
{
public:
	TArray<struct FJackUMGSerifuWindowEmojiData>       EmojiDataArray;                                           // 0x0038(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSerifuWindowResources");
		return ptr;
	}

};


// Class JackGame.JackUMGSerifuWindowLatentMessageEndResult
// 0x0018 (0x0050 - 0x0038)
class UJackUMGSerifuWindowLatentMessageEndResult : public UObject
{
public:
	class UJackUMGSerifuWindowController*              Sender;                                                   // 0x0038(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       CurrentTextID;                                            // 0x0040(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SelectDialogIndex;                                        // 0x0048(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSerifuWindowLatentMessageEndResult");
		return ptr;
	}

};


// Class JackGame.JackUMGSerifuWindowController
// 0x0568 (0x05A0 - 0x0038)
class UJackUMGSerifuWindowController : public UObject
{
public:
	class UClass*                                      SerifuWindowClass;                                        // 0x0038(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FSlateFontInfo                              Font;                                                     // 0x0040(0x0058) (Edit, DisableEditOnInstance)
	float                                              ContentSize;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MarginLength;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SelectYesOrNoWindowClass;                                 // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SelectCustomWindowClass;                                  // 0x00A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      SelectBlacksmithWindowClass;                              // 0x00B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      RenkeiInfoWindowClass;                                    // 0x00B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FukubikiSlotClass;                                        // 0x00C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x78];                                      // 0x00C8(0x0078) MISSED OFFSET
	struct FScriptMulticastDelegate                    TextBPDelegate;                                           // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    MessageScriptEvent;                                       // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptDelegate                             JackOnSelectWindowOpenCloseDelegate;                      // 0x0160(0x0014) (BlueprintVisi, ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0170(0x0030) MISSED OFFSET
	EJackSerifuWindowType                              SerifuWindowType;                                         // 0x01A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x01A1(0x0007) MISSED OFFSET
	class UClass*                                      ResourcesClass;                                           // 0x01A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bConnectToRootPanel;                                      // 0x01B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackUMGTextJustify>                   DefaultTextJustify;                                       // 0x01B1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackMessageOutputMode>                DefaultOutputMode;                                        // 0x01B2(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x01B3(0x0001) MISSED OFFSET
	float                                              DefaultFadeInTime;                                        // 0x01B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackSpeed>                            OverrideMessageSpeed;                                     // 0x01B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x01B9(0x0003) MISSED OFFSET
	float                                              DefaultTalkSeInterval;                                    // 0x01BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoCloseTimeAtTokugiPanelMode;                           // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowParseErrorAssert;                                    // 0x01C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x01C5(0x0003) MISSED OFFSET
	class UJackUMGManager*                             UMGManager;                                               // 0x01C8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UJackUMGSerifuWindowResources*               Resources;                                                // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AJackCharacter*                              TalkingNpc;                                               // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x88];                                      // 0x01E0(0x0088) MISSED OFFSET
	class UJackUMGSerifuWindow*                        SerifuWindow;                                             // 0x0268(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                ZOrder;                                                   // 0x0270(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	class UJackUMGWindowBase*                          SelectWindow;                                             // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGWidgetBase*                          RenkeiInfoWindow;                                         // 0x0280(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGFukubikiSlot*                        FukubikiWidget;                                           // 0x0288(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0x60];                                      // 0x0290(0x0060) MISSED OFFSET
	float                                              DefaultPageFadeOutTime;                                   // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumberOfDisplayLines;                                     // 0x02F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x44];                                      // 0x02F8(0x0044) MISSED OFFSET
	float                                              InputDisableTime;                                         // 0x033C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x68];                                      // 0x0340(0x0068) MISSED OFFSET
	TArray<int>                                        DisableChoicesFlagList;                                   // 0x03A8(0x0010) (ZeroConstructor)
	TArray<int>                                        DisableColorChoicesFlagList;                              // 0x03B8(0x0010) (ZeroConstructor)
	TArray<TEnumAsByte<EJackUMGTextColorSet>>          ChoicesTextColorList;                                     // 0x03C8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData11[0x20];                                      // 0x03D8(0x0020) MISSED OFFSET
	TArray<struct FString>                             BlacksmithCreateItemNameList;                             // 0x03F8(0x0010) (ZeroConstructor)
	TArray<int>                                        BlacksmithCreateCountList;                                // 0x0408(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class UJackUMGWidgetBase>           PrevFocusWidget;                                          // 0x0418(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData12[0xC];                                       // 0x0420(0x000C) MISSED OFFSET
	float                                              RubyColorRatio;                                           // 0x042C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x0430(0x0004) MISSED OFFSET
	bool                                               bDebugOutputEditorLog;                                    // 0x0434(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugOutputScreenLog;                                    // 0x0435(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x2];                                       // 0x0436(0x0002) MISSED OFFSET
	TArray<struct FJackMessageArgumentData>            MessageArgumentDataList;                                  // 0x0438(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData15[0x138];                                     // 0x0448(0x0138) MISSED OFFSET
	class UJackUMGSerifuWindowLatentMessageEndResult*  LatentMessageEndResult;                                   // 0x0580(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x18];                                      // 0x0588(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSerifuWindowController");
		return ptr;
	}


	void WaitOneFrame(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void WaitMessageEndFromBP(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class UJackUMGSerifuWindowLatentMessageEndResult** Result);
	void VoiceStopped();
	void TextPageFeed();
	void StartFadeOut(float FadeOutTime);
	void ShowBlacksmithCreateSelectWindow(TArray<struct FName> ItemIDList, TArray<int> CountList);
	void SetZOrder(int InZOrder);
	void SetVisibleBackgroundImage(bool bValue);
	void SetTokugiPanelMessage(const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args);
	void SettingMEFromMEID(const struct FName& InMeId, bool bInBattleType);
	void SetTextWithVoice(bool bWithVoice);
	void SetTextAtTextID(const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void SetTextAtFixedMessage(const struct FString& MessageScript, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void SetTalkingNPC(class AJackCharacter* Value);
	void SetSerifuWindowSelectDelegate(const struct FScriptDelegate& Value);
	void SetSerifuType(bool Value);
	void SetPipipiTypeSetting(TEnumAsByte<EJackPipipiType> Value);
	void SetPauseAndHide(bool bValue);
	void SetMessageEndDelegate(const struct FScriptDelegate& Value);
	void SetForceShowPageMarker(bool bValue);
	void SetFieldMessageAtFixedMessage(const struct FString& MessageScript, TArray<struct FJackMessageArgumentData> Args);
	void SetEnableRubyVisibilityInSystemMenu(bool bEnable);
	void SetEnableRubyVisibilityInBoukennosyo(bool bEnable);
	void SetDisableInputFlag(bool bValue);
	void SetDisableColorChoicesFlagList(TArray<int> Value);
	void SetDisableChoicesFlagList(TArray<int> Value);
	void SetDebugOverrideSelectDialogIndex(int Value);
	void SetChoicesColorList(TArray<TEnumAsByte<EJackUMGTextColorSet>> ColorList);
	void ResetChoiceColor();
	void OverwriteChoicesCursorPosition(int CursorPos);
	void OverwriteButtonWaitFlagOfLastPage(bool bIsEnd);
	void OnUpdateTextLabel(int LabelIndex, int MaxLabelCount, TArray<class UTextBlock*> TextLabelList, TArray<class UImage*> ImageList, TArray<class UTextBlock*>* RubyLabelList);
	void OnSerifuWindowEvent(class UJackUMGSerifuWindow* Sender, const struct FName& Tag, float ExcessTime);
	void OnSelectWindowWidgetEvent(const struct FName& EventTag);
	void OnSelectWindowControl(const struct FName& EventName, class UJackUMGItemBase* InItemBase);
	void OnPlayMEFinished();
	void OnOpenSelectWindow(class UJackUMGWindowBase* InSelectWindow);
	void OnOpenRenkeiInfoWindow(class UJackUMGWidgetBase* InRenkeiInfoWindow, class UJackUMGTuyosaRenkeiData* RenkeiData);
	void OnOpenBlacksmithCreateSelectWindow(class UJackUMGWindowBase* InSelectWindow, TArray<struct FString> ItemNameList, TArray<int> CountList, int ItemNameLangth);
	void OnCompleteActionByScheduledNPC(class AJackScheduledNPC* NPC, TEnumAsByte<EJackNPCActionTypeInBPControl> ActionType);
	void NoBindLeftAxis();
	void JackSerifuWindowSelectDelegate__DelegateSignature(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, int SelectDialogIndex);
	void JackSerifuWindowEndDelegate__DelegateSignature();
	void JackSerifuTextParseResultDelegate__DelegateSignature(struct FJackUMGSerifuTextParseResult* InTextParseResult);
	void JackOnUMGSelectWindowOpenCloseDelegate__DelegateSignature(bool bIsOpen, int InSelectedIndex);
	void JackMessageScriptEventDelegate__DelegateSignature(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, TEnumAsByte<EJackMessageScriptEventType> EventType, const struct FString& Param);
	bool IsPlayingMe();
	bool IsDebugInvisible();
	void InitTextAtTextID(const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void InitTextAtFixedMessage(const struct FString& MessageScript, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void HastyCloseSerifuWindow();
	int GetZOrder();
	struct FJackUMGSerifuTextParseResult GetTextParseResult();
	int GetSimpleTextLineCount();
	void GetSerifuWindowDebugInfo(struct FJackUMGSerifuWindowDebug* OutDebugInfo);
	class UJackUMGSerifuWindow* GetSerifuWindow();
	TArray<struct FString> GetSelectionContent();
	TArray<struct FJackMessageArgumentData> GetMessageArgumentDataList();
	EJackFukubikiPayout GetFukubikiPayout();
	TArray<int> GetDisableColorChoicesFlagList();
	TArray<int> GetDisableChoicesFlagList();
	TArray<TEnumAsByte<EJackUMGTextColorSet>> GetChoicesColorList();
	void DoSelectSimpleDelegate(class UJackUMGSerifuWindowController* Sender, const struct FName& CurrentTextID, int InSelectDialogIndex);
	void CloseWindow(bool bRefreshFocus);
	void ClearMessageArgumentDataList();
	void ClearDebugOverrideSelectDialogIndex();
	int ApplyTextLabelFromExternal(const struct FString& MessageScript, TArray<struct FJackMessageArgumentData> Args, float BasePosX, TArray<class UTextBlock*> TextLabelList, int LineTextLabelCount, TArray<class UImage*> ImageList, int LineImageCount, float TextLineLength, int MaxLines);
	void AddTextAtTextID(const struct FName& TextID, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void AddTextAtFixedMessage(const struct FString& MessageScript, TArray<struct FJackMessageArgumentData> Args, bool bIsFocusWindow);
	void AddMessageArgumentDataList(TArray<struct FJackMessageArgumentData> Args);
	int AddChoicesContentByFixedText(const struct FString& Text, bool bEnable);
	int AddChoicesContent(const struct FName& TextID, bool bEnable);
};


// Class JackGame.JackUMGSibariPlay
// 0x0000 (0x0400 - 0x0400)
class UJackUMGSibariPlay : public UJackUMGWindowBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSibariPlay");
		return ptr;
	}

};


// Class JackGame.JackUMGSoubiState
// 0x0080 (0x00B8 - 0x0038)
class UJackUMGSoubiState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0038(0x003C) MISSED OFFSET
	int                                                Tikara;                                                   // 0x0074(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Minomamori;                                               // 0x0078(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Subayasa;                                                 // 0x007C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Kiyousa;                                                  // 0x0080(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Miryoku;                                                  // 0x0084(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                KougekiMaryoku;                                           // 0x0088(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                KaifukuMaryoku;                                           // 0x008C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxHP;                                                    // 0x0090(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxMP;                                                    // 0x0094(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Kougekiryoku;                                             // 0x0098(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Syubiryoku;                                               // 0x009C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MPKyuuSyuuRate;                                           // 0x00A0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TateGuardRate;                                            // 0x00A4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BukiGuardRate;                                            // 0x00A8(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MikawasiRate;                                             // 0x00AC(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CriticalRate;                                             // 0x00B0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ZoneOnRate;                                               // 0x00B4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSoubiState");
		return ptr;
	}

};


// Class JackGame.JackUMGSoubiList
// 0x02C0 (0x02F8 - 0x0038)
class UJackUMGSoubiList : public UObject
{
public:
	struct FJackUMGSoubiData                           Handedness;                                               // 0x0038(0x0070) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGSoubiData                           Hand;                                                     // 0x00A8(0x0070) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGSoubiData                           Head;                                                     // 0x0118(0x0070) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGSoubiData                           Body;                                                     // 0x0188(0x0070) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGSoubiData                           Accessory1;                                               // 0x01F8(0x0070) (BlueprintVisi, BlueprintReadOnly)
	struct FJackUMGSoubiData                           Accessory2;                                               // 0x0268(0x0070) (BlueprintVisi, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x20];                                      // 0x02D8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSoubiList");
		return ptr;
	}


	void SetIsChange(TEnumAsByte<EJackEquipmentRegion> RegionType, bool InFlag);
	struct FJackUMGSoubiData GetSoubiDataRefFromRegion(TEnumAsByte<EJackEquipmentRegion> RegionType);
	struct FJackUMGSoubiData GetSoubiDataRefFromIndex(int InIndex);
	struct FJackUMGSoubiData GetSoubiDataFromRegion(TEnumAsByte<EJackEquipmentRegion> RegionType);
	struct FJackUMGSoubiData GetSoubiDataFromIndex(int InIndex);
};


// Class JackGame.JackUMGSoundSet
// 0x01D0 (0x0208 - 0x0038)
class UJackUMGSoundSet : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0038(0x0020) MISSED OFFSET
	class USoundBase*                                  BasicEnter;                                               // 0x0058(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  BasicCancel;                                              // 0x0060(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  WindowOpen;                                               // 0x0068(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  WindowClose;                                              // 0x0070(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MsgOpenSelector;                                          // 0x0078(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TalkLowest;                                               // 0x0080(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TalkLower;                                                // 0x0088(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TalkMid;                                                  // 0x0090(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TalkHigher;                                               // 0x0098(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TalkHighest;                                              // 0x00A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackMessageSoundTagDict>            SETagSoundList;                                           // 0x00A8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class USoundBase*                                  CountNumber;                                              // 0x00B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SyougouAcquisition;                                       // 0x00C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MapOpen;                                                  // 0x00C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MapClose;                                                 // 0x00D0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MapSend;                                                  // 0x00D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MapChangeFloor;                                           // 0x00E0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DouguSyousaiOpen;                                         // 0x00E8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DouguSyousaiClose;                                        // 0x00F0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DouguSyousaiPage;                                         // 0x00F8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  ManualSave;                                               // 0x0100(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  AutoSave;                                                 // 0x0108(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  ItemGet;                                                  // 0x0110(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  GoldGet;                                                  // 0x0118(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TiisanaMedalGet;                                          // 0x0120(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  FukidasiOpen;                                             // 0x0128(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  Eisyo;                                                    // 0x0130(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class USoundBase*>                          FieldActionSE;                                            // 0x0138(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class USoundBase*                                  AttachEquipment;                                          // 0x0148(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DetachEquipment;                                          // 0x0150(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  EquipmentDefault;                                         // 0x0158(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  EquipmentMetal;                                           // 0x0160(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  EquipmentCloth;                                           // 0x0168(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  TuyosaPageChange;                                         // 0x0170(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  AactivateBattleMenu;                                      // 0x0178(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MdlStampS;                                                // 0x0180(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MdlStampM;                                                // 0x0188(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MdlStampL;                                                // 0x0190(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MdlStampComp;                                             // 0x0198(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  MdlTakarabako;                                            // 0x01A0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  QstClrStamp;                                              // 0x01A8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel2;                                              // 0x01B0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel3;                                              // 0x01B8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel4;                                              // 0x01C0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel5;                                              // 0x01C8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel6;                                              // 0x01D0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel7;                                              // 0x01D8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel11;                                             // 0x01E0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanel14;                                             // 0x01E8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SendSkillpanel;                                           // 0x01F0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SkillPanelPageChange;                                     // 0x01F8(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  RenkeiSyutoku;                                            // 0x0200(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSoundSet");
		return ptr;
	}


	void StopUISound(class USoundBase* InSoundBase);
	void PlayUISoundWithParam(class USoundBase* InSoundBase, int MonophonicId, float InVolume, float InPitch, float InStartTime);
	void PlayUISound(class USoundBase* InSoundBase, int MonophonicId);
	void PlayFieldActionSE(EJackUMGFieldActionSoundType InSoundtype);
	void PlayEquipmentActionSound();
	class USoundBase* GetUISoundById(const struct FName& SoundId);
	class USoundBase* GetEquipmentSound(TEnumAsByte<EJackItem_EquipmentSE> InEquipmentSEType);
	void CancelUISound();
};


// Class JackGame.JackUMGStaffRollWindow
// 0x01E0 (0x0550 - 0x0370)
class UJackUMGStaffRollWindow : public UJackUMGWidgetBase
{
public:
	class UDataTable*                                  DT_UIStaffRoll;                                           // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bSelfUpdate;                                              // 0x0378(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              StartBuffer;                                              // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndBuffer;                                                // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x0384(0x002C) MISSED OFFSET
	TArray<class UTexture2D*>                          LoadedTextureValueList;                                   // 0x03B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03C0(0x0018) MISSED OFFSET
	class UImage*                                      FadeImage;                                                // 0x03D8(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      BackgroundImage;                                          // 0x03E0(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ScrollPanel;                                              // 0x03E8(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ThreeRowsLeftPanel;                                       // 0x03F0(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ThreeRowsCenterPanel;                                     // 0x03F8(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                ThreeRowsRightPanel;                                      // 0x0400(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                TwoRowsLeftPanel;                                         // 0x0408(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                TwoRowsRightPanel;                                        // 0x0410(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                CompanyPanel;                                             // 0x0418(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                FadeThreeRowsLeftPanel;                                   // 0x0420(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                FadeThreeRowsCenterPanel;                                 // 0x0428(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                FadeThreeRowsRightPanel;                                  // 0x0430(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                FadeTwoRowsLeftPanel;                                     // 0x0438(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                FadeTwoRowsRightPanel;                                    // 0x0440(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                FadeCompanyPanel;                                         // 0x0448(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0xA0];                                      // 0x0450(0x00A0) MISSED OFFSET
	TArray<class UImage*>                              ImageList;                                                // 0x04F0(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData04[0x50];                                      // 0x0500(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGStaffRollWindow");
		return ptr;
	}


	void UseSelfUpdate();
	void TextureLoadComplate(int InResultCode, class UObject* InLoaddedObject, class UJackUMGAsyncLoad* InLoadInfo);
	bool Execute(float InProgressTime);
	void ConstructData(bool bInPlaythroughSecond);
	void AddTextBlockList(const struct FName& FontTypeKey, TArray<class UTextBlock*> TextBlockList);
	void AddTextBlock(const struct FName& FontTypeKey, class UTextBlock* TextBlock);
};


// Class JackGame.JackUMGSyuurenjou004Base
// 0x0000 (0x0370 - 0x0370)
class UJackUMGSyuurenjou004Base : public UJackUMGWidgetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGSyuurenjou004Base");
		return ptr;
	}


	void SetSyuurenjouData(const struct FJackDataTableSyuurenjou& Data);
};


// Class JackGame.JackUMGTokugiParts
// 0x0010 (0x01E0 - 0x01D0)
class UJackUMGTokugiParts : public UUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiParts");
		return ptr;
	}

};


// Class JackGame.JackUMGTokugiPieceBase
// 0x0080 (0x0260 - 0x01E0)
class UJackUMGTokugiPieceBase : public UJackUMGTokugiParts
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x01E0(0x0058) MISSED OFFSET
	class UTexture2D*                                  SideSideTexture;                                          // 0x0238(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  BackSideTexture;                                          // 0x0240(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          CircleMaterial;                                           // 0x0248(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          Circle1Material;                                          // 0x0250(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  SealedTexture;                                            // 0x0258(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPieceBase");
		return ptr;
	}


	void SetSealedVisible(bool bIsVisible);
};


// Class JackGame.JackUMGTokugiPiece
// 0x0080 (0x02E0 - 0x0260)
class UJackUMGTokugiPiece : public UJackUMGTokugiPieceBase
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0260(0x0058) MISSED OFFSET
	class UTexture2D*                                  FrontSideTexture;                                         // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInterface*                          HimituGlowMaterial;                                       // 0x02C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  HimituShadowTexture;                                      // 0x02C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  LineMaskTexture;                                          // 0x02D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          BlueLineMaterial;                                         // 0x02D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPiece");
		return ptr;
	}


	void SetHimituVisible(bool bIsVisible);
	void SetFrontSideTexture(class UTexture2D* Texture);
	void SetElements(class UCanvasPanel* InIconRoot, class UCanvasPanel* InIconParts, class UImage* InFace, class UImage* InFrontSide, class UImage* InHimituGlow, class UImage* InHimituShadow, class UImage* InBackSide, class UImage* InSideSide, class UImage* InLineMask1, class UImage* InLineMask2, class UImage* InLineMask3, class UImage* InBlueLine, class UImage* InCircle, class UImage* InCircle1);
	void PlayNativeAnim(EJackTokugiPieceAnim AnimType, bool bReverse);
};


// Class JackGame.JackUMGTokugiQuestion
// 0x00A8 (0x0308 - 0x0260)
class UJackUMGTokugiQuestion : public UJackUMGTokugiPieceBase
{
public:
	unsigned char                                      UnknownData00[0x98];                                      // 0x0260(0x0098) MISSED OFFSET
	TArray<class UTexture2D*>                          CrackTextureList;                                         // 0x02F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiQuestion");
		return ptr;
	}


	void SetElements(class UCanvasPanel* InIconRoot, class UCanvasPanel* InIconParts, class UImage* InFaceBright, class UImage* InFaceDark, class UUserWidget* InCrack000Main, class UUserWidget* InCrack000Temp, class UImage* InBackSide, class UImage* InSideSide, class UImage* InCircle, class UImage* InCircle1);
	void PlayNativeAnim(EJackTokugiQuestionAnim AnimType, bool bReverse);
	void PlayCrack(TArray<int> DirList, TArray<int> AnimDirList);
	void ApplyCrackShowState(bool bMain, TArray<int> DirList);
};


// Class JackGame.JackUMGTokugiFlash005
// 0x0048 (0x0228 - 0x01E0)
class UJackUMGTokugiFlash005 : public UJackUMGTokugiParts
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E0(0x0028) MISSED OFFSET
	class UMaterialInterface*                          StarMaterial;                                             // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RenderScaleExp;                                           // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0214(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiFlash005");
		return ptr;
	}


	void SetElements(class UCanvasPanel* InRootPanel);
	void PlayNativeAnim();
};


// Class JackGame.JackUMGTokugiFlash006
// 0x0048 (0x0228 - 0x01E0)
class UJackUMGTokugiFlash006 : public UJackUMGTokugiParts
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x01E0(0x0028) MISSED OFFSET
	class UMaterialInterface*                          StarMaterial;                                             // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PosExp;                                                   // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0214(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiFlash006");
		return ptr;
	}


	void SetElements(class UCanvasPanel* InRootPanel);
	void PlayNativeAnim();
};


// Class JackGame.JackUMGTokugiMatomeIcon
// 0x0088 (0x0268 - 0x01E0)
class UJackUMGTokugiMatomeIcon : public UJackUMGTokugiParts
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01E0(0x0050) MISSED OFFSET
	class UTexture2D*                                  CircleTexture;                                            // 0x0230(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          CircleGlowMaterial;                                       // 0x0238(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  CheckTexture;                                             // 0x0240(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInterface*                          CheckGlowMaterial;                                        // 0x0248(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  LockTexture;                                              // 0x0250(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  StarTexture;                                              // 0x0258(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTexture2D*                                  SecretTexture;                                            // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiMatomeIcon");
		return ptr;
	}


	void SetElements(class UCanvasPanel* InRootPanel);
	void PlayNativeAnim(EJackTokugiMatomeIconAnim AnimType, bool bReverse);
};


// Class JackGame.JackTokugiPanelSetting
// 0x0018 (0x0050 - 0x0038)
class UJackTokugiPanelSetting : public UObject
{
public:
	TArray<struct FJackTokugiPanelAtariBonus>          AtariBonusInfoList;                                       // 0x0038(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                SkillResetPriceBase;                                      // 0x0048(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTokugiPanelSetting");
		return ptr;
	}

};


// Class JackGame.JackTokugiPanelUtils
// 0x0000 (0x0038 - 0x0038)
class UJackTokugiPanelUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackTokugiPanelUtils");
		return ptr;
	}


	TEnumAsByte<EJackSkillLine> STATIC_ToSkillLineType(TEnumAsByte<EJackItem_Classification> WeaponType);
	bool STATIC_IsUnlockTokugiPanelCommand(class UObject* WorldContextObject);
	struct FName STATIC_GetWeaponTypeTextId(TEnumAsByte<EJackItem_Classification> WeaponType);
	struct FString STATIC_GetWeaponTypeName(class UObject* WorldContextObject, TEnumAsByte<EJackItem_Classification> WeaponType);
	void STATIC_GetTokugiPanelScenario(class UObject* WorldContextObject, TEnumAsByte<EJackCharacter> CharacterType, bool bSyncLoadTexture, TEnumAsByte<EJackTokugiPanelScenario>* TokugiPanelScenario, class UTexture2D** BackgroundTexture, struct FVector2D* PanelPosOffset, struct FVector2D* SkillLineEffectPosOffset);
	TEnumAsByte<EJackTokugiPanelAdjoinPieceState> STATIC_GetState(const struct FJackUMGTokugiPanelAdjoinData& Data, int Index);
	struct FName STATIC_GetSkillLineTextId(TEnumAsByte<EJackSkillLine> SkillLineType);
	struct FString STATIC_GetSkillLineName(class UObject* WorldContextObject, TEnumAsByte<EJackSkillLine> SkillLineType);
	struct FName STATIC_GetSkillLineGroupTextId(TEnumAsByte<EJackSkillLine> SkillLineType);
	struct FString STATIC_GetSkillLineGroupName(class UObject* WorldContextObject, TEnumAsByte<EJackSkillLine> SkillLineType);
	TArray<class UJackUMGTokugiPanelData*> STATIC_GetSelectedSkillLinePanelDataList(TArray<class UJackUMGTokugiPanelData*> BaseDataList, TEnumAsByte<EJackSkillLine> SkillLineType);
	struct FVector2D STATIC_GetNextCursorPosByDir(const struct FVector2D& CursorPos, int Direction);
	void STATIC_GetMaxNeedCountOfPanelWidget(class UObject* WorldContextObject, int* PanelWidgetCount, int* QuestionWidgetCount);
	int STATIC_GetLength(const struct FJackUMGTokugiPanelAdjoinData& Data);
	TArray<int> STATIC_GetCrackDirList(const struct FJackUMGTokugiPanelAdjoinData& Data);
	class UJackUMGTokugiPanelData* STATIC_FindDataByCursorPos(TArray<class UJackUMGTokugiPanelData*> PanelDataList, const struct FVector2D& CursorPos);
};


// Class JackGame.JackUMGTokugiPanelData
// 0x00E0 (0x0118 - 0x0038)
class UJackUMGTokugiPanelData : public UObject
{
public:
	struct FName                                       ID;                                                       // 0x0038(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                Order;                                                    // 0x0040(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   PanelPos;                                                 // 0x0044(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	int                                                NeedSkillPoint;                                           // 0x004C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSealed;                                                  // 0x0050(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLockPanel;                                               // 0x0051(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0052(0x0002) MISSED OFFSET
	int                                                LockCount;                                                // 0x0054(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAtariPanel;                                              // 0x0058(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	int                                                IconType;                                                 // 0x005C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EJackSkillLine>>                SkillLineTypeList;                                        // 0x0060(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	TEnumAsByte<EJackItem_Classification>              ConfirmWeaponType;                                        // 0x0070(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FName                                       ConfirmMessage;                                           // 0x0078(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       LearnedMessage;                                           // 0x0080(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SingleLearnedMessage;                                     // 0x0088(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x0090(0x0040) MISSED OFFSET
	class UTexture2D*                                  IconTexture;                                              // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x00D8(0x000C) MISSED OFFSET
	int                                                Index;                                                    // 0x00E4(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackTokugiPanelPieceState>            State;                                                    // 0x00E8(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x00E9(0x0007) MISSED OFFSET
	class UUserWidget*                                 TargetWidget;                                             // 0x00F0(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUserWidget*                                 LockWidget;                                               // 0x00F8(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   PanelDrawPos;                                             // 0x0100(0x0008) (BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0108(0x0001) MISSED OFFSET
	struct FJackUMGTokugiPanelAdjoinData               AdjoinData;                                               // 0x0109(0x0008) (BlueprintVisi, BlueprintReadOnly)
	bool                                               bProvMasterCheck;                                         // 0x0111(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnoughSkillPoint;                                        // 0x0112(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnoughRemainSkillPoint;                                  // 0x0113(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                RenkeiLearningFlag;                                       // 0x0114(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPanelData");
		return ptr;
	}


	bool IsWithBareHands();
	bool IsSealedOrLock();
	bool IsNowLock();
	bool IsLimitedExecutableWeapon();
	bool IsBasePanel();
	bool HasSkillLineType(TEnumAsByte<EJackSkillLine> SkillLineType);
	int GetUseMp();
	TArray<class UJackUMGTokugiPanelData*> STATIC_GetTokugiPanelDataListTest2(class UObject* WorldContextObject, class UClass* MakeClass, TEnumAsByte<EJackCharacter> TargetCharacter, TEnumAsByte<EJackTokugiPanelScenario> ScenarioFlag, bool bInBattleResult);
	TEnumAsByte<EJackTokugiType> GetSkillType();
	struct FString GetSkillLineName();
	int GetRemainLockCount();
	struct FString GetPanelStateString();
	struct FString GetNeedSkillPointText();
	struct FName GetNameId();
	struct FString GetName();
	class UTexture2D* GetIconTexture();
	TArray<class UTexture2D*> GetExecutableWeaponIconList();
	struct FString GetDescription();
	struct FName GetActionID();
	bool CanOpen();
};


// Class JackGame.JackUMGTokugiPanelMemberData
// 0x0018 (0x0050 - 0x0038)
class UJackUMGTokugiPanelMemberData : public UObject
{
public:
	int                                                Index;                                                    // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   DefaultPosition;                                          // 0x003C(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIsIncreaseHighlight;                                     // 0x0044(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	class UJackFriendGameCharacter*                    Data;                                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPanelMemberData");
		return ptr;
	}


	class UJackUMGTokugiPanelMemberData* STATIC_GetTokugiPanelMemberData(class UJackUMGItemData* ItemData);
	int GetSkillPoint();
	struct FString GetName();
	TEnumAsByte<EJackCharacter> GetCharacterType();
	TArray<class UJackUMGItemData*> STATIC_ConstructTokugiPanelMemberData(class UObject* WorldContextObject, bool bInBattleResult);
};


// Class JackGame.JackUMGTokugiPanelSkillLineData
// 0x0080 (0x00B8 - 0x0038)
class UJackUMGTokugiPanelSkillLineData : public UObject
{
public:
	int                                                Index;                                                    // 0x0038(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackSkillLine>                        SkillLineType;                                            // 0x003C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0040(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FVector2D                                   StartPoint;                                               // 0x0050(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FVector2D                                   FlashEffectPos;                                           // 0x0058(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	struct FString                                     Name;                                                     // 0x0060(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       NameId;                                                   // 0x0070(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FString                                     GroupName;                                                // 0x0078(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       GroupNameId;                                              // 0x0088(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                UsedSkillPoint;                                           // 0x0090(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MasteredSkillCount;                                       // 0x0094(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SkillCount;                                               // 0x0098(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SkillResetCost;                                           // 0x009C(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ResetReturnSkillPoint;                                    // 0x00A0(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<class UJackUMGTokugiPanelData*>             PieceDataList;                                            // 0x00A8(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPanelSkillLineData");
		return ptr;
	}


	bool IsAllMastered();
	class UJackUMGTokugiPanelSkillLineData* STATIC_GetTokugiPanelSkillLineData(class UJackUMGItemData* ItemData);
	struct FVector2D GetStartPoint();
	void ConstructData(TArray<class UJackUMGTokugiPanelData*> BaseDataList);
};


// Class JackGame.JackUMGTokugiPanelWindow
// 0x0020 (0x0390 - 0x0370)
class UJackUMGTokugiPanelWindow : public UJackUMGWidgetBase
{
public:
	TArray<class UJackUMGTokugiPanelData*>             PanelDataList;                                            // 0x0370(0x0010) (BlueprintVisi, ZeroConstructor)
	class UJackUMGTokugiPanelData*                     CurrentSelectPanelData;                                   // 0x0380(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   CursorPosition;                                           // 0x0388(0x0008) (BlueprintVisi, BlueprintReadOnly, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPanelWindow");
		return ptr;
	}


	void SetDisplayScale(float DisplayScale);
	void SetCursorPosition(const struct FVector2D& CursorPos, bool bIsMoveCursorInput);
	void OnEnter();
	void MoveCursorDrawPosition(const struct FVector2D& CursorPos);
	void InitTokugiPanelWindow(int ZOrder);
	class UJackUMGTokugiPanelData* FindDataAtCursorPos(const struct FVector2D& CursorPos);
	void CreateTokugiPanel(class UJackUMGTokugiPanelData* PanelData);
	void ChangeSelectState(class UJackUMGTokugiPanelData* PanelData, bool bSelected, bool bIsMoveCursorInput);
};


// Class JackGame.JackUMGTokugiPanel
// 0x00C8 (0x04C8 - 0x0400)
class UJackUMGTokugiPanel : public UJackUMGWindowBase
{
public:
	TEnumAsByte<EJackTokugiPanelWindowMode>            Mode;                                                     // 0x0400(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackTokugiPanelScenario>              ScenarioFlag;                                             // 0x0401(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x16];                                      // 0x0402(0x0016) MISSED OFFSET
	TArray<class UJackUMGTokugiPanelData*>             PanelDataList;                                            // 0x0418(0x0010) (BlueprintVisi, ZeroConstructor)
	TEnumAsByte<EJackCharacter>                        SelectedCharacter;                                        // 0x0428(0x0001) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x27];                                      // 0x0429(0x0027) MISSED OFFSET
	class UJackUMGTokugiPanelWindow*                   TokugiPanel;                                              // 0x0450(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UJackUMGTokugiPanelData*                     AtariPanelData;                                           // 0x0458(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        EffectiveSkillLineIndexList;                              // 0x0460(0x0010) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      TokugiPanelDataClassAsset;                                // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfAfterHideCursorInReleaseLockPanel;                  // 0x0478(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfAfterHideCursorInMaster;                            // 0x047C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeAdjoinPanelOpenAtLearn;                       // 0x0480(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IntervalOfAdjoinPanelOpenAtLearn;                         // 0x0484(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeDisplayLearnMessage;                          // 0x0488(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfAfterHideSkillLineEffectInMultiMaster;              // 0x048C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IntervalOfMasterEffectInMultiMaster;                      // 0x0490(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfAfterShowSkillLineEffectInMultiLearn;               // 0x0494(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeAatariEffectAtLearn;                          // 0x0498(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeAatariEffectAtMultiLearn;                     // 0x049C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfAfterAatariEffect;                                  // 0x04A0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeNotifyLearnedRenkeiAtLearn;                   // 0x04A4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeNotifyLearnedRenkeiAtMultiLearn;              // 0x04A8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeDisplayAchievementAtLearn;                    // 0x04AC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaitOfBeforeDisplayAchievementAtMultiLearn;               // 0x04B0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseStartTimeInReset;                                     // 0x04B4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TimingOfListUpdateEffectInReset;                          // 0x04B8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EndTimeInReset;                                           // 0x04BC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTestModeOfExecuteMultipleLearning;                       // 0x04C0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EJackTokugiPanelAdjoinPanelOpenTiming              AdjoinPanelOpenTiming;                                    // 0x04C1(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x04C2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTokugiPanel");
		return ptr;
	}


	TArray<struct FJackUMGTokugiPanelAnimData> ToggleProvMaster(class UJackUMGTokugiPanelData* PanelData);
	TArray<struct FJackUMGTokugiPanelAnimData> ResumeMultiMasterWorkData();
	class UJackUMGSerifuWindowController* NotifyLearnedRenkei();
	bool IsAtariMode();
	bool HasProvMasterCheckedPanelData();
	int GetTotleUseSkillPointInMultiMaster();
	TArray<class UJackUMGTokugiPanelData*> GetOpenedPanelDataList();
	int GetAtariSkillPoint();
	bool ExistsLearnedRenkeiNotification();
	TArray<struct FJackUMGTokugiPanelAnimData> ExecuteResetSkillLine(class UJackUMGTokugiPanelSkillLineData* SkillLineData);
	TArray<struct FJackUMGTokugiPanelAnimData> ExecuteReleaseLockPanel(class UJackUMGTokugiPanelData* PanelData);
	TArray<struct FJackUMGTokugiPanelAnimData> ExecuteMultiMaster();
	TArray<struct FJackUMGTokugiPanelAnimData> ExecuteMaster(class UJackUMGTokugiPanelData* PanelData);
	void EndAtariMode();
	void ConstructTokugiPanelScenarioData(TEnumAsByte<EJackCharacter> CharacterType, bool bSyncLoadTexture, class UTexture2D** BackgroundTexture);
	TArray<class UJackUMGItemData*> ConstructSkillLineData(bool bInSkillReset);
	void ConstructPanelData();
	void ConstructMultiMasterData();
	void CheckRenkeiLearningFlag(bool bInBattleResult);
	TArray<struct FJackUMGTokugiPanelAnimData> CancelMultiMaster();
	void AcquireAtariSkillPoint();
};


// Class JackGame.JackUMGTouchPadScrollContent
// 0x0188 (0x0358 - 0x01D0)
class UJackUMGTouchPadScrollContent : public UUserWidget
{
public:
	bool                                               bAutoBindTouchpadEvent;                                   // 0x01D0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bControlable;                                             // 0x01D1(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01D2(0x0006) MISSED OFFSET
	struct FJackUMGTouchPadScrollContentData           ContentData;                                              // 0x01D8(0x0088)
	struct FJackUMGTouchPadScrollContentData           ContentData2;                                             // 0x0260(0x0088)
	float                                              ScrollableMargin;                                         // 0x02E8(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bTouchPadButtonValid;                                     // 0x02EC(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUseContent2;                                             // 0x02ED(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x02EE(0x0002) MISSED OFFSET
	struct FVector                                     TouchPoint;                                               // 0x02F0(0x000C) (IsPlainOldData)
	struct FVector                                     PrevTouchPoint;                                           // 0x02FC(0x000C) (IsPlainOldData)
	struct FVector                                     TouchStartPosition;                                       // 0x0308(0x000C) (IsPlainOldData)
	bool                                               bScrollStarted;                                           // 0x0314(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0315(0x0003) MISSED OFFSET
	class UImage*                                      TouchCursor;                                              // 0x0318(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector2D                                   TouchCursorPoint;                                         // 0x0320(0x0008) (IsPlainOldData)
	struct FVector2D                                   TouchCursorBasePosition;                                  // 0x0328(0x0008) (IsPlainOldData)
	struct FString                                     Text;                                                     // 0x0330(0x0010) (ZeroConstructor)
	TEnumAsByte<EJackUMGTextColorSet>                  ColorType;                                                // 0x0340(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x17];                                      // 0x0341(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGTouchPadScrollContent");
		return ptr;
	}


	void UnbindTouchpadEvent();
	void SetText(const struct FString& InText);
	void SetScrollContentEx2(class UPanelWidget* MainPanel, class UCanvasPanel* ScrollContent, class UTextBlock* MainTextBlock, class UImage* ScrollBarImage, class UPanelWidget* TouchPadInfoPanel, float LineHeight, int LineTextLabelCount);
	void SetScrollContentEx(class UPanelWidget* MainPanel, class UCanvasPanel* ScrollContent, class UTextBlock* MainTextBlock, class UImage* MainImage, class UImage* ScrollBarImage, class UPanelWidget* TouchPadInfoPanel, float LineHeight, int LineTextLabelCount, int LineImageCount);
	void SetScrollContent2(class UPanelWidget* MainPanel, class UTextBlock* ScrollContent, class UImage* ScrollBarImage, class UPanelWidget* TouchPadInfoPanel);
	void SetScrollContent(class UPanelWidget* MainPanel, class UTextBlock* ScrollContent, class UImage* ScrollBarImage, class UPanelWidget* TouchPadInfoPanel);
	void SetScrollableMargin(float Value);
	void SetFontColor(TEnumAsByte<EJackUMGTextColorSet> InColorType);
	void SetControlable(bool bValue);
	void ChangeContent(bool bInUseContent2);
	void BindTouchpadEvent();
};


// Class JackGame.JackUMGValueController
// 0x01A8 (0x0518 - 0x0370)
class UJackUMGValueController : public UJackUMGWidgetBase
{
public:
	TArray<class UWidget*>                             ValuePanels;                                              // 0x0370(0x0010) (BlueprintVisi, ExportObject, ZeroConstructor)
	class UWidget*                                     CursorPanel;                                              // 0x0380(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bNoDisableColor;                                          // 0x0388(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x57];                                      // 0x0389(0x0057) MISSED OFFSET
	struct FText                                       DecText00;                                                // 0x03E0(0x0018) (BlueprintVisi)
	struct FText                                       DecText01;                                                // 0x03F8(0x0018) (BlueprintVisi)
	struct FText                                       DecText02;                                                // 0x0410(0x0018) (BlueprintVisi)
	struct FText                                       DecText03;                                                // 0x0428(0x0018) (BlueprintVisi)
	struct FText                                       DecText04;                                                // 0x0440(0x0018) (BlueprintVisi)
	struct FText                                       DecText05;                                                // 0x0458(0x0018) (BlueprintVisi)
	struct FText                                       DecText06;                                                // 0x0470(0x0018) (BlueprintVisi)
	struct FText                                       DecText07;                                                // 0x0488(0x0018) (BlueprintVisi)
	struct FText                                       DecText08;                                                // 0x04A0(0x0018) (BlueprintVisi)
	struct FText                                       DecText09;                                                // 0x04B8(0x0018) (BlueprintVisi)
	unsigned char                                      UnknownData01[0x48];                                      // 0x04D0(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGValueController");
		return ptr;
	}


	void SetupValueController(int InInitValue, int InNumDigits, int InMinDigits);
	void SetupNumberRange(int InNumMin, int InNumMax);
	void NoDisableColor(bool bNoDisable);
	void InitValueController(int ZOrder);
	bool CanInputValue(TEnumAsByte<EJackUMGCheckValueInput> InValue);
};


// Class JackGame.JackUMGVoiceDrama
// 0x0498 (0x0808 - 0x0370)
class UJackUMGVoiceDrama : public UJackUMGWidgetBase
{
public:
	struct FScriptMulticastDelegate                    VoiceDramaEventBPDelegate;                                // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    VoiceDramaTagEventBPDelegate;                             // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x410];                                     // 0x0390(0x0410) MISSED OFFSET
	float                                              CharacterFadeSeconds;                                     // 0x07A0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterFeedSeconds;                                     // 0x07A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterFeedRatio;                                       // 0x07A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TalkerFadeSeconds;                                        // 0x07AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PageFadeSeconds;                                          // 0x07B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07B4(0x0004) MISSED OFFSET
	float                                              SpaceHeight;                                              // 0x07B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x07BC(0x0004) MISSED OFFSET
	float                                              FastForwardFadeSeconds;                                   // 0x07C0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FastForwardPageFadeSeconds;                               // 0x07C4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FastForwardRatio;                                         // 0x07C8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LogModeRatio;                                             // 0x07CC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BGFadeSeconds;                                            // 0x07D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ImageFadeSeconds;                                         // 0x07D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BGMFadeSeconds;                                           // 0x07D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnvFadeSeconds;                                           // 0x07DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_0_Short;                                      // 0x07E0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_1_Normal;                                     // 0x07E4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_2_Long;                                       // 0x07E8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_3_VeryLong;                                   // 0x07EC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_4_VeryVeryLong;                               // 0x07F0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_5_VeryVeryVeryLong;                           // 0x07F4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeSeconds_6_ImpossibleLong;                             // 0x07F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StaffRollFadeSeconds;                                     // 0x07FC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SoundFadeSeconds;                                         // 0x0800(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CurrentVoiceDramaCancelButtonChange;                      // 0x0804(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0805(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGVoiceDrama");
		return ptr;
	}


	void StartVoiceDrama(bool bInUseInterruption, int InPage, int InIndex);
	bool StartTitle(bool bInUseInterruption);
	void StartPage(int InPage, int InIndex, bool bInBackward, bool bInTagArraySetup);
	void SetupScreenShotSetting();
	void SetupPageData(int InPage);
	void SetupMenu();
	void SetupEpisodeData(int InScenarioID);
	void SetTextOpacity(float InOpacity);
	void ReturnTagStatus(int InPage, int InIndex, bool bInToHead, bool bInNoWait);
	void ResumeBGM();
	void RestartVoiceDramaTag(TEnumAsByte<EJackVoiceDramaPausePurpose> InPausePurpose);
	void RestartVoiceDrama(TEnumAsByte<EJackVoiceDramaPausePurpose> InPausePurpose);
	void RequestTextFade(float InFadeTime, bool InFadeIn);
	void PauseVoiceDramaTag(TEnumAsByte<EJackVoiceDramaPausePurpose> InPausePurpose);
	void PauseVoiceDrama(TEnumAsByte<EJackVoiceDramaPausePurpose> InPausePurpose);
	void PauseBGM();
	void LogModeCancel();
	void JackUMGVoiceDramaTagEventBPDelegate__DelegateSignature(TEnumAsByte<EJackVoiceDramaTagEvent> EventType, const struct FJackVoiceDramaTagData& TagData);
	void JackUMGVoiceDramaEventBPDelegate__DelegateSignature(TEnumAsByte<EJackVoiceDramaEvent> EventType);
	bool IsPauseVoiceDramaTag();
	bool IsPauseVoiceDramaPurpose(TEnumAsByte<EJackVoiceDramaPausePurpose> InPausePurpose);
	bool IsPauseVoiceDrama();
	bool IsFeedEnd();
	bool IsFastForward();
	bool IsFastBackward();
	bool IsDisableInput();
	bool IsDisableFastForward();
	void InputDelegate(struct FJackUIInputDelegateInfo* InDelegateInfo);
	bool IncrementLogUnit();
	bool IncrementLogPage();
	bool HasStaffRoll();
	struct FJackDataTableVoiceDrama GetUnitData(int InIndex);
	struct FString GetScenarioTitle();
	int GetReadMaxPage();
	TEnumAsByte<EJackVoiceDramaMode> GetMode();
	int GetMaxPageNum();
	float GetLogModeRatio();
	float GetFastForwardRatio();
	int GetCurrentPage();
	int GetCurrentLogPage();
	int GetCurrentLogIndex();
	int GetCurrentIndex();
	struct FString GetAssetName(const struct FString& InAssetPath);
	void FinishMenu();
	void ExecFootTag();
	void EndVoiceDrama(bool bInInterruption);
	void EndPage();
	void DisableInput(bool bInDisable);
	void DisableFastForward(bool bInDisable);
	bool DecrementLogUnit();
	bool DecrementLogPage(bool bInCurrentBottom);
	void ClearPage();
	bool CheckInterruptionData(bool bInUseInterruption, int* OutPage, int* OutIndex);
	void ChangeState(TEnumAsByte<EJackVoiceDramaMode> InMode);
};


// Class JackGame.JackPafuPafuVoiceManager
// 0x0020 (0x0058 - 0x0038)
class UJackPafuPafuVoiceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UAudioComponent*                             PlayingAudioComponent;                                    // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector                                     VoiceSpawnPos;                                            // 0x0048(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackPafuPafuVoiceManager");
		return ptr;
	}

};


// Class JackGame.JackUMGVoiceDramaHDPafuPafu
// 0x00D8 (0x0448 - 0x0370)
class UJackUMGVoiceDramaHDPafuPafu : public UJackUMGWidgetBase
{
public:
	struct FScriptMulticastDelegate                    VoiceDramaHDPafuPafuCrossFadeBPDelegate;                  // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    VoiceDramaHDPafuPafuShakeLeftBPDelegate;                  // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    VoiceDramaHDPafuPafuShakeRightBPDelegate;                 // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x38];                                      // 0x03A0(0x0038) MISSED OFFSET
	TArray<struct FJackVoiceDramaHDPafuPafuTargetNPC>  NPCDataArray;                                             // 0x03D8(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst)
	bool                                               bIsSetup;                                                 // 0x03E8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bIsControllerDumped;                                      // 0x03E9(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03EA(0x0002) MISSED OFFSET
	float                                              FacialChangeSpeed;                                        // 0x03EC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              WaitVoicePlayTimer;                                       // 0x03F0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ShakeAnimationSpeed;                                      // 0x03F4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ShakeAnimationMaxHeight;                                  // 0x03F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              VoiceDistance;                                            // 0x03FC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                PafuunVerticalNum;                                        // 0x0400(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                PafuunHorizontalNum;                                      // 0x0404(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   PafuunLowScale;                                           // 0x0408(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	struct FVector2D                                   PafuunHighScale;                                          // 0x0410(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	struct FVector2D                                   PafuunMostHighScale;                                      // 0x0418(0x0008) (Edit, BlueprintVisi, IsPlainOldData)
	class AJackPafuPafuMode*                           HDManager;                                                // 0x0420(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0428(0x0008) MISSED OFFSET
	struct FJackVoiceDramaHDTutorial                   TutorialData;                                             // 0x0430(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, EditConst)
	bool                                               bIsTutorial;                                              // 0x0440(0x0001) (Edit, BlueprintVisi, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0441(0x0003) MISSED OFFSET
	float                                              WaitVoicePlayTimerTutorial;                               // 0x0444(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGVoiceDramaHDPafuPafu");
		return ptr;
	}


	void UnBindWaitVoice();
	void StartTutorialEvent();
	void StartTutorial();
	void StartCountDownEvent();
	void StartCountDown();
	void ShakePS4Controller(TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InStrength);
	void SetupTutorial();
	void SetupRound(TEnumAsByte<EJackVoiceDramaHDPafuPafuWhatRound> InRound);
	void SetupHDPafuPafu();
	void SetRound(TEnumAsByte<EJackVoiceDramaHDPafuPafuWhatRound> InRound);
	void SetNPCShakeFlag(int NPCIndex, bool bIsShakeSetter);
	void SetNPCDataArray(TArray<struct FJackVoiceDramaHDPafuPafuTargetNPC> InNPCDataArray);
	void SetNPCData(TEnumAsByte<EJackVoiceDramaHDPafuPafuWhatRound> InRound, TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> InLeftRight, struct FJackVoiceDramaHDPafuPafuTargetNPC* OutNPC);
	void SetJoyConMotorReactFlagAll(bool bIsMotorReact);
	void SetImageShake(int NPCIndex);
	void SetImageFade(class UImage* Image, class UImage* ImageBack, int NPCIndex);
	bool SelectRequestVoiceTutorial(TEnumAsByte<EJackVoiceDramaHDPafuPafuVoiceTagTutorial> InVoiceTag);
	bool SelectRequestVoice(TEnumAsByte<EJackVoiceDramaHDPafuPafuVoiceTag> InVoiceTag, int NPCIndex, TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InJoyConPower);
	bool ProgressCountTutorial();
	bool PlaySoundSE(const struct FName& SoundLabelID, int InLeftRightInteger);
	void PlayImageShakeDelegate(TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> InLeftRight, TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InJoyConPower);
	void NPCFacialDamage(int NPCIndex, bool* bFacialChange, bool* bKnockout);
	bool NPCDamage(int NPCIndex);
	int LeftRightToInteger(TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> InLeftRight);
	void KnockoutNPCAll();
	void KnockoutNPC(class UImage* Image, class UImage* ImageBack, int NPCIndex);
	int JoyConPowerToInteger(TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> Power);
	void JackUMGVoiceDramaHDPafuPafuShakeRightBPDelegate__DelegateSignature(TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InJoyConPower);
	void JackUMGVoiceDramaHDPafuPafuShakeLeftBPDelegate__DelegateSignature(TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InJoyConPower);
	void JackUMGVoiceDramaHDPafuPafuCrossFadeBPDelegate__DelegateSignature(TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> EventType);
	bool IsShake(int NPCIndex);
	bool IsNotShipping();
	bool IsKnockout(int NPCIndex);
	bool IsFacialFade(int NPCIndex);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuWhatRound> IntegerToWhatRound(int InRound);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> IntegerToLeftRight(int No);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> IntegerToJoyConPower(int InJoyConPower);
	void InitRoundImage(TArray<class UImage*> ImageArray, int NPCIndex);
	void InitBackgroundImage(class UImage* Image);
	class UTexture2D* GetRoundNetabareBackgroundTexture(TEnumAsByte<EJackVoiceDramaHDPafuPafuWhatRound> InRound);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuWhatRound> GetRound();
	int GetRandomPafuunRegionIndex(TArray<struct FVector2D> RegionArray, int PreviousRegionIndex);
	class UAudioComponent* GetPlayingAudioComponentTutorial();
	class UAudioComponent* GetPlayingAudioComponent(int NPCIndex);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> GetPinInsertLeftRight(TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> InLeftRight);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> GetPinInsertJoyConPower(TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InJoyConPower);
	TArray<struct FVector2D> GetPafuunRegionArray(class UImage* Image, int DivX, int DivY, float OffsetX, float OffsetY);
	TEnumAsByte<EJackVoiceDramaHDPafuPafuVoiceTag> GetPafuPafuOrKnockoutVoice(int NPCIndex);
	TArray<class UImage*> GetNPCImageArray(TEnumAsByte<EJackVoiceDramaHDPafuPafuLeftRight> InLeftRight);
	class UTexture2D* GetNextFacialPath(int NPCIndex, int AddIndex);
	class UTexture2D* Get3rdNetabareBackgroundTexture();
	void FinishHDPafuPafu();
	ESlateVisibility DebugDoonEnable();
	void CopyDataTableStatus();
	void ClosePafuPafuEvent();
	void ClosePafuPafu();
	void ChangeImageOrder(TArray<class UImage*> ImageArray, class UTexture2D* ForwardTexture, class UTexture2D* BackwardTexture);
	void ChangeImageBeforeAndAfter(TArray<class UImage*> ImageArray, int NPCIndex, TEnumAsByte<EJackVoiceDramaHDPafuPafuJoyConPower> InJoyConPower);
	void BindWaitVoice();
};


// Class JackGame.JackUMGVoiceDramaSelect
// 0x0078 (0x04A8 - 0x0430)
class UJackUMGVoiceDramaSelect : public UJackUMGBrowserBase
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0430(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGVoiceDramaSelect");
		return ptr;
	}


	void SetWait(bool bWait);
	void SetSleep(bool bSleep);
	void SetSelectTutorial(bool bSelect);
	void SetSelectEShop(TEnumAsByte<EJackVoiceDramaSelectEShop> InSelectEShopType);
	void SetSaveVolume(EJackAudioVolume InBGMVolume, EJackAudioVolume InSEVolume);
	void SetOpenVoiceDramaStopTick(bool bIsStopTick);
	void SetOpenPage(int InOpenPage);
	void SetMaxIndexPage(int InMaxIndexPage);
	void SetLoopAnimation(int ButtonIndex, bool bIsLoopAnim);
	void SetInitScenarioImage(bool bIsInitScenario);
	void SetIndexNumber(int ItemIndex);
	void SetDLCCompleteMode(TEnumAsByte<EJackVoiceDramaSelectDLCCompleteMode> InMode);
	void SetButtonScale(int ButtonIndex, float InScale);
	void SetButtonAnimationParam(TEnumAsByte<EJackVoiceDramaSelectAnimButton> InAnimButtonType, class UImage* ButtomTexture);
	void SetButtonAnimation(int ButtonIndex, bool bIsButtonAnim);
	void SetAnimationTime(int ButtonIndex, float InAnimTime);
	void SaveSystemData();
	void OpenMessageWindowSetting();
	bool IsWait();
	bool IsVoiceDramaSleep();
	bool IsVoiceDramaComplete(int InScenarioNo);
	bool IsScenarioValidInterruption(int ScenarioNumber);
	bool IsOpenVoiceDramaStopTick();
	bool IsLoopAnimation(int ButtonIndex);
	bool IsInitScenarioImage();
	bool IsButtonAnimation(int ButtonIndex);
	void InitButtonAnim(TEnumAsByte<EJackVoiceDramaSelectAnimButton> InAnimButtonType);
	void GetVoiceScenarioData();
	TArray<class UJackUMGItemData*> GetVoiceDramaScenarioList();
	TEnumAsByte<EJackVoiceDramaSelectAnimButton> GetTypeFromIndex(int InIndexNumber);
	TEnumAsByte<EJackVoiceDramaSelectEShop> GetSelectEShop();
	class UTexture2D* GetScenarioTextureFromItemListNumber(int InItemListNumber);
	class UTexture2D* GetScenarioTexture(int ScenarioNumber);
	struct FString GetScenarioOverviewTextFrom(int InItemListNumber);
	struct FString GetScenarioOverviewText(int ScenarioNumber);
	int GetScenarioNoFormItemIndex(int ItemIndex);
	EJackAudioVolume GetSaveSEVolume();
	EJackAudioVolume GetSaveBGMVolume();
	int GetOpenPage();
	int GetMaxIndexPage();
	int GetLatestInterruptScenarioID();
	int GetIndexNumberFromScenarioNumber(int InScenarioNumber);
	int GetIndexNumber();
	class UJackUMGItemData* GetEshopItemList();
	TEnumAsByte<EJackVoiceDramaSelectDLCCompleteMode> GetDLCCompleteMode();
	float GetButtonScale(int ButtonIndex);
	int GetButtonAnimationSize();
	struct FJackVoiceDramaSelectButtonAnimation GetButtonAnimationParam(TEnumAsByte<EJackVoiceDramaSelectAnimButton> InAnimButtonType);
	class UImage* GetButtomIcon(int ButtonIndex);
	float GetAnimationTime(int ButtonIndex);
	void CloseMessageWindowSetting();
};


// Class JackGame.JackUMGVoiceDramaSelectStaffList
// 0x0010 (0x0440 - 0x0430)
class UJackUMGVoiceDramaSelectStaffList : public UJackUMGBrowserBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0430(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGVoiceDramaSelectStaffList");
		return ptr;
	}


	TArray<class UJackUMGItemData*> GetStaffListData();
};


// Class JackGame.JackUMGVoiceDramaSelectEShop
// 0x0008 (0x0378 - 0x0370)
class UJackUMGVoiceDramaSelectEShop : public UJackUMGWidgetBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0370(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGVoiceDramaSelectEShop");
		return ptr;
	}


	void SetVoiceDramaSelect(class UJackUMGVoiceDramaSelect* InVoiceDramaSelect);
	class UJackUMGVoiceDramaSelect* GetVoiceDramaSelect();
};


// Class JackGame.JackUMGWebBrowser
// 0x0008 (0x0438 - 0x0430)
class UJackUMGWebBrowser : public UJackUMGBrowserBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0430(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWebBrowser");
		return ptr;
	}


	bool OpenWebBrowser();
	void CloseWebBrowser();
};


// Class JackGame.JackUMGWorldMapWidget
// 0x02B0 (0x0620 - 0x0370)
class UJackUMGWorldMapWidget : public UJackUMGWidgetBase
{
public:
	TWeakObjectPtr<class UJackUMGMapController>        MapController;                                            // 0x0370(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UJackGameFlag>                GameFlag;                                                 // 0x0378(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  WorldMapTexture;                                          // 0x0380(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   MapSymbolRenderTextureSize;                               // 0x0388(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UCanvasRenderTarget2D*                       MapSymbolRenderTarget;                                    // 0x0390(0x0008) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<EJackMapSymbol>                             MapSymbolTypesToDisplay;                                  // 0x0398(0x0010) (BlueprintVisi, ZeroConstructor)
	class UJackUMGMapFloorInfo*                        DisplayingFloorInfo;                                      // 0x03A8(0x0008) (BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MapSymbolScale;                                           // 0x03B0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PseudoPCWorldPosition;                                    // 0x03B4(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	class UJackUMGWidgetBase*                          MapMenuRootWidget;                                        // 0x03C0(0x0008) (Edit, BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UJackUMGWidgetBase*>                  MapMenuWidgetList;                                        // 0x03C8(0x0010) (Edit, BlueprintVisi, ExportObject, ZeroConstructor)
	TArray<class UJackUMGMapTextItemBase*>             SelectedNeighborMapTextItems;                             // 0x03D8(0x0010) (ExportObject, ZeroConstructor)
	float                                              ZoomFactor;                                               // 0x03E8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bKeepViewCenterInZoomOut;                                 // 0x03EC(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bZoomDPadScrollEnabled;                                   // 0x03ED(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03EE(0x0002) MISSED OFFSET
	float                                              ZoomOperationAcceptiveAngle;                              // 0x03F0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZoomMoveDistance;                                         // 0x03F4(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZoomAccelFactor;                                          // 0x03F8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ZoomCenterPositionTolerance;                              // 0x03FC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 ZoomMoveVelocityCurve;                                    // 0x0400(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 ZoomScaleVelocityCurve;                                   // 0x0408(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZoomInOutTime;                                            // 0x0410(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ZoomMoveCenterTime;                                       // 0x0414(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ZoomInOutTransCoefficient;                                // 0x0418(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ZoomInOutScaleCoefficient;                                // 0x0420(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0428(0x0030) MISSED OFFSET
	class UJackUMGMainMapOverlayWidgetBase*            MapTextWidget;                                            // 0x0458(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1B4];                                     // 0x0460(0x01B4) MISSED OFFSET
	float                                              DebugDeltaTimeScale;                                      // 0x0614(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0618(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGWorldMapWidget");
		return ptr;
	}


	void UpdateZoomMode(float DeltaTime);
	void UpdateParentMapInfo();
	struct FVector2D TransformToMapView(const struct FVector& WorldPosition);
	bool ShouldDisplayNowLoading();
	void SetSelectedNeighborMapVolumeID(const struct FName& MapVolumeID);
	void SetNowLoading(bool bNowLoading);
	class UJackUMGMainMapOverlayWidgetBase* SetMapTextWidget(class UJackUMGWidgetBase* Widget);
	void SetMapSymbolRenderingEnabled(bool bEnabled);
	void SetKeyExclusiveEnabled(bool bEnabled);
	void ResetZoomScale(float InScale);
	class UJackUMGWidgetBase* PushMenu(class UClass* MenuWidgetClass, bool bIsFocus);
	void PopMenu(bool bRemoveWidget, class UJackUMGWidgetBase** PoppedWidget, class UJackUMGWidgetBase** CurrentActiveWidget);
	void OnEmptyPointerTargetsEvent();
	void OnDrawMapSymbolRenderTarget(class UCanvas* Canvas, int Width, int Height);
	void OnDetailedKeyEvent(TEnumAsByte<EJackKeys> Key, bool Pressed, bool Released);
	void OnConstructWidget();
	void MoveZoomCenterPosition(const struct FVector& WorldPosition, bool bWithAnimation);
	void LeaveZoomeMode();
	bool IsScrollableToUp();
	bool IsScrollableToRight();
	bool IsScrollableToLeft();
	bool IsScrollableToDown();
	bool IsPCMarkerVisible();
	bool IsNowLoading();
	bool IsMapSymbolRenderingEnabled();
	bool IsKeyDown(TEnumAsByte<EJackKeys> Key);
	bool IsDisplayingCurrentFloor();
	struct FVector GetZoomCenterWorldPosition();
	struct FName GetRenderTargetName();
	class UJackUMGMainMapOverlayWidgetBase* GetMapTextWidget();
	class UCanvasPanel* GetMapTextDrawCanvas();
	struct FVector2D GetDesiredMapViewportSize();
	float GetDefaultZoomScale();
	struct FVector2D GetActualMapViewportSize();
	void EnterZoomMode();
	class UMaterialInstanceDynamic* CreateMID();
	class UMaterialInstanceDynamic* CreateMapSymbolMID();
};


// Class JackGame.JackUMGZukanWindow
// 0x0060 (0x0460 - 0x0400)
class UJackUMGZukanWindow : public UJackUMGWindowBase
{
public:
	class UJackUMGValueController*                     ValueController;                                          // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               IsComma;                                                  // 0x0408(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsZenkaku;                                                // 0x0409(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x040A(0x0006) MISSED OFFSET
	TArray<class UJackUMGItemData*>                    ItemDataList;                                             // 0x0410(0x0010) (BlueprintVisi, ZeroConstructor)
	class UJackUMGPageController*                      PageController;                                           // 0x0420(0x0008) (BlueprintVisi, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FText                                       TotalText;                                                // 0x0428(0x0018) (BlueprintVisi, BlueprintReadOnly)
	int                                                TotalPrice;                                               // 0x0440(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InputValue;                                               // 0x0444(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                UnitPrice;                                                // 0x0448(0x0004) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisibleUpArrow;                                        // 0x044C(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsVisibleDownArrow;                                      // 0x044D(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x12];                                      // 0x044E(0x0012) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUMGZukanWindow");
		return ptr;
	}


	void SetupPageController(int InInitDataIndex, int InInitPage, int InItemsPerPage, TArray<class UJackUMGItemData*> InItemDataList);
	void InitZukanWindow(class UCanvasPanel* ItemListCanvas, class UJackUMGPageController* InPageController, int InZOrder);
	int GetTotalPrice();
	int GetMaxPage();
	int GetItemsPerPage();
	int GetInputValue();
	int GetDispTopIndex();
	int GetDispEndIndex();
	int GetCurrentPage();
	void DispItemListImpl(int InPage);
	int ChangePage(bool IsRight);
};


// Class JackGame.JackUpdateWhenNotRenderedForTagTrack
// 0x0008 (0x00B0 - 0x00A8)
class UJackUpdateWhenNotRenderedForTagTrack : public UJackToggleBaseTrack
{
public:
	struct FName                                       TargetActorTag;                                           // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUpdateWhenNotRenderedForTagTrack");
		return ptr;
	}

};


// Class JackGame.JackUpdateWhenNotRenderedForTagTrackInst
// 0x0010 (0x0050 - 0x0040)
class UJackUpdateWhenNotRenderedForTagTrackInst : public UJackToggleBaseTrackInst
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUpdateWhenNotRenderedForTagTrackInst");
		return ptr;
	}

};


// Class JackGame.JackUtils
// 0x0000 (0x0038 - 0x0038)
class UJackUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackUtils");
		return ptr;
	}

};


// Class JackGame.JackVector4PropertyTrack
// 0x0008 (0x00B8 - 0x00B0)
class UJackVector4PropertyTrack : public UInterpTrackVector4Base
{
public:
	struct FName                                       PropertyName;                                             // 0x00B0(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVector4PropertyTrack");
		return ptr;
	}

};


// Class JackGame.JackVector4PropertyTrackInst
// 0x0018 (0x0060 - 0x0048)
class UJackVector4PropertyTrackInst : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	struct FVector4                                    ResetVector;                                              // 0x0050(0x0010) (IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVector4PropertyTrackInst");
		return ptr;
	}

};


// Class JackGame.JackVectorMaterialParameterTrack
// 0x0008 (0x00D0 - 0x00C8)
class UJackVectorMaterialParameterTrack : public UInterpTrackVectorMaterialParam
{
public:
	bool                                               bApplyToAllMaterial;                                      // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVectorMaterialParameterTrack");
		return ptr;
	}

};


// Class JackGame.JackVectorMaterialParameterTrackInst
// 0x0030 (0x00A0 - 0x0070)
class UJackVectorMaterialParameterTrackInst : public UInterpTrackInstVectorMaterialParam
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstancesToAll;                                   // 0x0070(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectorsToAll;                                        // 0x0080(0x0010) (ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefsToAll;                               // 0x0090(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVectorMaterialParameterTrackInst");
		return ptr;
	}

};


// Class JackGame.JackVehicle
// 0x0120 (0x1560 - 0x1440)
class AJackVehicle : public AJackPlayableCharacter
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x1440(0x0010) MISSED OFFSET
	float                                              UnmountWaitSecForNoPossessControl;                        // 0x1450(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x1454(0x0004) MISSED OFFSET
	struct FName                                       UnmountMaterialAnimationName;                             // 0x1458(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD0];                                      // 0x1460(0x00D0) MISSED OFFSET
	TWeakObjectPtr<class AJackCharacter>               Rider;                                                    // 0x1530(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	TEnumAsByte<EJackVehicle>                          VehicleType;                                              // 0x1538(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackVehicleModelId>                   VehicleModelType;                                         // 0x1539(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x153A(0x0006) MISSED OFFSET
	TArray<struct FName>                               RideSocketNames;                                          // 0x1540(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class UJackMiniMapTargetComponent*                 MiniMapTargetComponent;                                   // 0x1550(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x1558(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicle");
		return ptr;
	}


	void Unmount(bool bImmediate, bool bForce);
	void SetUnmountParticle(class UParticleSystemComponent* Particle);
	void SetUnmountNaviCheckOff(bool bEnable, TEnumAsByte<EJackUnmountNaviCheckOffPurpose> InType);
	void SetMovementEnableForEvent(TEnumAsByte<EJackCharacterControlChannel> Channel, bool bEnable);
	void SetMiniMapArea();
	void PlayOrStopNoMountAnim(bool bRun);
	void OnUnmount(class AJackCharacter* InRider);
	void OnMountInteractionEnd();
	void OnMount(class AJackCharacter* InRider);
	void OnEndMountBp();
	void OnBeginMoveOffBp();
	void Mount(class AJackCharacter* InRider, bool bImmediate);
	bool IsUnmounting();
	bool IsUnmountEnable(bool bForceUnmount, bool bDebug);
	bool IsMovementEnabledBp();
	class AJackPlayableCharacter* GetRiderToPlayableChracter();
};


// Class JackGame.JackVehicleAnimInstance
// 0x0180 (0x0D60 - 0x0BE0)
class UJackVehicleAnimInstance : public UJackAnimInstance
{
public:
	unsigned char                                      UnknownData00[0x150];                                     // 0x0BE0(0x0150) MISSED OFFSET
	float                                              MoveMotionRateWalkSpeed;                                  // 0x0D30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootMotionMultiChangeSpeed;                               // 0x0D34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootMotionMultiLimitMin;                                  // 0x0D38(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RootMotionMultiThreshold;                                 // 0x0D3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WaitColliderMultiplier;                                   // 0x0D40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0D44(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleAnimInstance");
		return ptr;
	}


	void UpdateStateMachineFlagsV104(float DeltaSeconds);
	void UpdateStateMachineFlagsV012(float DeltaSeconds);
	void UpdateStateMachineFlags(float DeltaSeconds);
	void SetRootMotionMode(TEnumAsByte<ERootMotionMode> RootMotionNode);
	void SetRoar(float Timer, float RequestOffAddSec);
	void SetParameterFloatRaw(TEnumAsByte<EJackVehicleParameterFloat> ID, float FloatParameter);
	void SetParameterFloat(TEnumAsByte<EJackVehicleParameterFloat> ID, float FloatParameter, bool bIgnoreL1R1Turn);
	void SetParameterBoolRaw(TEnumAsByte<EJackVehicleParameterBool> ID, bool bOn);
	void SetParameterBool(TEnumAsByte<EJackVehicleParameterBool> ID, bool bOn, bool bIgnoreL1R1Turn);
	void SetOffsetUpperOn(bool bOn, float InterpSec);
	void SetNowIdle(bool bIdle);
	void SetMoveMotionTurnAngleRate(float Rate);
	void SetMoveMotionBlendeRate(float Rate);
	void SetJumpCondition(bool bJump);
	void SetForceRun(bool bOn);
	void SetFootIKEnable(bool bOn, float HeightOffLerpSec);
	void SetDashCancel();
	void SetCallBPConstructionScript();
	void SetAttitudeControlEnable(bool bOn);
	void PlayDashSE();
	bool IsInRoar();
	bool IsCanRoarRequest();
	float GetParameterFloat(TEnumAsByte<EJackVehicleParameterFloat> ID);
	bool GetParameterFlags(TEnumAsByte<EJackVehicleParameterStateMachineFlags> ID);
	bool GetParameterBool(TEnumAsByte<EJackVehicleParameterBool> ID);
	float GetMoveMotionTurnAngleRate();
	float GetMoveMotionBlendRate();
	class USceneComponent* GetMeshRootComponent();
	bool CanChangeFromRemainingMotion(float Remaining, float Left);
	void ActivateDashParticle(bool bActive);
};


// Class JackGame.JackVehicleControllerComponent
// 0x0110 (0x0238 - 0x0128)
class UJackVehicleControllerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	float                                              CameraBlendTime;                                          // 0x0130(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EViewTargetBlendFunction>              CameraBlendFunc;                                          // 0x0134(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	float                                              CameraBlendExp;                                           // 0x0138(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF4];                                      // 0x013C(0x00F4) MISSED OFFSET
	TWeakObjectPtr<class AJackFriendAIController>      FieldPlayerAIController;                                  // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleControllerComponent");
		return ptr;
	}

};


// Class JackGame.JackVehicleFakeForceTrack
// 0x0000 (0x00A8 - 0x00A8)
class UJackVehicleFakeForceTrack : public UJackToggleBaseTrack
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleFakeForceTrack");
		return ptr;
	}

};


// Class JackGame.JackVehicleFakeForceTrackInst
// 0x0000 (0x0040 - 0x0040)
class UJackVehicleFakeForceTrackInst : public UJackToggleBaseTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleFakeForceTrackInst");
		return ptr;
	}

};


// Class JackGame.JackVehicleMovementComponent
// 0x00D0 (0x0F20 - 0x0E50)
class UJackVehicleMovementComponent : public UJackPlayableMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0E50(0x0060) MISSED OFFSET
	bool                                               bExternCollideUseMoveComponent;                           // 0x0EB0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bExternCollideFirstPenetration;                           // 0x0EB1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bForceUseExternCollide;                                   // 0x0EB2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0EB3(0x0001) MISSED OFFSET
	struct FVector                                     ExternSweepRate;                                          // 0x0EB4(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	struct FName                                       ExternCollideTagName;                                     // 0x0EC0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ExternCollideDumpVelocityRate;                            // 0x0EC8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPrevVelocityApplyedIfZero;                             // 0x0ECC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugStrictRotateMoveDelta;                              // 0x0ECD(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0ECE(0x0002) MISSED OFFSET
	float                                              PenetrationAddLength;                                     // 0x0ED0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugAddIgnoreHitArrayNonFirstOnly;                      // 0x0ED4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bCorrectToFirstWalkingVelocity;                           // 0x0ED5(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0ED6(0x0002) MISSED OFFSET
	float                                              CorrectToFirstWalkingVelocityClipAddStartVelocity;        // 0x0ED8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2C];                                      // 0x0EDC(0x002C) MISSED OFFSET
	TArray<TWeakObjectPtr<class UShapeComponent>>      ExternCollideArray;                                       // 0x0F08(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0F18(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleMovementComponent");
		return ptr;
	}


	void ClearVelocity();
	bool STATIC_CheckShapeComponentNuke(class UShapeComponent* Shape);
};


// Class JackGame.JackVehicleFlyMovementComponent
// 0x0030 (0x0F50 - 0x0F20)
class UJackVehicleFlyMovementComponent : public UJackVehicleMovementComponent
{
public:
	float                                              JumpBoostTime;                                            // 0x0F20(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bFixJumpMode;                                             // 0x0F24(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0F25(0x0003) MISSED OFFSET
	float                                              FixJumpAccelZ;                                            // 0x0F28(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     JumpBoostVelocity;                                        // 0x0F2C(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, IsPlainOldData)
	float                                              FallFlyDumpRateXY;                                        // 0x0F38(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FallFlyDumpRateZ;                                         // 0x0F3C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0F40(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleFlyMovementComponent");
		return ptr;
	}

};


// Class JackGame.JackVehicleHasBackMovementComponent
// 0x0040 (0x0F60 - 0x0F20)
class UJackVehicleHasBackMovementComponent : public UJackVehicleMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0F20(0x0020) MISSED OFFSET
	float                                              ContinueSteeringForwardMin;                               // 0x0F40(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ContinueSteeringForwardMax;                               // 0x0F44(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0F48(0x0008) MISSED OFFSET
	float                                              MaxSpeed;                                                 // 0x0F50(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ChangeSpeedRate;                                          // 0x0F54(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ChangeSteeringSpeedRate;                                  // 0x0F58(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0F5C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleHasBackMovementComponent");
		return ptr;
	}

};


// Class JackGame.JackVehicleMonster
// 0x05D0 (0x1B30 - 0x1560)
class AJackVehicleMonster : public AJackVehicle
{
public:
	class USceneComponent*                             MeshRootComponent;                                        // 0x1560(0x0008) (Edit, BlueprintVisi, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x1568(0x0038) MISSED OFFSET
	bool                                               bSetMeshRootAttitude;                                     // 0x15A0(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSetMeshRootIK;                                           // 0x15A1(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugDrawUnmountPoint;                                   // 0x15A2(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x15A3(0x0005) MISSED OFFSET
	struct FName                                       FirstMessageId;                                           // 0x15A8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstMessageShowedSaveFlagId;                             // 0x15B0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FName                                       DestructibleMessageId;                                    // 0x15B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  DT_MotionSyncTable;                                       // 0x15C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FallSteeringParam;                                        // 0x15C8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SteeringRate;                                             // 0x15CC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TurnRate;                                                 // 0x15D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusMin;                                          // 0x15D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusMax;                                          // 0x15D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusChangeSpeedStart;                             // 0x15DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusChangeSpeedEnd;                               // 0x15E0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotatePitchStartSpeed;                                    // 0x15E4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotatePitchStartSteeringRate;                             // 0x15E8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotatePitchLimit;                                         // 0x15EC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateDampRate;                                           // 0x15F0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              AdditionalNowRotationPitchTargetLerpRate;                 // 0x15F4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x15F8(0x0004) MISSED OFFSET
	float                                              DestroyDistance;                                          // 0x15FC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSkipMotionEndBattle;                                   // 0x1600(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x1601(0x0003) MISSED OFFSET
	struct FVector                                     MountMeshLocalLocation;                                   // 0x1604(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	class UAnimMontage*                                AnimMontageRiderTurnBackLeft;                             // 0x1610(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                AnimMontageRiderTurnBackRight;                            // 0x1618(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MountFadeWaitSec;                                         // 0x1620(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MountNaviSpeed;                                           // 0x1624(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SpawnSplashCollisionClass;                                // 0x1628(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UClass*>                              SpawnSplashCollisionClassSubArray;                        // 0x1630(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       SpawnSplashCollisionSocketName;                           // 0x1640(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackVehcileMonsterSplashScoketType>   SplashSnapType;                                           // 0x1648(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x1649(0x0007) MISSED OFFSET
	int                                                SpawnSplashSubDivNum;                                     // 0x1650(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x1654(0x0004) MISSED OFFSET
	TArray<class UAnimMontage*>                        AnimMontageSplash;                                        // 0x1658(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class UAnimMontage*>                        AnimMontageRiderSplash;                                   // 0x1668(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EJackMonsterFieldDamageReaction>       SplashDamageReactionType;                                 // 0x1678(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMovementDisableInSplash;                                 // 0x1679(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1E];                                      // 0x167A(0x001E) MISSED OFFSET
	float                                              HitObjectDownSpeedRate;                                   // 0x1698(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusDash;                                         // 0x169C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    TurnRotationRateDash;                                     // 0x16A0(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x16AC(0x000C) MISSED OFFSET
	class USoundBase*                                  DashPlaySe;                                               // 0x16B8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  DashPlaySeLoop;                                           // 0x16C0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x16C8(0x0008) MISSED OFFSET
	class UAudioComponent*                             DashLoopSE;                                               // 0x16D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData09[0x88];                                      // 0x16D8(0x0088) MISSED OFFSET
	bool                                               bIsDashRequest;                                           // 0x1760(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInDash;                                                // 0x1761(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDashEndRequest;                                        // 0x1762(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x1763(0x0001) MISSED OFFSET
	float                                              ToDashEndInterpolationSpeed;                              // 0x1764(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DashCameraData;                                           // 0x1768(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashCameraInterpSpeedStart;                               // 0x1770(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashCameraInterpSpeedEnd;                                 // 0x1774(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x18];                                      // 0x1778(0x0018) MISSED OFFSET
	float                                              TurnBackAngle;                                            // 0x1790(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TurnInAngle;                                              // 0x1794(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TurnOutAngle;                                             // 0x1798(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              WalkForwardingRate;                                       // 0x179C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RunOutForwardingRate;                                     // 0x17A0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RunForwardingRate;                                        // 0x17A4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ToDashInterpolationSpeed;                                 // 0x17A8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ToRunInterpolationSpeed;                                  // 0x17AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ToStopInterpolationSpeed;                                 // 0x17B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ToWalkInterpolationSpeed;                                 // 0x17B4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CanTurnMoveMotionBlendRate;                               // 0x17B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bSteeringOn;                                              // 0x17BC(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bTurnAnimOn;                                              // 0x17BD(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x2];                                       // 0x17BE(0x0002) MISSED OFFSET
	class UAnimMontage*                                TurnStartAnim;                                            // 0x17C0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                TurnStartAnimP001;                                        // 0x17C8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              LimitTurnAnimSteeringRate;                                // 0x17D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SteeringMotionWait;                                       // 0x17D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ReverseSteeringMotionWait;                                // 0x17D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x29C];                                     // 0x17DC(0x029C) MISSED OFFSET
	float                                              TalkRotateSec;                                            // 0x1A78(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TalkRotateAngle;                                          // 0x1A7C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0xB0];                                      // 0x1A80(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleMonster");
		return ptr;
	}


	void StartTalk(const struct FVector& TalkPos);
	void SetWaitResume();
	void SetWaitPause();
	void SetSkipSnapToGroundOnTeleport(bool bSkip);
	void SetIKAndHeightFadeOff(float InterpSec);
	void SetFootIKAdjustMeshHeightZero(bool bOn);
	void SetDashParticle(class UParticleSystemComponent* Particle);
	void RemoveSplashCollision();
	void PlayDashSE(bool bPreloadOnly);
	void OnUnmountStart();
	void OnTeleportedCallCore();
	void OnSplashRequest();
	void OnPlayerMovementModeChanged(class AJackCharacter* JackCharacter, TEnumAsByte<EMovementMode> OldMovementMode, TEnumAsByte<EMovementMode> NewMovementMode);
	void OnMountStart();
	void OnHitObject(class AActor* Actor, const struct FHitResult& HitResult);
	void OnDashStartBp();
	void OnDashEndBp();
	void OnCallThroughCapsuleControllerBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCallThroughCapsuleController(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void LerpToSetMountMeshLocation(class AJackCharacter* InRider, float LerpRate);
	void Latent_VehicleSplash(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Latent_VehicleSimpleNavigation(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FVector& TargetLocation, const struct FRotator& TargetRotator, float MoveSec, bool bIgnoreExternCollision, bool bOverrideTargetLocationZ);
	float InterpToSlowHigh(float Start, float Target, float Rate);
	bool GetSkipSnapToGroundOnTeleport();
	float GetNowRotationPitch();
	void ForceDashOff(bool bOnlyDashStop);
	void ClearDash();
	void CapsuleControllOff();
	void CancelDash();
	void ApplySplashCollision();
	void ActivateDashParticle(bool bActive);
};


// Class JackGame.JackVehicleRiderComponent
// 0x0020 (0x01C0 - 0x01A0)
class UJackVehicleRiderComponent : public UJackCharacterComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x01A0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleRiderComponent");
		return ptr;
	}


	bool IsRidingOnVehicle();
	TEnumAsByte<EJackVehicle> GetRidingOnVehicleType();
	class AJackVehicle* GetRidingOnVehicle();
};


// Class JackGame.JackVehicleRiderControllerComponent
// 0x00A8 (0x01D0 - 0x0128)
class UJackVehicleRiderControllerComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0128(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleRiderControllerComponent");
		return ptr;
	}

};


// Class JackGame.JackVehicleShip
// 0x0070 (0x14B0 - 0x1440)
class AJackVehicleShip : public AJackPlayableCharacter
{
public:
	float                                              RotateRadiusMin;                                          // 0x1440(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusMax;                                          // 0x1444(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusChangeSpeedStart;                             // 0x1448(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotateRadiusChangeSpeedEnd;                               // 0x144C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               IsShipMove;                                               // 0x1450(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1451(0x0003) MISSED OFFSET
	float                                              ShipCameraYawLerpRate;                                    // 0x1454(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x1458(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShipPartyTalkStart;                                     // 0x1490(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShipPartyTalkEnd;                                       // 0x14A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleShip");
		return ptr;
	}


	void StartShipRun();
	void ShipPartyTalkStartDelegate__DelegateSignature();
	void ShipPartyTalkEndDelegate__DelegateSignature();
	void OnShipStopBp();
	void OnShipExceptStopBp();
	void OnShipDashStartBp();
	void OnShipDashEndBp();
	void Latent_StartSinkLeapAnimetion(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TEnumAsByte<EJackVehicleShipAnim> AnimType, bool InFast);
	void CancelDash();
};


// Class JackGame.JackVehicleUma
// 0x00E0 (0x1C10 - 0x1B30)
class AJackVehicleUma : public AJackVehicleMonster
{
public:
	float                                              ForceFallSec;                                             // 0x1B30(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x1B34(0x0004) MISSED OFFSET
	float                                              JumpCheckOffset;                                          // 0x1B38(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MaxJumpZ;                                                 // 0x1B3C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MinJumpZ;                                                 // 0x1B40(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    JumpAttitudeRotationSpeed;                                // 0x1B44(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	struct FRotator                                    JumpAddAttitudeRotation;                                  // 0x1B50(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              JumpMaxVelocity;                                          // 0x1B5C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMaxVelocity;                               // 0x1B60(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMinAnimationRate;                          // 0x1B64(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x1B68(0x0001) MISSED OFFSET
	bool                                               bNoWaiterMontage;                                         // 0x1B69(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xA6];                                      // 0x1B6A(0x00A6) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleUma");
		return ptr;
	}


	void StopAnimMontageWait();
	void StartAnimMontageWait();
	void SetJumpOff(bool bInJumpOff);
	void OnCallHorse();
};


// Class JackGame.JackVehicleUmaRace
// 0x03F0 (0x1F20 - 0x1B30)
class AJackVehicleUmaRace : public AJackVehicleMonster
{
public:
	class UCurveFloat*                                 DashCurveIn;                                              // 0x1B30(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DashCurveOut;                                             // 0x1B38(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 DashSpeedOfTimeCurve;                                     // 0x1B40(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 RotationSpeedCurve;                                       // 0x1B48(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 RotationDashSpeedCurve;                                   // 0x1B50(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 RotationOfSpeedRateCurve;                                 // 0x1B58(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 GoalSnapCurve;                                            // 0x1B60(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 TimeScheduleSpeedChangeCurve;                             // 0x1B68(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 BrakeDecCurve;                                            // 0x1B70(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 MoveRightValueCurve;                                      // 0x1B78(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DashSpeedRate;                                            // 0x1B80(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StartBDashAddSpeedRate;                                   // 0x1B84(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 StartBDashCurve;                                          // 0x1B88(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HeroHeroSpeedRate;                                        // 0x1B90(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              StartDashMaxAccel;                                        // 0x1B94(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RotateAngleLimit;                                         // 0x1B98(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedBrakeRate;                                           // 0x1B9C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DisableSnapTime;                                          // 0x1BA0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DashRecoverTime;                                          // 0x1BA4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DashOneSec;                                               // 0x1BA8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DashIntervalTime;                                         // 0x1BAC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DashPreIntervalTime;                                      // 0x1BB0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NextHealTime;                                             // 0x1BB4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DashIntervalTimeUsedEnergy;                               // 0x1BB8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoInputRotationInterpolate;                               // 0x1BBC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AIRotationSpeedYaw;                                       // 0x1BC0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ImpactVelocityScale;                                      // 0x1BC4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RecoveryStaminaGauge;                                     // 0x1BC8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x1BCC(0x0004) MISSED OFFSET
	class UClass*                                      DashCameraData2nd;                                        // 0x1BD0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DashCameraData3rd;                                        // 0x1BD8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashStartCameraInterpSpeed1st;                            // 0x1BE0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashStartCameraInterpSpeed2nd;                            // 0x1BE4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashStartCameraInterpSpeed3rd;                            // 0x1BE8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashEndCameraInterpSpeed;                                 // 0x1BEC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotationSpeedYaw;                                         // 0x1BF0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotationSpeedYawDash;                                     // 0x1BF4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDashJumpStaminaNoUse;                                  // 0x1BF8(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1BF9(0x0003) MISSED OFFSET
	float                                              ReverseRunCheckAngle;                                     // 0x1BFC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              ReverseRunCheckTime;                                      // 0x1C00(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              SnapPathDistance;                                         // 0x1C04(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashSnapPathDistance;                                     // 0x1C08(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashSteeringMultRate;                                     // 0x1C0C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TimeScheduleAddSpeedRateMax;                              // 0x1C10(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TimeScheduleAddSpeedRateMin;                              // 0x1C14(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TimeScheduleAddSpeedRateLerpRate;                         // 0x1C18(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              StartDisableSnapPathTime;                                 // 0x1C1C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              GaugeDamage;                                              // 0x1C20(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              GaugeDamageImpact;                                        // 0x1C24(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashEndRotationStartTime;                                 // 0x1C28(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              NoInputDashInterpolationMax;                              // 0x1C2C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              RotationLerpTime;                                         // 0x1C30(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsForceImpactPriority;                                   // 0x1C34(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1C35(0x0003) MISSED OFFSET
	float                                              MoveRightReactionValue;                                   // 0x1C38(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              StartDashAvaibableTime;                                   // 0x1C3C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpMaxMoveSpeed;                                         // 0x1C40(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              GoalSnapPathDistance;                                     // 0x1C44(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x104];                                     // 0x1C48(0x0104) MISSED OFFSET
	float                                              ForceFallSec;                                             // 0x1D4C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x1D50(0x0004) MISSED OFFSET
	struct FRotator                                    JumpAttitudeRotationSpeed;                                // 0x1D54(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	struct FRotator                                    JumpAddAttitudeRotation;                                  // 0x1D60(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              JumpMaxVelocity;                                          // 0x1D6C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMaxVelocity;                               // 0x1D70(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMinAnimationRate;                          // 0x1D74(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BrakeKeyValue;                                            // 0x1D78(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BrakeRotationMultiplyValue;                               // 0x1D7C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashBrakeRotationMultiplyValue;                           // 0x1D80(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TadunaBrakeRotationMultiplyValue;                         // 0x1D84(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TadunaDashBrakeRotationMultiplyValue;                     // 0x1D88(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              BrakeGaugeDownValue;                                      // 0x1D8C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EffectDashBrakeClass;                                     // 0x1D90(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundDashBrake;                                           // 0x1D98(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EffectBrakeClass;                                         // 0x1DA0(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class USoundBase*                                  SoundBrake;                                               // 0x1DA8(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DetouringTime;                                            // 0x1DB0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x1DB4(0x0004) MISSED OFFSET
	class UDataTable*                                  DT_MotionSyncTableP008;                                   // 0x1DB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  DT_MotionSyncTableNormal;                                 // 0x1DC0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x98];                                      // 0x1DC8(0x0098) MISSED OFFSET
	class UDataTable*                                  DT_TimeSchedule;                                          // 0x1E60(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x1E68(0x0008) MISSED OFFSET
	class UArrowComponent*                             DetouringPointLeft;                                       // 0x1E70(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UArrowComponent*                             DetouringPointRight;                                      // 0x1E78(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData08[0xA0];                                      // 0x1E80(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleUmaRace");
		return ptr;
	}


	void UpSpeed(float InUpSpeedRate, float InTime);
	void StopDash();
	void StopAnimMontageWait();
	void StartDashAI(float InDashTime, bool bForce);
	void StartChangeBaseSpeedAI(float SpeedRate);
	void StartBrakeAI(float InTime);
	void StartBDash();
	void StartAnimMontageWait();
	void SetSplineComponentArray(TArray<class USplineComponent*> SplineComponentArray);
	void SetHealGroupID(int GroupID);
	void SetGoalSpline(TArray<class USplineComponent*> InSpline);
	void SetFootStepAnimEvent(bool bEnable);
	void SetDetouringRightEnable(bool bEnable);
	void SetDetoruingLeftEnable(bool bEnable);
	void ResetReverseRun();
	void RemoveGimmick(class AJackUmaRaceGimmick* InGimmick);
	void RefleshDownSpeed();
	void OnVehicleHit(class AJackVehicleUmaRace* InVehicle, const struct FHitResult& InHitResult, float InDisableSnapPathTime);
	void OnStartRaceBp();
	void OnStartJumpBp();
	void OnStartBrakeBp();
	void OnReverseRun();
	void OnPauseEnd(bool bIsInRetire);
	void OnPauseBegin();
	void OnLapBp(int LapNo, bool bIsLastLap, bool bIsFinalLap, float FootStepVolume);
	void OnEndRaceBp();
	void OnEndJumpBp();
	void OnEndBrakeBp();
	void OnDashChangeBp(int InChangeLevel);
	bool IsValidGimmick();
	bool IsStartRace();
	bool IsReverseRun();
	bool IsJumpState();
	bool IsHeal(int GroupID);
	bool IsEndRace();
	bool IsDownSpeed();
	bool IsDashState();
	bool IsDashMaxSpeed();
	bool IsDashGaugeAvailable();
	bool IsDashFastState();
	bool IsCanSePlay();
	bool IsBrake();
	bool IsAI();
	void HealGauge(float InHealTime, bool bForceStateChange, bool bForce);
	void HalfHealGauge();
	class AJackUmaRaceUnit* GetUnit();
	float GetSpeedRate();
	struct FVector GetPathDir();
	TEnumAsByte<EJackUmaRaceDash> GetNowDashType();
	TArray<class AJackUmaRaceGimmick*> GetGimmickObjects();
	float GetDashSpeedRate();
	float GetDashLevelTime(TEnumAsByte<EJackUmaRaceDash> InDashType);
	void FullHealGauge();
	void ForceIntersectionMovement(float AdditionalSpeedRate, float Seconds);
	void EndOtherVehicleOverlap(class AJackVehicleUmaRace* InOtherVehicle);
	void EnablePathChange();
	void EnableCanJump();
	void DownSpeed(float InDowSpeedRate, float InTime);
	void DownGaugeImpact(float InSpeedRate, float InTime);
	void DownGauge(float InDeltaTime);
	void DisablePathChange();
	void DisableCanJump();
	void DashLevelDown();
	void DashGaugeReset();
	bool CheckImpactPriority(class AJackVehicleUmaRace* InVehicle);
	void ChangeMovementRaceMode();
	void BeginOtherVehicleOverlap(class AJackVehicleUmaRace* InOtherVehicle);
	void AddGimmick(class AJackUmaRaceGimmick* InGimmick);
};


// Class JackGame.JackVehicleUmaRaceMovementComponent
// 0x0000 (0x0F20 - 0x0F20)
class UJackVehicleUmaRaceMovementComponent : public UJackVehicleMovementComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleUmaRaceMovementComponent");
		return ptr;
	}

};


// Class JackGame.JackVehicleV012
// 0x0020 (0x1B50 - 0x1B30)
class AJackVehicleV012 : public AJackVehicleMonster
{
public:
	TWeakObjectPtr<class AActor>                       StaticMeshActor;                                          // 0x1B30(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x1B38(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV012");
		return ptr;
	}


	void SetUnmountGauge(bool bOn);
	float GetMovementSpeedRate();
};


// Class JackGame.JackVehicleV101
// 0x00B0 (0x1BE0 - 0x1B30)
class AJackVehicleV101 : public AJackVehicleMonster
{
public:
	float                                              ForceFallSec;                                             // 0x1B30(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x1B34(0x0004) MISSED OFFSET
	float                                              JumpCheckOffset;                                          // 0x1B38(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MaxJumpZ;                                                 // 0x1B3C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MinJumpZ;                                                 // 0x1B40(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    JumpAttitudeRotationSpeed;                                // 0x1B44(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	struct FRotator                                    JumpAddAttitudeRotation;                                  // 0x1B50(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              JumpMaxVelocity;                                          // 0x1B5C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMaxVelocity;                               // 0x1B60(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMinAnimationRate;                          // 0x1B64(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x78];                                      // 0x1B68(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV101");
		return ptr;
	}

};


// Class JackGame.JackVehicleV102
// 0x0020 (0x1B50 - 0x1B30)
class AJackVehicleV102 : public AJackVehicleMonster
{
public:
	float                                              AirDumpRate;                                              // 0x1B30(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x1B34(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV102");
		return ptr;
	}

};


// Class JackGame.JackVehicleV103
// 0x0030 (0x1B60 - 0x1B30)
class AJackVehicleV103 : public AJackVehicleMonster
{
public:
	bool                                               bMoveOffFromABP;                                          // 0x1B30(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1B31(0x0003) MISSED OFFSET
	float                                              AirDumpRate;                                              // 0x1B34(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x1B38(0x0010) MISSED OFFSET
	class UAnimMontage*                                AnimMontageRiderJumpAdd;                                  // 0x1B48(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UAnimMontage*                                AnimMontageJumpAdd;                                       // 0x1B50(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x1B58(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV103");
		return ptr;
	}

};


// Class JackGame.JackVehicleV104
// 0x00C0 (0x1C10 - 0x1B50)
class AJackVehicleV104 : public AJackVehicleV102
{
public:
	float                                              ForceFallSec;                                             // 0x1B50(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x1B54(0x0004) MISSED OFFSET
	float                                              JumpCheckOffset;                                          // 0x1B58(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MaxJumpZ;                                                 // 0x1B5C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MinJumpZ;                                                 // 0x1B60(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    JumpAttitudeRotationSpeed;                                // 0x1B64(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	struct FRotator                                    JumpAddAttitudeRotation;                                  // 0x1B70(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              JumpMaxVelocity;                                          // 0x1B7C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMaxVelocity;                               // 0x1B80(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartMotionMinAnimationRate;                          // 0x1B84(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x1B88(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV104");
		return ptr;
	}


	bool SetClimbingTrigger(bool bOn, bool bUp);
	void Latent_Climbing(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, bool bOn, bool bUp);
	bool IsInJumping();
};


// Class JackGame.JackShadowRadiusThresholdTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackShadowRadiusThresholdTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackShadowRadiusThresholdTrackInst");
		return ptr;
	}

};


// Class JackGame.JackVehicleV106
// 0x0010 (0x1C20 - 0x1C10)
class AJackVehicleV106 : public AJackVehicleUma
{
public:
	bool                                               bSyncOffAdditionalPitch;                                  // 0x1C10(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x1C11(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV106");
		return ptr;
	}

};


// Class JackGame.JackVehicleV105
// 0x00D0 (0x1C00 - 0x1B30)
class AJackVehicleV105 : public AJackVehicleMonster
{
public:
	float                                              ToGrideSpeed2D;                                           // 0x1B30(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              GrideGravityScale;                                        // 0x1B34(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CallUpIntervalSec;                                        // 0x1B38(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bSyncOffAdditionalPitch;                                  // 0x1B3C(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC3];                                      // 0x1B3D(0x00C3) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV105");
		return ptr;
	}


	void CallUpV105();
};


// Class JackGame.JackVehicleV201
// 0x0000 (0x1C00 - 0x1C00)
class AJackVehicleV201 : public AJackVehicleV105
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV201");
		return ptr;
	}


	void SetSplashEnable(bool bSplashEnable);
};


// Class JackGame.JackVehicleV202
// 0x0000 (0x1B30 - 0x1B30)
class AJackVehicleV202 : public AJackVehicleMonster
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV202");
		return ptr;
	}

};


// Class JackGame.JackVehicleV203
// 0x00B0 (0x1BE0 - 0x1B30)
class AJackVehicleV203 : public AJackVehicleMonster
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x1B30(0x0004) MISSED OFFSET
	bool                                               bNoWaiterMontage;                                         // 0x1B34(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x1B35(0x0003) MISSED OFFSET
	float                                              KeepFallStartSpeedSec;                                    // 0x1B38(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x1B3C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    MountDelegate;                                            // 0x1B40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    UnmounDelegate;                                           // 0x1B50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x80];                                      // 0x1B60(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV203");
		return ptr;
	}


	void UnSetWaitMotionSetting(class AJackCharacter* Character);
	void StopAnimMontageWait();
	void StartAnimMontageWait();
	void SetWaitMotionSetting(class AJackCharacter* Character);
	void SetAnimMontageWait(TArray<class UAnimMontage*> AnimMontages);
	void JackVehicleV203MountUnmountDelegate__DelegateSignature(class AJackVehicleV203* Sender);
	void ClearMountUnmountDelegate();
	void BroadCastMountUnmountDelegate(bool bMount);
};


// Class JackGame.JackVehicleV204
// 0x0000 (0x1B30 - 0x1B30)
class AJackVehicleV204 : public AJackVehicleMonster
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV204");
		return ptr;
	}


	void SetRiderEquipmentHidden(bool bEquipmentHidden);
};


// Class JackGame.JackVehicleV205
// 0x0000 (0x1B30 - 0x1B30)
class AJackVehicleV205 : public AJackVehicleMonster
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleV205");
		return ptr;
	}

};


// Class JackGame.JackVehicleWhale
// 0x0220 (0x1660 - 0x1440)
class AJackVehicleWhale : public AJackPlayableCharacter
{
public:
	float                                              SteeringRate;                                             // 0x1440(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FlySpeedMax;                                              // 0x1444(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              DashSpeedMax;                                             // 0x1448(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MoveUpperLimit;                                           // 0x144C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MoveLowerLimit;                                           // 0x1450(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              InvalidKeyHeight;                                         // 0x1454(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UpDownAccRate;                                            // 0x1458(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UpDownSpeedRate;                                          // 0x145C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UpDownSpeedMax;                                           // 0x1460(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UpDownAccdDown;                                           // 0x1464(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UpDownAccdDownInvalidKey;                                 // 0x1468(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              UpDownSpeedDown;                                          // 0x146C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x1470(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              PitchSpeed;                                               // 0x1474(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              PitchSpeedUp;                                             // 0x1478(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              PitchSpeedDown;                                           // 0x147C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraHeightOffset;                                       // 0x1480(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraAngleMax;                                           // 0x1484(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraUpperAngleLimit;                                    // 0x1488(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraLowerAngleLimit;                                    // 0x148C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              WhaleTurnRate;                                            // 0x1490(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               IsWhaleMove;                                              // 0x1494(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1495(0x0003) MISSED OFFSET
	float                                              WhaleRollDashTimeMax;                                     // 0x1498(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              WhaleUpDownAnimeTime;                                     // 0x149C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsNoUpDownAnime;                                         // 0x14A0(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bIsDebugMoveing;                                          // 0x14A1(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugSindo;                                              // 0x14A2(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugSetAllEffects;                                      // 0x14A3(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugSetSingleEffect;                                    // 0x14A4(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x14A5(0x0003) MISSED OFFSET
	float                                              TurnAndRotateYawLerpRate;                                 // 0x14A8(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MeshRootLerpRate;                                         // 0x14AC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              TurnAngleRate;                                            // 0x14B0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MeshRootYawRate;                                          // 0x14B4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MeshRootRotateYawRate;                                    // 0x14B8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CameraOffsetVector;                                       // 0x14BC(0x000C) (Edit, BlueprintVisi, IsPlainOldData)
	float                                              CameraLookAtArmLength;                                    // 0x14C8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              StartMeshRootForawrdVelocitySpeed;                        // 0x14CC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              MaxMeshRootForawrdVelocitySpeed;                          // 0x14D0(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraPitchCenterMax;                                     // 0x14D4(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraPitchCenterMin;                                     // 0x14D8(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	float                                              CameraPitchCenterLerpRate;                                // 0x14DC(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xFC];                                      // 0x14E0(0x00FC) MISSED OFFSET
	float                                              WhaleMoveYawInputRate;                                    // 0x15DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WhaleControlPitchVelocityChangeRate;                      // 0x15E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WhaleMeshRootRotateRate;                                  // 0x15E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WhaleMeshRootRotateC;                                     // 0x15E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WhaleMeshRootRotateK;                                     // 0x15EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x38];                                      // 0x15F0(0x0038) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWhalePushHelpButton;                                    // 0x1628(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x28];                                      // 0x1638(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVehicleWhale");
		return ptr;
	}


	void OnWhaleRollDashEffectStartBp();
	void OnWhaleRollDashEffectEndBp();
	void OnWhaleDashStartBp();
	void OnWhaleDashEndBp();
	void Latent_StartVine(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void Delegate__DelegateSignature();
	void CancelDash();
};


// Class JackGame.JackVibrationManager
// 0x0008 (0x0040 - 0x0038)
class UJackVibrationManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVibrationManager");
		return ptr;
	}

};


// Class JackGame.JackVisibilityTrack
// 0x0008 (0x00B0 - 0x00A8)
class UJackVisibilityTrack : public UInterpTrackVisibility
{
public:
	TEnumAsByte<EJackCharacterHiddenPurpose>           VisibilityType;                                           // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVisibilityTrack");
		return ptr;
	}

};


// Class JackGame.JackVoiceTimelineTrack
// 0x0000 (0x0038 - 0x0038)
class UJackVoiceTimelineTrack : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTimelineTrack");
		return ptr;
	}

};


// Class JackGame.JackVoiceTimelineTrackBlinkEnable
// 0x0010 (0x0048 - 0x0038)
class UJackVoiceTimelineTrackBlinkEnable : public UJackVoiceTimelineTrack
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTimelineTrackBlinkEnable");
		return ptr;
	}

};


// Class JackGame.JackVoiceTimelineTrackEmotion
// 0x0018 (0x0050 - 0x0038)
class UJackVoiceTimelineTrackEmotion : public UJackVoiceTimelineTrack
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTimelineTrackEmotion");
		return ptr;
	}

};


// Class JackGame.JackVoiceTimelineTrackEyeCloseRate
// 0x0028 (0x0060 - 0x0038)
class UJackVoiceTimelineTrackEyeCloseRate : public UJackVoiceTimelineTrack
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTimelineTrackEyeCloseRate");
		return ptr;
	}

};


// Class JackGame.JackVoiceTimelineTrackTone
// 0x0018 (0x0050 - 0x0038)
class UJackVoiceTimelineTrackTone : public UJackVoiceTimelineTrack
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTimelineTrackTone");
		return ptr;
	}

};


// Class JackGame.JackVoiceTimelineTrackUpperFace
// 0x0010 (0x0048 - 0x0038)
class UJackVoiceTimelineTrackUpperFace : public UJackVoiceTimelineTrack
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTimelineTrackUpperFace");
		return ptr;
	}

};


// Class JackGame.JackVoiceTrack
// 0x00E8 (0x01C8 - 0x00E0)
class UJackVoiceTrack : public USQEXSEADInterpTrackSound
{
public:
	struct FSoftObjectPath                             Asset;                                                    // 0x00E0(0x0008) (Edit)
	struct FName                                       LipSyncGroupName;                                         // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FJackVoiceTrackInfo>                 VoiceTrackInfos;                                          // 0x00F0(0x0010) (ZeroConstructor)
	class UDataTable*                                  LipDataTable;                                             // 0x0100(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0108(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTrack");
		return ptr;
	}

};


// Class JackGame.JackVoiceTrackInst
// 0x0010 (0x0070 - 0x0060)
class UJackVoiceTrackInst : public USQEXSEADInterpTrackInstSound
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackVoiceTrackInst");
		return ptr;
	}

};


// Class JackGame.JackWeaponBase
// 0x0048 (0x03E0 - 0x0398)
class AJackWeaponBase : public AActor
{
public:
	class AJackCharacter*                              OwnerCharacter;                                           // 0x0398(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FName                                       WeaponUnsheatheSocket;                                    // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       WeaponSheatheSocket;                                      // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHiddenOnSheathe;                                         // 0x03B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET
	class USoundCue*                                   EquipSound;                                               // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EJackItem_Classification>              ItemClassification;                                       // 0x03C0(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackEquipmentRegion>                  EquipmentRegion;                                          // 0x03C1(0x0001) (BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xE];                                       // 0x03C2(0x000E) MISSED OFFSET
	class UJackDitherHideComponent*                    DitherHideComponent;                                      // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DefaultDitherTime;                                        // 0x03D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponBase");
		return ptr;
	}


	void SetSheatheStatus(TEnumAsByte<EJackSheatheStatus> SheatheStatus);
	void SetHiddenControl(TEnumAsByte<EJackWeaponHiddenPurpose> Purpose, bool bNewHidden);
	void SetDitherHiddenByTime(TEnumAsByte<EJackHideCompoHiddenPurpose> InPurpose, bool bInHidden, float InSeconds);
	void SetDitherHiddenByCurve(TEnumAsByte<EJackHideCompoHiddenPurpose> InPurpose, bool bInHidden, class UCurveBase* InCurve);
	void OnWeaponOpen();
	void OnWeaponHidden(bool bNewHidden);
	void OnWeaponClose();
	bool IsHiddenControl(TEnumAsByte<EJackWeaponHiddenPurpose> Purpose);
	class AJackCharacter* GetOwnerCharacter();
};


// Class JackGame.JackWeaponSK
// 0x0028 (0x0408 - 0x03E0)
class AJackWeaponSK : public AJackWeaponBase
{
public:
	class USkeletalMeshComponent*                      WeaponMeshComp;                                           // 0x03E0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UAnimMontage*                                EquipAnim;                                                // 0x03E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class UAnimMontage*                                CurrentAnimMontage;                                       // 0x03F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0400(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponSK");
		return ptr;
	}

};


// Class JackGame.JackWeaponBullet
// 0x00B0 (0x04B8 - 0x0408)
class AJackWeaponBullet : public AJackWeaponSK
{
public:
	struct FName                                       MuzzleSocket;                                             // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FJackBulletWeaponConfig                     BulletWeaponConfig;                                       // 0x0410(0x0028) (Edit, DisableEditOnInstance)
	class UAnimMontage*                                FireAnim;                                                 // 0x0438(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLoopedFireAnim;                                          // 0x0440(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0441(0x0007) MISSED OFFSET
	class UAnimMontage*                                ReloadAnim;                                               // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      FireCameraShake;                                          // 0x0450(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UForceFeedbackEffect*                        FireForceFeedback;                                        // 0x0458(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             MuzzleEffect;                                             // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLoopedMuzzleEffect;                                      // 0x0468(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0469(0x0007) MISSED OFFSET
	class USoundCue*                                   FireSound;                                                // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLoopedFireSound;                                         // 0x0478(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0479(0x0007) MISSED OFFSET
	class USoundCue*                                   FireLoopSound;                                            // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   FireFinishSound;                                          // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USoundCue*                                   ReloadSound;                                              // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0498(0x0008) MISSED OFFSET
	class UParticleSystemComponent*                    MuzzlePSC;                                                // 0x04A0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             FireAudioComp;                                            // 0x04A8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x04B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponBullet");
		return ptr;
	}


	void Fire();
};


// Class JackGame.JackWeaponProjectile
// 0x0020 (0x0428 - 0x0408)
class AJackWeaponProjectile : public AJackWeaponSK
{
public:
	struct FName                                       MuzzleSocket;                                             // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DefaultProjectileClass;                                   // 0x0410(0x0008) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	class UParticleSystemComponent*                    FirePSC;                                                  // 0x0418(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAudioComponent*                             FireAudioComp;                                            // 0x0420(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponProjectile");
		return ptr;
	}


	void SpawnProjectile(class UClass* ProjectileClass);
};


// Class JackGame.JackWeaponPropActor
// 0x0020 (0x03D0 - 0x03B0)
class AJackWeaponPropActor : public AJackPropActor
{
public:
	class USkeletalMeshComponent*                      WeaponMeshComponent;                                      // 0x03B0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UAnimationAsset*                             FireAnimAsset;                                            // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ActionEffectClass;                                        // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponPropActor");
		return ptr;
	}


	void OnSpawnHitEffectDelegate();
};


// Class JackGame.JackBowgunPropActor
// 0x0008 (0x03D8 - 0x03D0)
class AJackBowgunPropActor : public AJackWeaponPropActor
{
public:
	class UClass*                                      ActionEffectClassForMonster;                              // 0x03D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBowgunPropActor");
		return ptr;
	}

};


// Class JackGame.JackWeaponSM
// 0x0008 (0x03E8 - 0x03E0)
class AJackWeaponSM : public AJackWeaponBase
{
public:
	class UStaticMeshComponent*                        WeaponMeshComp;                                           // 0x03E0(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponSM");
		return ptr;
	}


	class UStaticMeshComponent* GetWeaponMeshComponent();
};


// Class JackGame.JackWeaponStructs
// 0x0000 (0x0038 - 0x0038)
class UJackWeaponStructs : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeaponStructs");
		return ptr;
	}

};


// Class JackGame.JackWeatherAffectComponent
// 0x0030 (0x01D0 - 0x01A0)
class UJackWeatherAffectComponent : public UJackCharacterComponent
{
public:
	TArray<TWeakObjectPtr<class AJackWorldWeatherWindOverrideVolume>> WindOverrideArray;                                        // 0x01A0(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class AJackWorldWeatherVolume>> WeatherVolumeArray;                                       // 0x01B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x01C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeatherAffectComponent");
		return ptr;
	}


	TEnumAsByte<EJackWorldWindLevel> GetWindLevel();
	float GetWindAngle();
	struct FName GetWeatherVolumeID();
	TEnumAsByte<EJackWorldWeather> GetWeatherForWeatherReport();
	TEnumAsByte<EJackWorldWeather> GetWeather();
	TEnumAsByte<EJackWorldWeather> GetNextChangeWeather(TEnumAsByte<EJackTimeZone>* OutTimeZone, bool* bOutTomorrow);
	struct FName GetLastWeatherVolumeID();
};


// Class JackGame.JackWeatherTrack
// 0x0010 (0x00C0 - 0x00B0)
class UJackWeatherTrack : public UInterpTrackFloatBase
{
public:
	struct FName                                       VolumeID;                                                 // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSetDefaultWeather;                                       // 0x00B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeatherTrack");
		return ptr;
	}

};


// Class JackGame.JackWindApplyRateTrack
// 0x0000 (0x00B0 - 0x00B0)
class UJackWindApplyRateTrack : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWindApplyRateTrack");
		return ptr;
	}

};


// Class JackGame.JackWindApplyRateTrackInst
// 0x0000 (0x0038 - 0x0038)
class UJackWindApplyRateTrackInst : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWindApplyRateTrackInst");
		return ptr;
	}

};


// Class JackGame.JackWindControlTrack
// 0x0010 (0x0100 - 0x00F0)
class UJackWindControlTrack : public UJackMoveTrack
{
public:
	TArray<struct FJackWindControlInfo>                WindInfos;                                                // 0x00F0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWindControlTrack");
		return ptr;
	}

};


// Class JackGame.JackWeatherTrackInst
// 0x0008 (0x0040 - 0x0038)
class UJackWeatherTrackInst : public UInterpTrackInst
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWeatherTrackInst");
		return ptr;
	}

};


// Class JackGame.JackWorldSettings
// 0x0008 (0x0570 - 0x0568)
class AJackWorldSettings : public AWorldSettings
{
public:
	bool                                               bDebugFlag_ShowParticleSystemComponentInfo;               // 0x0568(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0569(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWorldSettings");
		return ptr;
	}

};


// Class JackGame.JackWorldTime
// 0x0058 (0x0090 - 0x0038)
class UJackWorldTime : public UObject
{
public:
	int                                                StartHour_Morning;                                        // 0x0038(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StartHour_Daytime;                                        // 0x003C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StartHour_Evening;                                        // 0x0040(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                StartHour_Night;                                          // 0x0044(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scenario_StartHour_Morning;                               // 0x0048(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scenario_StartHour_Daytime;                               // 0x004C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scenario_StartHour_Evening;                               // 0x0050(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scenario_StartHour_Night;                                 // 0x0054(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scenario_StartHour_Midnight;                              // 0x0058(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                Scenario_StartHour_EarlyMorning;                          // 0x005C(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnChangeOfDate;                                           // 0x0060(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0070(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWorldTime");
		return ptr;
	}


	void SetStopperTime(int StopTime);
	void SetPause(TEnumAsByte<EJackWorldTimePausePurpose> Purpose, bool bPause);
	void SetNowTime(int InNowTime, bool bResetNPCSchedule);
	void SetMinutesOf1Day(int Minutes);
	void ReleaseStopperTime();
	void OnChangeOfDate__DelegateSignature();
	bool IsPauseByPurpose(TEnumAsByte<EJackWorldTimePausePurpose> Purpose);
	bool IsPause();
	TEnumAsByte<EJackTimeZone> GetTimeZone(int Time);
	bool GetStopperTime(int* OutStopTime);
	TEnumAsByte<EJackScenarioTimeZone> GetScenarioTimeZone(int Time);
	int GetNowTime();
	int GetNowSecond();
	int GetNowMinute();
	int GetNowHour();
	int GetMinutesOf1Day();
	void FastForward(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, int Hour, int Minute, float Speed, bool bPause);
};


// Class JackGame.JackWorldWeather
// 0x00A0 (0x00D8 - 0x0038)
class UJackWorldWeather : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0038(0x0010) MISSED OFFSET
	TEnumAsByte<EJackWorldWeather>                     DefaultWeather;                                           // 0x0048(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJackWorldWindLevel>                   DefaultWindLevel;                                         // 0x0049(0x0001) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	float                                              DefaultWindAngle;                                         // 0x004C(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	int                                                DefaultWindAngleChangeMinute;                             // 0x0050(0x0004) (Edit, BlueprintVisi, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FJackCorrectWeatherForWeatherReport> CorrectWeatherForWeatherReportTable;                      // 0x0058(0x0010) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData03[0x70];                                      // 0x0068(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWorldWeather");
		return ptr;
	}


	void WorldWindLevelChangeStart(TEnumAsByte<EJackWorldWindLevel> OldWorldWindLevel, TEnumAsByte<EJackWorldWindLevel> NewWorldWindLevel);
	void WorldWindLevelChangeEnd();
	void WorldWindAngleChangeStart(float OldWindAngle, float NewWindAngle);
	void WorldWindAngleChangeEnd();
	void WorldWeatherChangeStart(TEnumAsByte<EJackWorldWeather> InOldWorldWeather, TEnumAsByte<EJackWorldWeather> InNewWorldWeather);
	void WorldWeatherChangeEnd();
	void WeatherReportMessage(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const struct FName& PreTextID, const struct FName& MainTextID, TArray<struct FJackMessageArgumentData> TagValueList);
	void OnTokugiWeatherReport();
	bool IsReadyWeatherVolume(const struct FName& WeatherVolumeID);
	TEnumAsByte<EJackWorldWindLevel> GetTomorrowWindLevel(const struct FName& WeatherVolumeID, TEnumAsByte<EJackTimeZone> Timezone);
	float GetTomorrowWindAngle(const struct FName& WeatherVolumeID, TEnumAsByte<EJackTimeZone> Timezone);
	TEnumAsByte<EJackWorldWeather> GetTomorrowWeather(const struct FName& WeatherVolumeID, TEnumAsByte<EJackTimeZone> Timezone);
	int GetTomorrowPatternNo(const struct FName& WeatherVolumeID);
	int GetTodayPatternNo(const struct FName& WeatherVolumeID);
	TEnumAsByte<EJackWorldWindLevel> GetPatternWindLevel(const struct FName& WeatherVolumeID, int Pattern, TEnumAsByte<EJackTimeZone> Timezone);
	int GetPatternWindAngleChangeMinute(const struct FName& WeatherVolumeID, int Pattern, TEnumAsByte<EJackTimeZone> Timezone);
	float GetPatternWindAngle(const struct FName& WeatherVolumeID, int Pattern, TEnumAsByte<EJackTimeZone> Timezone);
	TEnumAsByte<EJackWorldWeather> GetPatternWeather(const struct FName& WeatherVolumeID, int Pattern, TEnumAsByte<EJackTimeZone> Timezone);
	TEnumAsByte<EJackWorldWindLevel> GetNowWindLevel(const struct FName& WeatherVolumeID);
	int GetNowWindAngleChangeMinute(const struct FName& WeatherVolumeID);
	float GetNowWindAngle(const struct FName& WeatherVolumeID);
	TEnumAsByte<EJackWorldWeather> GetNowWeather(const struct FName& WeatherVolumeID);
	TEnumAsByte<EJackWorldWeather> GetNextChangeWeather(const struct FName& WeatherVolumeID, TEnumAsByte<EJackTimeZone>* OutTimeZone, bool* bOutTomorrow);
	void ForceSetTodayPatternNo(const struct FName& WeatherVolumeID, int Pattern, bool bSetDefaultWeather);
	TEnumAsByte<EJackWorldWeather> CorrectWeatherForWeatherReport(TEnumAsByte<EJackWorldWeather> Weather);
	void ChangeOfDateCallback();
};


// Class JackGame.JackWorldWeatherVolume
// 0x0018 (0x03E8 - 0x03D0)
class AJackWorldWeatherVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET
	struct FName                                       WeatherVolumeID;                                          // 0x03E0(0x0008) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWorldWeatherVolume");
		return ptr;
	}

};


// Class JackGame.JackWorldWeatherWindOverrideVolume
// 0x0018 (0x03E8 - 0x03D0)
class AJackWorldWeatherWindOverrideVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D0(0x0008) MISSED OFFSET
	TEnumAsByte<EJackWorldWindLevel>                   WindLevel;                                                // 0x03D8(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D9(0x0003) MISSED OFFSET
	float                                              WindAngle;                                                // 0x03DC(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                WindAngleChangeMinute;                                    // 0x03E0(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackWorldWeatherWindOverrideVolume");
		return ptr;
	}

};


// Class JackGame.JackZonePointControl
// 0x0008 (0x0040 - 0x0038)
class UJackZonePointControl : public UObject
{
public:
	float                                              ZonePoint;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackZonePointControl");
		return ptr;
	}

};


// Class JackGame.JackBattleFieldInfo
// 0x0030 (0x0068 - 0x0038)
class UJackBattleFieldInfo : public UObject
{
public:
	struct FVector                                     Location;                                                 // 0x0038(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, EditConst, IsPlainOldData)
	struct FVector                                     Direction;                                                // 0x0044(0x000C) (Edit, BlueprintVisi, BlueprintReadOnly, EditConst, IsPlainOldData)
	float                                              Radius;                                                   // 0x0050(0x0004) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bEscapeEnable;                                            // 0x0054(0x0001) (Edit, BlueprintVisi, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	TWeakObjectPtr<class AJackBattleFieldGenerator>    Generator;                                                // 0x0058(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                PermitIndex;                                              // 0x0060(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class JackGame.JackBattleFieldInfo");
		return ptr;
	}


	bool IsInfinityBattleField();
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
